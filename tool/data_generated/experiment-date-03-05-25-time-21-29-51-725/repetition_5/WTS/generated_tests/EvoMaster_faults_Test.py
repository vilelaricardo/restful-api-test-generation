#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2025-05-04T11:44:34.159Z[Etc/UTC]
#  
#  The generated test suite contains 76 tests
#  
#  Covered targets: 2404
#  
#  Used time: 0h 50m 47s
#  
#  Needed budget for current results: 100%
#  
#  This file contains test cases that are likely to indicate faults.
class EvoMaster_faults_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:8000"
    
    
    
    
    
    
    
    
    
    
    # Calls:
    # (500) GET:/v1/profissionais/lote/{id}
    # Found 1 potential fault of type-code 100
    @timeout_decorator.timeout(60)
    def test_0_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/8c7361e6-b2a0-46ce-bd6c-2c0adb14c4d4?" + 
                    "page=426&" + 
                    "per_page=740",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 8c7361e6-b2a0-46ce-bd6c-2c0adb14c4d4 Nenhum lote correspondente foi encontrado."
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (500) POST:/v1/estudantes/lote
    # Found 2 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   2025
    @timeout_decorator.timeout(60)
    def test_1_with500(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"numeroNISResponsavel\": \"32092305960\", " + \
            " \"dataNascimento\": \"5\", " + \
            " \"email\": \"YipyiZ@example.com\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 799 " + \
            " ], " + \
            " \"numeroNIS\": \"39545854470\", " + \
            " \"orgaoEmissor\": \"SSP-MG\", " + \
            " \"bairro\": \"São Espinoza\", " + \
            " \"numero\": \"31273\", " + \
            " \"municipio\": 2507507, " + \
            " \"uf\": 11, " + \
            " \"matriculaRede\": \"G8BMn2\", " + \
            " \"inep\": 33100659, " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"anoMatricula\": 2025 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes/lote
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["errors"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "JSON inválido."
    
    
    # Calls:
    # 1 - (500) GET:/v1/estudantes/lote/{id}
    # 2 - (200) GET:/v1/estudantes/{cpfNis}
    # Found 2 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_2_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/2af75fd2-57f6-40f3-849b-2c5d1855ff83?page=1622409952",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 2af75fd2-57f6-40f3-849b-2c5d1855ff83 Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/44588858475",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert res_1.json()["data"]["cpf"] == "44588858475"
        assert res_1.json()["data"]["nome"] == "Aaron Mário Deverso Filho"
        assert res_1.json()["data"]["nomeSocial"] is None
        assert res_1.json()["data"]["numeroNIS"] == "20250881696"
        assert res_1.json()["data"]["rg"] == "6806669090460072"
        assert res_1.json()["data"]["orgaoEmissor"] == "SSP-RJ"
        assert res_1.json()["data"]["cpfResponsavel"] == "07808637122"
        assert res_1.json()["data"]["nomeMaeEstudante"] == "Antonieta Zamana Ramires Neto"
        assert res_1.json()["data"]["numeroNISResponsavel"] == "21306759414"
        assert res_1.json()["data"]["dataNascimento"] == "2007-04-23"
        assert res_1.json()["data"]["logradouro"] == "Rua R. Samuel"
        assert res_1.json()["data"]["bairro"] == "São Benites"
        assert res_1.json()["data"]["numero"] == "5931"
        assert res_1.json()["data"]["cep"] == "19849783"
        assert res_1.json()["data"]["municipio"] == 3304557.0
        assert res_1.json()["data"]["certidaoNascimento"] == "54293476104316100147513696685717"
        assert res_1.json()["data"]["cnh"] is None
        assert res_1.json()["data"]["uf"] == 33.0
        assert res_1.json()["data"]["racaCor"] == 3.0
        assert len(res_1.json()["data"]["tipoDeficiencia"]) == 0
        assert res_1.json()["data"]["genero"] == 4.0
        assert res_1.json()["data"]["telefone"] is None
        assert res_1.json()["data"]["email"] == "aaron.mario.deverso.filho@fake.com"
        assert res_1.json()["data"]["situacaoCadastroValidado"] is None
        assert len(res_1.json()["data"]["matriculas"]) == 1
        assert res_1.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1.0070599E7
        assert res_1.json()["data"]["matriculas"][0]["codInstituicao"] == 185938.0
        assert res_1.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_1.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_1.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_1.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_1.json()["data"]["matriculas"][0]["serieAno"] == 26.0
        assert res_1.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_1.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_1.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_1.json()["data"]["matriculas"][0]["inep"] == "41083156"
        assert res_1.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_1.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_1.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_1.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_1.json()["data"]["outrasMatriculas"]) == 0
    
    
    # Calls:
    # 1 - (200) PATCH:/v1/estudantes/lote
    # 2 - (200) GET:/v1/estudantes/{cpfNis}
    # 3 - (null) GET:/v1/estudantes
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_3(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_54_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_55_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_56_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_57_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_0.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/25422844661",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert res_1.json()["data"]["cpf"] == "25422844661"
        assert res_1.json()["data"]["nome"] == "Hugo Teixeira"
        assert res_1.json()["data"]["nomeSocial"] is None
        assert res_1.json()["data"]["numeroNIS"] == "30036301294"
        assert res_1.json()["data"]["rg"] == "09008030261465571551"
        assert res_1.json()["data"]["orgaoEmissor"] == "zDhj-nT"
        assert res_1.json()["data"]["cpfResponsavel"] == "81031307374"
        assert res_1.json()["data"]["nomeMaeEstudante"] == "Cecília Filgueira"
        assert res_1.json()["data"]["numeroNISResponsavel"] == "03992573209"
        assert res_1.json()["data"]["dataNascimento"] == "1985-01-05"
        assert res_1.json()["data"]["logradouro"] == "Viela Enzo Gabriel Martim"
        assert res_1.json()["data"]["bairro"] == "Bairro ducimus"
        assert res_1.json()["data"]["numero"] == "222"
        assert res_1.json()["data"]["cep"] == "36443254"
        assert res_1.json()["data"]["municipio"] == 2508901.0
        assert res_1.json()["data"]["certidaoNascimento"] == "37320441836613638645234201617484"
        assert res_1.json()["data"]["cnh"] == "01795610220"
        assert res_1.json()["data"]["uf"] == 13.0
        assert res_1.json()["data"]["racaCor"] == 1.0
        assert len(res_1.json()["data"]["tipoDeficiencia"]) == 3
        assert res_1.json()["data"]["tipoDeficiencia"][0] == 4.0
        assert res_1.json()["data"]["tipoDeficiencia"][1] == 6.0
        assert res_1.json()["data"]["tipoDeficiencia"][2] == 4.0
        assert res_1.json()["data"]["genero"] == 3.0
        assert res_1.json()["data"]["telefone"] == "16982231381"
        assert res_1.json()["data"]["email"] == "teste@test.com"
        assert res_1.json()["data"]["situacaoCadastroValidado"] == 4.0
        assert len(res_1.json()["data"]["matriculas"]) == 1
        assert res_1.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1226622.0
        assert res_1.json()["data"]["matriculas"][0]["codInstituicao"] == 223381.0
        assert res_1.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "1977-04-22"
        assert res_1.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_1.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "1998-03-06"
        assert res_1.json()["data"]["matriculas"][0]["situacaoMatricula"] == False
        assert res_1.json()["data"]["matriculas"][0]["serieAno"] == 25.0
        assert res_1.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_1.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_1.json()["data"]["matriculas"][0]["deletadaEm"] == "2024-05-03 03:38:59"
        assert res_1.json()["data"]["matriculas"][0]["inep"] == "27610099"
        assert res_1.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_1.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_1.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_1.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_1.json()["data"]["outrasMatriculas"]) == 0
        
        try:
            headers = {}
            headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
            headers['Accept'] = "*/*"
            requests \
                    .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                        "page=809&" + 
                        "per_page=482",
                        headers=headers)
        except AssertionError as e:
            raise e
        except Exception as e:
            pass
    
    
    # Calls:
    # 1 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 2 - (404) GET:/v1/profissionais/{cpf}
    # 3 - (401) GET:/v1/profissionais/lote
    # 4 - (500) GET:/v1/profissionais/lote/{id}
    # Found 3 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_4_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/40033127/erros?per_page=482",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 40033127"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/12147927155",
                    headers=headers)
        
        assert res_1.status_code == 404
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> Response status 401 not defined for path '/v1/profissionais/lote'.
        headers = {}
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_2.status_code == 401
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Não autorizado"
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/cf367fa9-8add-40f9-babb-5fd511f344d6?" + 
                    "page=206&" + 
                    "per_page=15",
                    headers=headers)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: cf367fa9-8add-40f9-babb-5fd511f344d6 Nenhum lote correspondente foi encontrado."
    
    
    # Calls:
    # 1 - (500) GET:/v1/profissionais/lote/{id}
    # 2 - (200) GET:/v1/estudantes/lote/{id}
    # 3 - (422) POST:/v1/profissionais
    # Found 2 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   1
    @timeout_decorator.timeout(60)
    def test_5_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/ffe42eae-31ec-4d7b-8397-1127894b96f2?per_page=838",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: ffe42eae-31ec-4d7b-8397-1127894b96f2 Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/ed854089-869f-4d40-96d1-02eba9641674?" + 
                    "per_page=10&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: ed854089-869f-4d40-96d1-02eba9641674"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nome\": \"Aaron Pacheco Filho\", " + \
            " \"racaCor\": 5, " + \
            " \"bairro\": \"São Flores\", " + \
            " \"cep\": \"47117888\", " + \
            " \"uf\": 42, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 12621488, " + \
            " \"anoInicioFormacaoAcademica\": 165, " + \
            " \"anoConclusaoFormacaoAcademica\": 778 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 374, " + \
            " \"anoConclusaoFormacaoAcademica\": 923 " + \
            " } " + \
            " ], " + \
            " \"inep\": 29191840, " + \
            " \"matriculaRede\": \"7\", " + \
            " \"tipoVinculo\": 967, " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataFim\": \"1916-07-02\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_2.status_code == 422
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #2 ($dataNascimento) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes/lote
    # 2 - (500) POST:/v1/estudantes
    # 3 - (201) POST:/v1/estudantes/lote
    # Found 5 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   25
    @timeout_decorator.timeout(60)
    def test_6_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?" + 
                    "page=228&" + 
                    "per_page=482",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 10538.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 482.0
        assert res_0.json()["pagination"]["current_page"] == 228.0
        assert res_0.json()["pagination"]["total_pages"] == 22.0
        assert res_0.json()["pagination"]["links"]["previous"] == 227.0
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"f0fo5Q8_j\", " + \
            " \"nomeMaeEstudante\": \"I2kUdzTDh\", " + \
            " \"cpf\": \"47392763806\", " + \
            " \"nome\": \"6cc97vMeCP9KgSI\", " + \
            " \"dataNascimento\": \"2007-12-17\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"sexo\": \"5\", " + \
            " \"numeroNIS\": \"87422846675\", " + \
            " \"rg\": \"2501717790804516\", " + \
            " \"logradouro\": \"Rua R. Ortega\", " + \
            " \"numero\": \"eWGI\", " + \
            " \"cep\": \"57486084\", " + \
            " \"municipio\": 4200705, " + \
            " \"dataInicioMatricula\": \"2056-13-09\", " + \
            " \"instituicao\": 185215, " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo numeroNISResponsavel deve ser numérico. (and 1 more error)"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"15406801694\", " + \
            " \"cpf\": \"X\", " + \
            " \"nome\": \"Célia Ribeira\", " + \
            " \"dataNascimento\": \"1979-11-28\", " + \
            " \"racaCor\": 2, " + \
            " \"nomeSocial\": \"yugYPt7uvqYJr\", " + \
            " \"sexo\": \"1\", " + \
            " \"numeroNIS\": \"tbmmJe\", " + \
            " \"rg\": \"92825893\", " + \
            " \"certidaoNascimento\": \"06288880843927562368107230811042\", " + \
            " \"bairro\": \"São Teles\", " + \
            " \"cep\": \"43982290\", " + \
            " \"municipio\": 3109253, " + \
            " \"uf\": 174, " + \
            " \"estudantePpl\": 0, " + \
            " \"dataInicioMatricula\": \"1968-04-01\", " + \
            " \"matriculaRede\": \"tW\", " + \
            " \"inep\": 27216136, " + \
            " \"formaOrganizacaoTurma\": 519, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 7, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"33383001710\", " + \
            " \"cpf\": \"N3D_nQ\", " + \
            " \"nome\": \"Eloah Negrão\", " + \
            " \"genero\": 42, " + \
            " \"email\": \"aaron.jonas.azevedo@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 2, " + \
            " 10, " + \
            " 3 " + \
            " ], " + \
            " \"rg\": \"88774854105131303702\", " + \
            " \"orgaoEmissor\": \"vC2a0H9Lv4\", " + \
            " \"certidaoNascimento\": \"93570596784076844432693737317711\", " + \
            " \"cnh\": \"93517950494\", " + \
            " \"bairro\": \"AS9\", " + \
            " \"cep\": \"54124789\", " + \
            " \"estudantePpl\": 0, " + \
            " \"serieAno\": 25, " + \
            " \"matriculaRede\": \"AhoUbIgQBcG5SVk\", " + \
            " \"instituicao\": 468, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10, " + \
            " \"estudanteIntegral\": 0 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"82179853912\", " + \
            " \"cpf\": \"90437211746\", " + \
            " \"dataNascimento\": \"2017-10-14\", " + \
            " \"racaCor\": 0, " + \
            " \"email\": \"woFJvqn9\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"nomeSocial\": \"cwKgki1gG5\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 6, " + \
            " 10, " + \
            " 4 " + \
            " ], " + \
            " \"rg\": \"c3M6TZb_yk\", " + \
            " \"orgaoEmissor\": \"xYHJ-Ht\", " + \
            " \"certidaoNascimento\": \"RHmUSZQol2L\", " + \
            " \"cnh\": \"01354673004\", " + \
            " \"bairro\": \"Bairro vel\", " + \
            " \"cep\": \"PMz\", " + \
            " \"serieAno\": 63, " + \
            " \"matriculaRede\": \"SJK\", " + \
            " \"inep\": 41071670, " + \
            " \"dataInicioPeriodoLetivo\": \"1970-01-29\", " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"estudanteIntegral\": 1 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 201
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
    
    
    # Calls:
    # 1 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (200) GET:/v1/profissionais
    # 4 - (400) GET:/v1/profissionais/lote/{id}
    # Found 9 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_7_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "page=478&" + 
                    "cpfAtual=FD3Nu7Pqu&" + 
                    "cpfNovo=3bb",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro inesperado."
        assert res_0.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"41068170476\", " + \
            " \"nome\": \"98bfOo\", " + \
            " \"genero\": 42, " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 6 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"certidaoNascimento\": \"46897183709973431416183422932313\", " + \
            " \"cnh\": \"ULv\", " + \
            " \"bairro\": \"São Valência\", " + \
            " \"numero\": \"kU9k\", " + \
            " \"dataInicioMatricula\": \"2075-11-11\", " + \
            " \"dataInicioPeriodoLetivo\": \"1922-10-26\", " + \
            " \"formaOrganizacaoTurma\": 5, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 683, " + \
            " \"estudanteAnoPeriodo\": 3, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 3
        assert res_2.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"][0]["cpf"] == "43839402000"
        assert res_2.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_2.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"][0]["genero"] == 1.0
        assert res_2.json()["data"][0]["racaCor"] == 2.0
        assert res_2.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"][0]["telefone"] is None
        assert res_2.json()["data"][0]["nomeSocial"] is None
        assert res_2.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"][0]["bairro"] == "Centro"
        assert res_2.json()["data"][0]["numero"] == "123"
        assert res_2.json()["data"][0]["cep"] == "01001000"
        assert res_2.json()["data"][0]["municipio"] == 2700409.0
        assert res_2.json()["data"][0]["uf"] == 27.0
        assert res_2.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_2.json()["data"][0]["situacaoAtiva"] == True
        assert res_2.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"][0]["dataFim"] is None
        assert res_2.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_2.json()["data"][0]["matriculaRede"] == "56789"
        assert res_2.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_2.json()["data"][0]["inep"] == "27014088"
        assert len(res_2.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"][1]["cpf"] == "33722248094"
        assert res_2.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_2.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"][1]["genero"] == 1.0
        assert res_2.json()["data"][1]["racaCor"] == 2.0
        assert res_2.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"][1]["telefone"] is None
        assert res_2.json()["data"][1]["nomeSocial"] is None
        assert res_2.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"][1]["bairro"] == "Centro"
        assert res_2.json()["data"][1]["numero"] == "123"
        assert res_2.json()["data"][1]["cep"] == "01001000"
        assert res_2.json()["data"][1]["municipio"] == 2700409.0
        assert res_2.json()["data"][1]["uf"] == 27.0
        assert res_2.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_2.json()["data"][1]["situacaoAtiva"] == True
        assert res_2.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"][1]["dataFim"] is None
        assert res_2.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_2.json()["data"][1]["matriculaRede"] == "56789"
        assert res_2.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_2.json()["data"][1]["inep"] == "27014088"
        assert len(res_2.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"][2]["cpf"] == "31863200037"
        assert res_2.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_2.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"][2]["genero"] == 1.0
        assert res_2.json()["data"][2]["racaCor"] == 2.0
        assert res_2.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"][2]["telefone"] is None
        assert res_2.json()["data"][2]["nomeSocial"] is None
        assert res_2.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"][2]["bairro"] == "Centro"
        assert res_2.json()["data"][2]["numero"] == "123"
        assert res_2.json()["data"][2]["cep"] == "01001000"
        assert res_2.json()["data"][2]["municipio"] == 2700409.0
        assert res_2.json()["data"][2]["uf"] == 27.0
        assert res_2.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_2.json()["data"][2]["situacaoAtiva"] == True
        assert res_2.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"][2]["dataFim"] is None
        assert res_2.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_2.json()["data"][2]["matriculaRede"] == "56789"
        assert res_2.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_2.json()["data"][2]["inep"] == "27014088"
        assert len(res_2.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_2.json()["pagination"]["total"] == 3.0
        assert res_2.json()["pagination"]["count"] == 3.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/582kFah9_UdT5?" + 
                    "per_page=599&" + 
                    "incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_3.status_code == 400
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "O ID fornecido não é um UUID válido. ID: 582kFah9_UdT5"
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (422) PATCH:/v1/estudantes/lote
    # 3 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 4 - (404) GET:/v1/profissionais/{cpf}
    # 5 - (422) POST:/v1/profissionais/lote
    # 6 - (200) GET:/v1/estudantes/{cpfNis}
    # 7 - (200) GET:/v1/profissionais/lote
    # Found 6 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_8_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"46042994808\", " + \
            " \"numeroNISResponsavel\": \"05550440055\", " + \
            " \"nome\": \"Bento Goulart\", " + \
            " \"dataNascimento\": \"1971-11-29\", " + \
            " \"genero\": 2, " + \
            " \"email\": \"AFTER-TWO@AFTER-TWO.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9 " + \
            " ], " + \
            " \"numeroNIS\": \"56536687108\", " + \
            " \"orgaoEmissor\": \"AFT\", " + \
            " \"certidaoNascimento\": \"94310513148327308667608317376975\", " + \
            " \"logradouro\": \"Rua Maria Flor\", " + \
            " \"municipio\": 3500501, " + \
            " \"serieAno\": 71, " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"inep\": 29479800, " + \
            " \"dataInicioPeriodoLetivo\": \"1962-12-21\", " + \
            " \"formaOrganizacaoTurma\": 5, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2025 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 422
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível processar as informações."
        assert res_1.json()["errors"]["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/noMT1/erros?page=642",
                    headers=headers)
        
        assert res_2.status_code == 400
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "O ID fornecido não é um UUID válido. ID: noMT1"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/02755052864",
                    headers=headers)
        
        assert res_3.status_code == 404
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Nenhum profissional de educação encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 422
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/58929950620",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Dados obtidos com sucesso."
        assert res_5.json()["data"]["cpf"] == "58929950620"
        assert res_5.json()["data"]["nome"] == "Aaron Pablo Sepúlveda Jr."
        assert res_5.json()["data"]["nomeSocial"] is None
        assert res_5.json()["data"]["numeroNIS"] == "67321924100"
        assert res_5.json()["data"]["rg"] == "2501717790804516"
        assert res_5.json()["data"]["orgaoEmissor"] == "SSP-SP"
        assert res_5.json()["data"]["cpfResponsavel"] == "42752918755"
        assert res_5.json()["data"]["nomeMaeEstudante"] == "Tatiane Padrão Marin Filho"
        assert res_5.json()["data"]["numeroNISResponsavel"] == "15481446328"
        assert res_5.json()["data"]["dataNascimento"] == "2010-11-21"
        assert res_5.json()["data"]["logradouro"] == "Rua Avenida Padrão"
        assert res_5.json()["data"]["bairro"] == "São Rosa"
        assert res_5.json()["data"]["numero"] == "9"
        assert res_5.json()["data"]["cep"] == "18001918"
        assert res_5.json()["data"]["municipio"] == 3550308.0
        assert res_5.json()["data"]["certidaoNascimento"] == "57951791550566255294024027534909"
        assert res_5.json()["data"]["cnh"] is None
        assert res_5.json()["data"]["uf"] == 35.0
        assert res_5.json()["data"]["racaCor"] == 0.0
        assert len(res_5.json()["data"]["tipoDeficiencia"]) == 0
        assert res_5.json()["data"]["genero"] == 0.0
        assert res_5.json()["data"]["telefone"] is None
        assert res_5.json()["data"]["email"] is None
        assert res_5.json()["data"]["situacaoCadastroValidado"] is None
        assert len(res_5.json()["data"]["matriculas"]) == 1
        assert res_5.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 2492975.0
        assert res_5.json()["data"]["matriculas"][0]["codInstituicao"] == 61106.0
        assert res_5.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_5.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_5.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_5.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_5.json()["data"]["matriculas"][0]["serieAno"] == 45.0
        assert res_5.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_5.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_5.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_5.json()["data"]["matriculas"][0]["inep"] == "23545453"
        assert res_5.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_5.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_5.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_5.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_5.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_5.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_5.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_5.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_5.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_5.json()["data"]["outrasMatriculas"]) == 0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?" + 
                    "page=131&" + 
                    "per_page=83",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_6.json()["data"]) == 0
        assert res_6.json()["pagination"]["total"] == 3147.0
        assert res_6.json()["pagination"]["count"] == 0.0
        assert res_6.json()["pagination"]["per_page"] == 83.0
        assert res_6.json()["pagination"]["current_page"] == 131.0
        assert res_6.json()["pagination"]["total_pages"] == 38.0
        assert res_6.json()["pagination"]["links"]["previous"] == 130.0
        assert res_6.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (401) POST:/v1/estudantes
    # 3 - (200) GET:/v1/profissionais/lote/{id}
    # 4 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 5 - (422) POST:/v1/profissionais
    # 6 - (500) GET:/v1/estudantes/lote/{id}
    # Found 4 potential faults. Type-codes: 100, 200
    # Using 3 examples:
    #   123456789
    #   2014
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_9_with500(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Clara Rodrigues\", " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"aaron.marcelo.rocha.filho@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1 " + \
            " ], " + \
            " \"logradouro\": \"Rua Largo Maraisa\", " + \
            " \"bairro\": \"São Flores\", " + \
            " \"municipio\": 4307450, " + \
            " \"estudantePpl\": 0, " + \
            " \"serieAno\": 43, " + \
            " \"matriculaRede\": \"56789\", " + \
            " \"formaOrganizacaoTurma\": 5, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 3, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"44444444444\", " + \
            " \"nomeMaeEstudante\": \"Dr. Luana Bittencourt Valentin Sobrinho\", " + \
            " \"cpf\": \"84172805370\", " + \
            " \"nome\": \"R4vh7QmhtEYK\", " + \
            " \"email\": \"aaron.gil@fake.com\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"2\", " + \
            " \"bairro\": \"São Dominato\", " + \
            " \"numero\": \"Mrf\", " + \
            " \"cep\": \"70404536\", " + \
            " \"municipio\": 2700409, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"2081-11-26\", " + \
            " \"serieAno\": 2, " + \
            " \"matriculaRede\": \"JiaYM6BJM0o\", " + \
            " \"instituicao\": 353, " + \
            " \"dataInicioPeriodoLetivo\": \"2018-06-02\", " + \
            " \"estudanteAnoPeriodo\": 42 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"4_H7NIrIZr\", " + \
            " \"nomeMaeEstudante\": \"TO4\", " + \
            " \"dataNascimento\": \"2006-01-11\", " + \
            " \"genero\": 7, " + \
            " \"racaCor\": 42, " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 437, " + \
            " 6, " + \
            " 1, " + \
            " 118, " + \
            " 9 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"numeroNIS\": \"38177426184\", " + \
            " \"rg\": \"4479590820320142\", " + \
            " \"bairro\": \"lyRdkb15hdk4\", " + \
            " \"municipio\": 3109253, " + \
            " \"uf\": 272, " + \
            " \"serieAno\": 33, " + \
            " \"instituicao\": 193630, " + \
            " \"inep\": 322, " + \
            " \"formaOrganizacaoTurma\": 995, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"estudanteIntegral\": 1 " + \
            " }, " + \
            " { " + \
            " \"nomeMaeEstudante\": \"HqkyA\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 0, " + \
            " \"telefone\": \"44444444444\", " + \
            " \"nomeSocial\": \"RsOLwyuuUB3\", " + \
            " \"rg\": \"3858201516232197\", " + \
            " \"orgaoEmissor\": \"i4tf\", " + \
            " \"certidaoNascimento\": \"43613689471600696553112661501674\", " + \
            " \"cnh\": \"101302420\", " + \
            " \"logradouro\": \"Rua Largo Kamila Jimenes\", " + \
            " \"cep\": \"79815372\", " + \
            " \"dataInicioMatricula\": \"2006-11-32\", " + \
            " \"matriculaRede\": \"qyWPbnYsup9Y\", " + \
            " \"dataInicioPeriodoLetivo\": \"2040-10-06\", " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2025 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"66787272901\", " + \
            " \"dataNascimento\": \"2010-09-30\", " + \
            " \"genero\": 6, " + \
            " \"email\": \"aaron.lira.sobrinho@fake.com\", " + \
            " \"numeroNIS\": \"87732598473\", " + \
            " \"rg\": \"7486699425293889\", " + \
            " \"orgaoEmissor\": \"SSP-AL\", " + \
            " \"logradouro\": \"Rua Largo Juan Bonilha\", " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"1908-11-30\", " + \
            " \"dataInicioPeriodoLetivo\": \"1992-04-18\", " + \
            " \"formaOrganizacaoTurma\": -763028701, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 1, " + \
            " \"anoMatricula\": 2025 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 401 not defined for path '/v1/estudantes'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"97437317610\", " + \
            " \"nomeMaeEstudante\": \"Agatha Cervantes Filho\", " + \
            " \"cpf\": \"77823029430\", " + \
            " \"nome\": \"Nicholas Cruz\", " + \
            " \"dataNascimento\": \"OIYto\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 5, " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 2, " + \
            " 1, " + \
            " 5, " + \
            " 10 " + \
            " ], " + \
            " \"rg\": \"4248110224356426\", " + \
            " \"certidaoNascimento\": \"08561526160989606842807173757098\", " + \
            " \"cep\": \"HJf\", " + \
            " \"uf\": 642, " + \
            " \"matriculaRede\": \"jSowHhs\", " + \
            " \"instituicao\": 199194, " + \
            " \"inep\": 29146631, " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 401
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/a10dadaf-4a9a-4269-a344-200190f26ac1",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["status_processamento"] == "Enviado"
        assert res_2.json()["message"] == "Lote recuperado com sucesso. ID: a10dadaf-4a9a-4269-a344-200190f26ac1"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/NTEyZAr/erros",
                    headers=headers)
        
        assert res_3.status_code == 400
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "O ID fornecido não é um UUID válido. ID: NTEyZAr"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"74538980218\", " + \
            " \"dataNascimento\": \"2009-04-24\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 42, " + \
            " \"telefone\": \"EybVke5\", " + \
            " \"nomeSocial\": \"K4M5REPemK60\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 1, " + \
            " 9, " + \
            " 9, " + \
            " 5 " + \
            " ], " + \
            " \"sexo\": \"0\", " + \
            " \"bairro\": \"São das Dores\", " + \
            " \"numero\": \"X\", " + \
            " \"cep\": \"3\", " + \
            " \"municipio\": 2507507, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 149, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 475 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"tipoVinculo\": 338, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2068-07-28\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_4.status_code == 422
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/86395134-2de9-4a50-98f8-2b6ad4b57efe?" + 
                    "page=261&" + 
                    "per_page=10&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 86395134-2de9-4a50-98f8-2b6ad4b57efe Nenhum lote correspondente foi encontrado."
    
    
    # Calls:
    # 1 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 2 - (200) GET:/v1/estudantes/inep/{inep}
    # 3 - (500) POST:/v1/estudantes
    # 4 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 5 - (200) PATCH:/v1/estudantes/lote
    # Found 5 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_10_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?cpfNovo=KIK",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro inesperado."
        assert res_0.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/7ZBWC8eH9IEf?" + 
                    "situacao_matricula=ATIVAS&" + 
                    "ano_matricula=2025&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 0.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"97437317610\", " + \
            " \"nomeMaeEstudante\": \"Lavínia Fátima Dias Neto\", " + \
            " \"cpf\": \"59986809525\", " + \
            " \"dataNascimento\": \"1992-07-08\", " + \
            " \"genero\": 7, " + \
            " \"telefone\": \"028eKLpX9Fxkp\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 10, " + \
            " 613 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"rg\": \"3myqzB4s\", " + \
            " \"orgaoEmissor\": \"i4tf\", " + \
            " \"certidaoNascimento\": \"09202991443587641903172983015678\", " + \
            " \"logradouro\": \"fPfVIwr96Gq\", " + \
            " \"estudantePpl\": 0, " + \
            " \"instituicao\": 132102, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10, " + \
            " \"anoMatricula\": 375 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo nome é obrigatório. (and 1 more error)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "per_page=710&" + 
                    "cpfAtual=H_hsP03&" + 
                    "cpfNovo=56312237591",
                    headers=headers)
        
        assert res_3.status_code == 404
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro inesperado."
        assert res_3.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_70_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_71_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_72_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_4.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
    
    
    # Calls:
    # 1 - (401) POST:/v1/profissionais
    # 2 - (500) GET:/v1/profissionais/lote/{id}
    # 3 - (200) GET:/v1/estudantes/validacao-cadastro
    # 4 - (200) GET:/v1/estudantes/inep/{inep}
    # Found 7 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_11_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais -> Response status 401 not defined for path '/v1/profissionais'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"29350182653\", " + \
            " \"dataNascimento\": \"gnXrqyb\", " + \
            " \"genero\": 7, " + \
            " \"racaCor\": 3, " + \
            " \"telefone\": \"3333333\", " + \
            " \"sexo\": \"0\", " + \
            " \"numero\": \"29\", " + \
            " \"municipio\": 2208403, " + \
            " \"uf\": 11, " + \
            " \"inep\": 130, " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2059-12-29\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/62a7dae5-38b1-4d84-ab1d-4c6e6f989b62?" + 
                    "page=490&" + 
                    "per_page=740&" + 
                    "incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 62a7dae5-38b1-4d84-ab1d-4c6e6f989b62 Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "per_page=10&" + 
                    "cpf=34186723109",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        assert len(res_2.json()["data"]) == 1
        assert res_2.json()["data"][0]["cpf"] == "34186723109"
        assert res_2.json()["data"][0]["numeroNIS"] == "88473043664"
        assert res_2.json()["data"][0]["situacaoCadastral"] == "Inexistente"
        assert res_2.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_2.json()["data"][0]["nome"] == "Enzo Junqueira"
        assert res_2.json()["data"][0]["nomeValidado"] == False
        assert res_2.json()["data"][0]["dataNascimento"] == "2000-11-09"
        assert res_2.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_2.json()["data"][0]["nomeMaeEstudante"] == "Dra. Márcia Batista"
        assert res_2.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_2.json()["data"][0]["dataValidacaoCadastral"] == "2025-05-01 20:50:31"
        assert res_2.json()["pagination"]["total"] == 1.0
        assert res_2.json()["pagination"]["count"] == 1.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/33009120",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["cpf"] == "91178467147"
        assert res_3.json()["data"][0]["nome"] == "Aaron Nicolas Estrada"
        assert res_3.json()["data"][0]["nomeSocial"] is None
        assert res_3.json()["data"][0]["numeroNIS"] == "56536687108"
        assert res_3.json()["data"][0]["rg"] == "8955883691427543"
        assert res_3.json()["data"][0]["orgaoEmissor"] == "SSP-SP"
        assert res_3.json()["data"][0]["cpfResponsavel"] == "25018957115"
        assert res_3.json()["data"][0]["nomeMaeEstudante"] == "Lia Cruz"
        assert res_3.json()["data"][0]["numeroNISResponsavel"] == "23299097403"
        assert res_3.json()["data"][0]["dataNascimento"] == "2005-10-15"
        assert res_3.json()["data"][0]["logradouro"] == "Rua Largo Molina"
        assert res_3.json()["data"][0]["bairro"] == "São de Aguiar"
        assert res_3.json()["data"][0]["numero"] == "62"
        assert res_3.json()["data"][0]["cep"] == "30416340"
        assert res_3.json()["data"][0]["municipio"] == 3550308.0
        assert res_3.json()["data"][0]["certidaoNascimento"] == "41065065697840608308353387765433"
        assert res_3.json()["data"][0]["cnh"] is None
        assert res_3.json()["data"][0]["uf"] == 35.0
        assert res_3.json()["data"][0]["racaCor"] == 4.0
        assert len(res_3.json()["data"][0]["tipoDeficiencia"]) == 0
        assert res_3.json()["data"][0]["genero"] == 4.0
        assert res_3.json()["data"][0]["telefone"] is None
        assert res_3.json()["data"][0]["email"] == "aaron.nicolas.estrada@fake.com"
        assert res_3.json()["data"][0]["situacaoCadastroValidado"] is None
        assert len(res_3.json()["data"][0]["matriculas"]) == 1
        assert res_3.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 9843283.0
        assert res_3.json()["data"][0]["matriculas"][0]["codInstituicao"] == 136329.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_3.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == True
        assert res_3.json()["data"][0]["matriculas"][0]["serieAno"] == 27.0
        assert res_3.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_3.json()["data"][0]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["deletadaEm"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["inep"] == "33009120"
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][1]["cpf"] == "63467906257"
        assert res_3.json()["data"][1]["nome"] == "Abgail Duarte Filho"
        assert res_3.json()["data"][1]["nomeSocial"] is None
        assert res_3.json()["data"][1]["numeroNIS"] == "66348214041"
        assert res_3.json()["data"][1]["rg"] == "8241080547973293"
        assert res_3.json()["data"][1]["orgaoEmissor"] == "SSP-SP"
        assert res_3.json()["data"][1]["cpfResponsavel"] == "25146620440"
        assert res_3.json()["data"][1]["nomeMaeEstudante"] == "Luna Ferreira Filho"
        assert res_3.json()["data"][1]["numeroNISResponsavel"] == "66131623225"
        assert res_3.json()["data"][1]["dataNascimento"] == "2006-05-11"
        assert res_3.json()["data"][1]["logradouro"] == "Rua Av. Alonso"
        assert res_3.json()["data"][1]["bairro"] == "São Vega"
        assert res_3.json()["data"][1]["numero"] == "541"
        assert res_3.json()["data"][1]["cep"] == "98005381"
        assert res_3.json()["data"][1]["municipio"] == 3550308.0
        assert res_3.json()["data"][1]["certidaoNascimento"] == "76803989058127463400852448048820"
        assert res_3.json()["data"][1]["cnh"] is None
        assert res_3.json()["data"][1]["uf"] == 35.0
        assert res_3.json()["data"][1]["racaCor"] == 2.0
        assert len(res_3.json()["data"][1]["tipoDeficiencia"]) == 0
        assert res_3.json()["data"][1]["genero"] == 0.0
        assert res_3.json()["data"][1]["telefone"] is None
        assert res_3.json()["data"][1]["email"] == "abgail.duarte.filho@fake.com"
        assert res_3.json()["data"][1]["situacaoCadastroValidado"] is None
        assert len(res_3.json()["data"][1]["matriculas"]) == 1
        assert res_3.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 9844042.0
        assert res_3.json()["data"][1]["matriculas"][0]["codInstituicao"] == 136329.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_3.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == True
        assert res_3.json()["data"][1]["matriculas"][0]["serieAno"] == 25.0
        assert res_3.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_3.json()["data"][1]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["deletadaEm"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["inep"] == "33009120"
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][2]["cpf"] == "37840484719"
        assert res_3.json()["data"][2]["nome"] == "Abgail Lozano"
        assert res_3.json()["data"][2]["nomeSocial"] is None
        assert res_3.json()["data"][2]["numeroNIS"] == "85876025741"
        assert res_3.json()["data"][2]["rg"] == "0637834499865416"
        assert res_3.json()["data"][2]["orgaoEmissor"] == "SSP-SP"
        assert res_3.json()["data"][2]["cpfResponsavel"] == "06182989165"
        assert res_3.json()["data"][2]["nomeMaeEstudante"] == "Sra. Agustina Bittencourt Montenegro Neto"
        assert res_3.json()["data"][2]["numeroNISResponsavel"] == "02877086660"
        assert res_3.json()["data"][2]["dataNascimento"] == "2009-11-21"
        assert res_3.json()["data"][2]["logradouro"] == "Rua Largo Irene Vale"
        assert res_3.json()["data"][2]["bairro"] == "São Escobar"
        assert res_3.json()["data"][2]["numero"] == "76"
        assert res_3.json()["data"][2]["cep"] == "43730038"
        assert res_3.json()["data"][2]["municipio"] == 3550308.0
        assert res_3.json()["data"][2]["certidaoNascimento"] == "00781261642244078856075391834542"
        assert res_3.json()["data"][2]["cnh"] is None
        assert res_3.json()["data"][2]["uf"] == 35.0
        assert res_3.json()["data"][2]["racaCor"] == 3.0
        assert len(res_3.json()["data"][2]["tipoDeficiencia"]) == 0
        assert res_3.json()["data"][2]["genero"] == 2.0
        assert res_3.json()["data"][2]["telefone"] is None
        assert res_3.json()["data"][2]["email"] == "abgail.lozano@fake.com"
        assert res_3.json()["data"][2]["situacaoCadastroValidado"] is None
        assert len(res_3.json()["data"][2]["matriculas"]) == 1
        assert res_3.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 9844310.0
        assert res_3.json()["data"][2]["matriculas"][0]["codInstituicao"] == 136329.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_3.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == True
        assert res_3.json()["data"][2]["matriculas"][0]["serieAno"] == 27.0
        assert res_3.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_3.json()["data"][2]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["deletadaEm"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["inep"] == "33009120"
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 500.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 50.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (500) GET:/v1/estudantes
    # 2 - (500) GET:/v1/estudantes
    # 3 - (201) POST:/v1/profissionais/lote
    # 4 - (200) GET:/v1/estudantes/lote/{id}
    # 5 - (200) GET:/v1/estudantes/lote/{id}
    # 6 - (404) GET:/v1/estudantes/{cpfNis}
    # 7 - (500) GET:/v1/estudantes
    # 8 - (400) GET:/v1/profissionais/lote/{id}/erros
    # Found 7 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   2010
    @timeout_decorator.timeout(60)
    def test_12_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=878&" + 
                    "situacao_matricula=EVOMASTER",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=436&" + 
                    "per_page=435&" + 
                    "ano_matricula=811&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro inesperado."
        assert res_1.json()["errors"]["message"] == "O campo situacao_final é inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"53pTcm\", " + \
            " \"nome\": \"r\", " + \
            " \"dataNascimento\": \"A4Z\", " + \
            " \"genero\": 9, " + \
            " \"email\": \"_uheyltX\", " + \
            " \"logradouro\": \"pHhVbk\", " + \
            " \"cep\": \"\", " + \
            " \"uf\": 3, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 999, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"UIpxqRJDHF6lY\", " + \
            " \"anoInicioFormacaoAcademica\": 187 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 886, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 513, " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": -1802031624 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"8bjW\", " + \
            " \"anoInicioFormacaoAcademica\": 90, " + \
            " \"anoConclusaoFormacaoAcademica\": 639 " + \
            " } " + \
            " ], " + \
            " \"inep\": 993, " + \
            " \"codigoFuncao\": 905, " + \
            " \"dataFim\": \"1916-04-06\", " + \
            " \"cargaHoraria\": 857 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 23, " + \
            " \"nivelEscolaridade\": 852, " + \
            " \"dataNascimento\": \"el43FLTLx\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"J7Gn2Ey6h10Pox\", " + \
            " \"telefone\": \"f68gNvwMpCoEaX\", " + \
            " \"nomeSocial\": \"kcHebxrD\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 363, " + \
            " 130 " + \
            " ], " + \
            " \"logradouro\": \"\", " + \
            " \"numero\": \"Q9wO3\", " + \
            " \"cep\": \"gP6\", " + \
            " \"municipio\": 235, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 520, " + \
            " \"anoConclusaoFormacaoAcademica\": 116 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 405, " + \
            " \"dataIngresso\": \"1913-04-31\", " + \
            " \"dataFim\": \"2035-03-05\", " + \
            " \"cargaHoraria\": 503 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 201
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/7f0be3cb-ba61-4dd6-b6bb-176116718718?per_page=245",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["status_processamento"] == "Enviado"
        assert res_3.json()["message"] == "Lote recuperado com sucesso. ID: 7f0be3cb-ba61-4dd6-b6bb-176116718718"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/83286619-daf9-4022-a728-387ea719765f?per_page=10",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["status_processamento"] == "Enviado"
        assert res_4.json()["message"] == "Lote recuperado com sucesso. ID: 83286619-daf9-4022-a728-387ea719765f"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/yLT",
                    headers=headers)
        
        assert res_5.status_code == 404
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Nenhum estudante encontrado."
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=676&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_6.status_code == 500
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Ocorreu um erro."
        assert res_6.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/VlZxH2VfzuxiWit5/erros?page=275",
                    headers=headers)
        
        assert res_7.status_code == 400
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "O ID fornecido não é um UUID válido. ID: VlZxH2VfzuxiWit5"
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes/{cpfNis}
    # 2 - (500) GET:/v1/profissionais/lote/{id}
    # 3 - (404) GET:/v1/profissionais/{cpf}
    # 4 - (200) GET:/v1/profissionais/lote
    # 5 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 6 - (200) GET:/v1/estudantes/{cpfNis}
    # 7 - (200) GET:/v1/profissionais
    # Found 8 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_13_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/42775046479",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert res_0.json()["data"]["cpf"] == "42775046479"
        assert res_0.json()["data"]["nome"] == "Dra. Mathias Braga"
        assert res_0.json()["data"]["nomeSocial"] is None
        assert res_0.json()["data"]["numeroNIS"] == "47480764734"
        assert res_0.json()["data"]["rg"] == "04673871338010737467"
        assert res_0.json()["data"]["orgaoEmissor"] == "uCpy-EH"
        assert res_0.json()["data"]["cpfResponsavel"] == "23820741462"
        assert res_0.json()["data"]["nomeMaeEstudante"] == "Isadora Bomdia Jr."
        assert res_0.json()["data"]["numeroNISResponsavel"] == "58268252848"
        assert res_0.json()["data"]["dataNascimento"] == "1983-11-10"
        assert res_0.json()["data"]["logradouro"] == "Rua Carlos"
        assert res_0.json()["data"]["bairro"] == "Bairro iure"
        assert res_0.json()["data"]["numero"] == "919"
        assert res_0.json()["data"]["cep"] == "52384628"
        assert res_0.json()["data"]["municipio"] == 2313252.0
        assert res_0.json()["data"]["certidaoNascimento"] == "82369531311373216653772618712576"
        assert res_0.json()["data"]["cnh"] == "79888457044"
        assert res_0.json()["data"]["uf"] == 51.0
        assert res_0.json()["data"]["racaCor"] == 1.0
        assert len(res_0.json()["data"]["tipoDeficiencia"]) == 0
        assert res_0.json()["data"]["genero"] == 2.0
        assert res_0.json()["data"]["telefone"] is None
        assert res_0.json()["data"]["email"] is None
        assert res_0.json()["data"]["situacaoCadastroValidado"] == 4.0
        assert len(res_0.json()["data"]["matriculas"]) == 1
        assert res_0.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1231865.0
        assert res_0.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_0.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2002-05-12"
        assert res_0.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_0.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "1988-02-04"
        assert res_0.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_0.json()["data"]["matriculas"][0]["serieAno"] == 34.0
        assert res_0.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Formação inicial continuada ou qualificação profissional (FIC)"
        assert res_0.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_0.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_0.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_0.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_0.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_0.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_0.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_0.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_0.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_0.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_0.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_0.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_0.json()["data"]["outrasMatriculas"]) == 0
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/de53c10c-dd9a-4aea-9e7f-ae34acfd79ea?" + 
                    "page=-779587504&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: de53c10c-dd9a-4aea-9e7f-ae34acfd79ea Nenhum lote correspondente foi encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/99379112300",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?" + 
                    "page=504&" + 
                    "per_page=18",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_3.json()["data"]) == 0
        assert res_3.json()["pagination"]["total"] == 3158.0
        assert res_3.json()["pagination"]["count"] == 0.0
        assert res_3.json()["pagination"]["per_page"] == 18.0
        assert res_3.json()["pagination"]["current_page"] == 504.0
        assert res_3.json()["pagination"]["total_pages"] == 176.0
        assert res_3.json()["pagination"]["links"]["previous"] == 503.0
        assert res_3.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/5584597210140807/erros?" + 
                    "page=440&" + 
                    "per_page=685",
                    headers=headers)
        
        assert res_4.status_code == 400
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "O ID fornecido não é um UUID válido. ID: 5584597210140807"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/07189562656",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Dados obtidos com sucesso."
        assert res_5.json()["data"]["cpf"] == "07189562656"
        assert res_5.json()["data"]["nome"] == "Alana Vieira"
        assert res_5.json()["data"]["nomeSocial"] is None
        assert res_5.json()["data"]["numeroNIS"] == "78956067480"
        assert res_5.json()["data"]["rg"] == "80592132703471160974"
        assert res_5.json()["data"]["orgaoEmissor"] == "SSP/AL"
        assert res_5.json()["data"]["cpfResponsavel"] == "11878918940"
        assert res_5.json()["data"]["nomeMaeEstudante"] == "Dr. Lorenzo Jesus"
        assert res_5.json()["data"]["numeroNISResponsavel"] == "57634795981"
        assert res_5.json()["data"]["dataNascimento"] == "2005-10-13"
        assert res_5.json()["data"]["logradouro"] == "Recanto Melissa da Mata, 91\nVila Copasa\n85498615 da Paz / SE"
        assert res_5.json()["data"]["bairro"] == "Bairro"
        assert res_5.json()["data"]["numero"] == "8823"
        assert res_5.json()["data"]["cep"] == "57000000"
        assert res_5.json()["data"]["municipio"] == 1200203.0
        assert res_5.json()["data"]["certidaoNascimento"] == "36889690437362011130166117247755"
        assert res_5.json()["data"]["cnh"] is None
        assert res_5.json()["data"]["uf"] == 12.0
        assert res_5.json()["data"]["racaCor"] == 5.0
        assert len(res_5.json()["data"]["tipoDeficiencia"]) == 3
        assert res_5.json()["data"]["tipoDeficiencia"][0] == 5.0
        assert res_5.json()["data"]["tipoDeficiencia"][1] == 9.0
        assert res_5.json()["data"]["tipoDeficiencia"][2] == 10.0
        assert res_5.json()["data"]["genero"] == 2.0
        assert res_5.json()["data"]["telefone"] is None
        assert res_5.json()["data"]["email"] is None
        assert res_5.json()["data"]["situacaoCadastroValidado"] == 3.0
        assert len(res_5.json()["data"]["matriculas"]) == 1
        assert res_5.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1289517.0
        assert res_5.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_5.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "1970-09-18"
        assert res_5.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_5.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "2024-09-23"
        assert res_5.json()["data"]["matriculas"][0]["situacaoMatricula"] == False
        assert res_5.json()["data"]["matriculas"][0]["serieAno"] == 43.0
        assert res_5.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_5.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_5.json()["data"]["matriculas"][0]["deletadaEm"] == "2024-09-23 17:40:12"
        assert res_5.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_5.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] == 10.0
        assert res_5.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_5.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_5.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_5.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_5.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_5.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_5.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_5.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_5.json()["data"]["outrasMatriculas"]) == 1
        assert res_5.json()["data"]["outrasMatriculas"][0]["codigoMatriculaSgp"] == 754367.0
        assert res_5.json()["data"]["outrasMatriculas"][0]["serieAno"] == 47.0
        assert res_5.json()["data"]["outrasMatriculas"][0]["nomeRede"] == "Secretaria Estadual de Educação"
        assert res_5.json()["data"]["outrasMatriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_5.json()["data"]["outrasMatriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_5.json()["data"]["outrasMatriculas"][0]["uf"] == "Rio Grande do Sul"
        assert res_5.json()["data"]["outrasMatriculas"][0]["nomeMunicipio"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=583",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_6.json()["data"]) == 0
        assert res_6.json()["pagination"]["total"] == 3.0
        assert res_6.json()["pagination"]["count"] == 0.0
        assert res_6.json()["pagination"]["per_page"] == 10.0
        assert res_6.json()["pagination"]["current_page"] == 583.0
        assert res_6.json()["pagination"]["total_pages"] == 1.0
        assert res_6.json()["pagination"]["links"]["previous"] == 582.0
        assert res_6.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (500) GET:/v1/estudantes/lote/{id}
    # 2 - (404) GET:/v1/profissionais/{cpf}
    # 3 - (200) GET:/v1/estudantes/validacao-cadastro
    # 4 - (400) GET:/v1/estudantes/lote/{id}/erros
    # Found 20 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_14_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/8828d826-4389-4bfd-b56d-91c14b402698?" + 
                    "page=1&" + 
                    "incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 8828d826-4389-4bfd-b56d-91c14b402698 Nenhum lote correspondente foi encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/62479907821",
                    headers=headers)
        
        assert res_1.status_code == 404
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?page=1",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        assert len(res_2.json()["data"]) == 15
        assert res_2.json()["data"][0]["cpf"] == "99999701094"
        assert res_2.json()["data"][0]["numeroNIS"] is None
        assert res_2.json()["data"][0]["situacaoCadastral"] == "Autenticada"
        assert res_2.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_2.json()["data"][0]["nome"] == "Bryan  Chen"
        assert res_2.json()["data"][0]["nomeValidado"] == True
        assert res_2.json()["data"][0]["dataNascimento"] == "1956-01-11"
        assert res_2.json()["data"][0]["dataNascimentoValidada"] == True
        assert res_2.json()["data"][0]["nomeMaeEstudante"] == "Mr. Daniel Johnson DVM"
        assert res_2.json()["data"][0]["nomeMaeEstudanteValidado"] == True
        assert res_2.json()["data"][0]["dataValidacaoCadastral"] == "2025-03-11 01:39:26"
        assert res_2.json()["data"][1]["cpf"] == "34535377693"
        assert res_2.json()["data"][1]["numeroNIS"] == "11979328182"
        assert res_2.json()["data"][1]["situacaoCadastral"] == "Não autenticada"
        assert res_2.json()["data"][1]["situacaoCpf"] == "Testando o serviço de validação"
        assert res_2.json()["data"][1]["nome"] == "Trevor Hester"
        assert res_2.json()["data"][1]["nomeValidado"] == True
        assert res_2.json()["data"][1]["dataNascimento"] == "1968-02-26"
        assert res_2.json()["data"][1]["dataNascimentoValidada"] == False
        assert res_2.json()["data"][1]["nomeMaeEstudante"] == "Juan Mccullough"
        assert res_2.json()["data"][1]["nomeMaeEstudanteValidado"] == True
        assert res_2.json()["data"][1]["dataValidacaoCadastral"] == "2023-06-16 00:00:00"
        assert res_2.json()["data"][2]["cpf"] == "14064786602"
        assert res_2.json()["data"][2]["numeroNIS"] == "124112231"
        assert res_2.json()["data"][2]["situacaoCadastral"] == "Não autenticada"
        assert res_2.json()["data"][2]["situacaoCpf"] == "Quando há omissão de DIRPF em um dos últimos 5 exercícios"
        assert res_2.json()["data"][2]["nome"] == "Donald Jackson"
        assert res_2.json()["data"][2]["nomeValidado"] == False
        assert res_2.json()["data"][2]["dataNascimento"] == "1954-08-23"
        assert res_2.json()["data"][2]["dataNascimentoValidada"] == False
        assert res_2.json()["data"][2]["nomeMaeEstudante"] == "Timothy Garcia"
        assert res_2.json()["data"][2]["nomeMaeEstudanteValidado"] == True
        assert res_2.json()["data"][2]["dataValidacaoCadastral"] == "2024-04-23 00:00:00"
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 54714.0
        assert res_2.json()["pagination"]["count"] == 15.0
        assert res_2.json()["pagination"]["per_page"] == 15.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 3648.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/eOwq5gBjCZF/erros?" + 
                    "page=712&" + 
                    "per_page=827",
                    headers=headers)
        
        assert res_3.status_code == 400
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "O ID fornecido não é um UUID válido. ID: eOwq5gBjCZF"
    
    
    # Calls:
    # 1 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 2 - (500) GET:/v1/profissionais/lote/{id}
    # 3 - (404) GET:/v1/estudantes/{cpfNis}
    # 4 - (200) GET:/v1/estudantes/validacao-cadastro
    # 5 - (200) GET:/v1/estudantes/validacao-cadastro
    # 6 - (422) PATCH:/v1/estudantes/lote
    # 7 - (201) POST:/v1/estudantes/lote
    # 8 - (500) POST:/v1/estudantes/lote
    # 9 - (400) GET:/v1/estudantes/lote/{id}/erros
    # Found 13 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_15_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/9362803905358228/erros",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 9362803905358228"
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/120ff53b-40ba-4667-9077-2265f120190f?" + 
                    "page=435&" + 
                    "per_page=83",
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 120ff53b-40ba-4667-9077-2265f120190f Nenhum lote correspondente foi encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/g3Snn",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Nenhum estudante encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "per_page=83&" + 
                    "cpf=82329860545",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        assert len(res_3.json()["data"]) == 1
        assert res_3.json()["data"][0]["cpf"] == "82329860545"
        assert res_3.json()["data"][0]["numeroNIS"] is None
        assert res_3.json()["data"][0]["situacaoCadastral"] == "Inexistente"
        assert res_3.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_3.json()["data"][0]["nome"] == "Henry Souza"
        assert res_3.json()["data"][0]["nomeValidado"] == False
        assert res_3.json()["data"][0]["dataNascimento"] == "1967-10-25"
        assert res_3.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_3.json()["data"][0]["nomeMaeEstudante"] == "Sra. Alexandre Gabeira"
        assert res_3.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_3.json()["data"][0]["dataValidacaoCadastral"] == "2025-05-01 16:24:54"
        assert res_3.json()["pagination"]["total"] == 1.0
        assert res_3.json()["pagination"]["count"] == 1.0
        assert res_3.json()["pagination"]["per_page"] == 83.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 1.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "page=-734348131&" + 
                    "per_page=18&" + 
                    "cpf=91876378980",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Operação realizada com sucesso"
        assert len(res_4.json()["data"]) == 1
        assert res_4.json()["data"][0]["cpf"] == "91876378980"
        assert res_4.json()["data"][0]["numeroNIS"] == "34242161291"
        assert res_4.json()["data"][0]["situacaoCadastral"] == "Inexistente"
        assert res_4.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_4.json()["data"][0]["nome"] == "Luiza Gabeira"
        assert res_4.json()["data"][0]["nomeValidado"] == False
        assert res_4.json()["data"][0]["dataNascimento"] == "1966-11-02"
        assert res_4.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_4.json()["data"][0]["nomeMaeEstudante"] == "Maria Valentina Jesus"
        assert res_4.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_4.json()["data"][0]["dataValidacaoCadastral"] == "2025-05-01 17:44:01"
        assert res_4.json()["pagination"]["total"] == 1.0
        assert res_4.json()["pagination"]["count"] == 1.0
        assert res_4.json()["pagination"]["per_page"] == 18.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 1.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 422
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Não foi possível processar as informações."
        assert res_5.json()["errors"]["message"] == "JSON inválido."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"StLgnGP9n\", " + \
            " \"cpf\": \"07569335520\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 42, " + \
            " \"telefone\": \"11969630845\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"5\", " + \
            " \"numeroNIS\": \"28673891480\", " + \
            " \"certidaoNascimento\": \"zaiTrashi9k\", " + \
            " \"cnh\": \"23111417870\", " + \
            " \"bairro\": \"São Valência\", " + \
            " \"numero\": \"517\", " + \
            " \"municipio\": 1302603, " + \
            " \"dataInicioMatricula\": \"2061-04-07\", " + \
            " \"serieAno\": 48, " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"instituicao\": 185954, " + \
            " \"formaOrganizacaoTurma\": -295585649, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 38, " + \
            " \"estudanteIntegral\": 1 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"25678211986\", " + \
            " \"numeroNISResponsavel\": \"xZMAP4w\", " + \
            " \"email\": \"aaron.italo.aguiar.sobrinho@fake.com\", " + \
            " \"nomeSocial\": \"K4M5REPemK60\", " + \
            " \"orgaoEmissor\": \"AFT\", " + \
            " \"certidaoNascimento\": \"33981092968823744717516001453719\", " + \
            " \"logradouro\": \"Viela Fabrício Tavares\", " + \
            " \"bairro\": \"São da Silva\", " + \
            " \"numero\": \"62\", " + \
            " \"cep\": \"24578970\", " + \
            " \"uf\": 24, " + \
            " \"dataInicioMatricula\": \"2099-12-09\", " + \
            " \"matriculaRede\": \"G8BMn2\", " + \
            " \"dataInicioPeriodoLetivo\": \"2027-02-10\", " + \
            " \"anoMatricula\": 2025 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_6.status_code == 201
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes/lote
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["errors"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_7.status_code == 500
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Ocorreu um erro."
        assert res_7.json()["errors"]["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/5908522993481821/erros",
                    headers=headers)
        
        assert res_8.status_code == 400
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "O ID fornecido não é um UUID válido. ID: 5908522993481821"
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes/lote
    # 2 - (500) POST:/v1/estudantes
    # 3 - (401) GET:/v1/estudantes/lote/{id}/erros
    # 4 - (200) GET:/v1/estudantes/lote
    # 5 - (500) GET:/v1/estudantes
    # 6 - (500) POST:/v1/estudantes
    # 7 - (200) GET:/v1/estudantes/{cpfNis}
    # 8 - (200) PATCH:/v1/estudantes/lote
    # Found 13 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_16_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?per_page=864",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_0.json()["data"]) == 864
        assert res_0.json()["data"][0]["dataEnvio"] == "2025-05-04 08:42:14"
        assert res_0.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][1]["dataEnvio"] == "2025-05-04 08:41:31"
        assert res_0.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][2]["dataEnvio"] == "2025-05-04 08:41:25"
        assert res_0.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 861 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 10558.0
        assert res_0.json()["pagination"]["count"] == 864.0
        assert res_0.json()["pagination"]["per_page"] == 864.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 13.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"Olívia de Lins\", " + \
            " \"racaCor\": 2, " + \
            " \"telefone\": \"11917982977\", " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 1 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"certidaoNascimento\": \"8\", " + \
            " \"cnh\": \"93517950494\", " + \
            " \"municipio\": 2403806, " + \
            " \"serieAno\": 806, " + \
            " \"matriculaRede\": \"3ArBS\", " + \
            " \"instituicao\": 188178, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 422 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 401 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/HbBuNLv9T8ZL7gK6/erros?page=131",
                    headers=headers)
        
        assert res_2.status_code == 401
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?" + 
                    "page=820&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["dataEnvio"] == "2025-03-06 22:07:38"
        assert res_3.json()["data"][0]["status_processamento"] == "Processado com erro"
        assert res_3.json()["data"][1]["dataEnvio"] == "2025-03-06 22:05:44"
        assert res_3.json()["data"][1]["status_processamento"] == "Processado com erro"
        assert res_3.json()["data"][2]["dataEnvio"] == "2025-03-06 22:04:35"
        assert res_3.json()["data"][2]["status_processamento"] == "Processado com erro"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 10558.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 820.0
        assert res_3.json()["pagination"]["total_pages"] == 1056.0
        assert res_3.json()["pagination"]["links"]["previous"] == 819.0
        assert res_3.json()["pagination"]["links"]["next"] == 821.0
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=988&" + 
                    "per_page=515&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_4.status_code == 500
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Ocorreu um erro."
        assert res_4.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"27886721446\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 6, " + \
            " 255, " + \
            " 5, " + \
            " 10, " + \
            " 9 " + \
            " ], " + \
            " \"numeroNIS\": \"86106611670\", " + \
            " \"orgaoEmissor\": \"Nt Uteu4fY\", " + \
            " \"certidaoNascimento\": \"73008934815015767433115604876523\", " + \
            " \"logradouro\": \"Rua Largo Juan\", " + \
            " \"bairro\": \"São Brito\", " + \
            " \"uf\": 614, " + \
            " \"dataInicioMatricula\": \"2020-12-22\", " + \
            " \"matriculaRede\": \"\", " + \
            " \"instituicao\": 106071, " + \
            " \"dataInicioPeriodoLetivo\": \"2047-05-15\", " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 0 " + \
            " } "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Ocorreu um erro."
        assert res_5.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/34186723109",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert res_6.json()["data"]["cpf"] == "34186723109"
        assert res_6.json()["data"]["nome"] == "Enzo Junqueira"
        assert res_6.json()["data"]["nomeSocial"] is None
        assert res_6.json()["data"]["numeroNIS"] == "88473043664"
        assert res_6.json()["data"]["rg"] == "90876372535080606163"
        assert res_6.json()["data"]["orgaoEmissor"] == "glew-wU"
        assert res_6.json()["data"]["cpfResponsavel"] == "31415444486"
        assert res_6.json()["data"]["nomeMaeEstudante"] == "Dra. Márcia Batista"
        assert res_6.json()["data"]["numeroNISResponsavel"] == "67715190095"
        assert res_6.json()["data"]["dataNascimento"] == "2000-11-09"
        assert res_6.json()["data"]["logradouro"] == "Ponte Maria Fernanda"
        assert res_6.json()["data"]["bairro"] == "Bairro odio"
        assert res_6.json()["data"]["numero"] == "287"
        assert res_6.json()["data"]["cep"] == "72953516"
        assert res_6.json()["data"]["municipio"] == 4215901.0
        assert res_6.json()["data"]["certidaoNascimento"] == "61867781003758507124081073469676"
        assert res_6.json()["data"]["cnh"] == "72228730148"
        assert res_6.json()["data"]["uf"] == 41.0
        assert res_6.json()["data"]["racaCor"] == 1.0
        assert len(res_6.json()["data"]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"]["tipoDeficiencia"][0] == 5.0
        assert res_6.json()["data"]["tipoDeficiencia"][1] == 9.0
        assert res_6.json()["data"]["tipoDeficiencia"][2] == 10.0
        assert res_6.json()["data"]["genero"] == 2.0
        assert res_6.json()["data"]["telefone"] is None
        assert res_6.json()["data"]["email"] is None
        assert res_6.json()["data"]["situacaoCadastroValidado"] == 4.0
        assert len(res_6.json()["data"]["matriculas"]) == 1
        assert res_6.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1390166.0
        assert res_6.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_6.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "1988-08-18"
        assert res_6.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_6.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "2004-08-10"
        assert res_6.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_6.json()["data"]["matriculas"][0]["serieAno"] == 32.0
        assert res_6.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Formação inicial continuada ou qualificação profissional (FIC)"
        assert res_6.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_6.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_6.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_6.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_6.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_6.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_6.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_6.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_6.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_6.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_6.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_6.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_6.json()["data"]["outrasMatriculas"]) == 0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_86_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_87_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_88_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_7.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
    
    
    # Calls:
    # 1 - (500) GET:/v1/estudantes/lote/{id}
    # 2 - (200) GET:/v1/profissionais/lote/{id}
    # 3 - (200) PATCH:/v1/estudantes/lote
    # 4 - (401) GET:/v1/estudantes/solicitacoes-alteracoes
    # 5 - (201) POST:/v1/estudantes/lote
    # 6 - (200) GET:/v1/profissionais
    # Found 8 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   2025
    @timeout_decorator.timeout(60)
    def test_17_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/86395134-2de9-4a50-98f8-2b6ad4b57efe?" + 
                    "page=188&" + 
                    "per_page=685&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 86395134-2de9-4a50-98f8-2b6ad4b57efe Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/204126e0-2d21-4e4b-80a3-645ccea74e11?" + 
                    "page=855&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: 204126e0-2d21-4e4b-80a3-645ccea74e11"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_58_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_59_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_2.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 401 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "cpfAtual=3F8qA97x&" + 
                    "cpfNovo=13213485179",
                    headers=headers)
        
        assert res_3.status_code == 401
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Não autorizado"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nomeMaeEstudante\": \"KKqvwNC7\", " + \
            " \"cpf\": \"41878580752\", " + \
            " \"nome\": \"dcVv3Gq5j\", " + \
            " \"genero\": 1, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"aaron.flores.pacheco@fake.com\", " + \
            " \"sexo\": \"4\", " + \
            " \"rg\": \"39339153\", " + \
            " \"certidaoNascimento\": \"479928172630744883\", " + \
            " \"logradouro\": \"Rua Av. Vicente\", " + \
            " \"numero\": \"t\", " + \
            " \"cep\": \"45858654\", " + \
            " \"dataInicioMatricula\": \"2010-02-13\", " + \
            " \"serieAno\": 36, " + \
            " \"instituicao\": 185910, " + \
            " \"dataInicioPeriodoLetivo\": \"2006-02-07\", " + \
            " \"formaOrganizacaoTurma\": 5, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 42 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"43009733306\", " + \
            " \"nomeMaeEstudante\": \"4mdHsibb\", " + \
            " \"nome\": \"Aaron Afonso Zambrano\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 6, " + \
            " 6, " + \
            " 1, " + \
            " 10, " + \
            " 233 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"numeroNIS\": \"08906060074\", " + \
            " \"rg\": \"xIdZjMkNm9y\", " + \
            " \"cnh\": \"10142015477\", " + \
            " \"numero\": \"71\", " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"2017-01-02\", " + \
            " \"serieAno\": 510, " + \
            " \"instituicao\": 190231, " + \
            " \"inep\": 23545453, " + \
            " \"dataInicioPeriodoLetivo\": \"2023-06-03\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"n3_SYWX\", " + \
            " \"cpf\": \"53136538498\", " + \
            " \"dataNascimento\": \"2010-11-16\", " + \
            " \"telefone\": \"11942878677\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"80641647113\", " + \
            " \"orgaoEmissor\": \"dOxf-vb\", " + \
            " \"cnh\": \"48008009165\", " + \
            " \"bairro\": \"São Pena\", " + \
            " \"numero\": \"67745\", " + \
            " \"cep\": \"29835187\", " + \
            " \"municipio\": 1200203, " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"dataInicioPeriodoLetivo\": \"2048-05-30\", " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"estudanteIntegral\": 1, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"35472613548\", " + \
            " \"dataNascimento\": \"2010-04-06\", " + \
            " \"sexo\": \"1\", " + \
            " \"numeroNIS\": \"40168033828\", " + \
            " \"rg\": \"2409526867903130\", " + \
            " \"cnh\": \"48211923100\", " + \
            " \"cep\": \"79152989\", " + \
            " \"municipio\": 3500501, " + \
            " \"estudantePpl\": 0, " + \
            " \"dataInicioMatricula\": \"2039-09-06\", " + \
            " \"instituicao\": 185938, " + \
            " \"inep\": 32020341, " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 1, " + \
            " \"estudanteIntegral\": 1, " + \
            " \"anoMatricula\": 2025 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"93844713050\", " + \
            " \"numeroNISResponsavel\": \"56678694880\", " + \
            " \"nomeMaeEstudante\": \"Danilo Jaques Filho\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"4\", " + \
            " \"numeroNIS\": \"EtNj9ihf_\", " + \
            " \"certidaoNascimento\": \"27395112996057028481508489619040\", " + \
            " \"cnh\": \"81728064741\", " + \
            " \"municipio\": 4307450, " + \
            " \"estudantePpl\": 2, " + \
            " \"instituicao\": 187787, " + \
            " \"inep\": 12033570, " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 727, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"anoMatricula\": 2025 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 201
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?per_page=10",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_5.json()["data"]) == 3
        assert res_5.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_5.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_5.json()["data"][0]["cpf"] == "43839402000"
        assert res_5.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_5.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_5.json()["data"][0]["genero"] == 1.0
        assert res_5.json()["data"][0]["racaCor"] == 2.0
        assert res_5.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_5.json()["data"][0]["telefone"] is None
        assert res_5.json()["data"][0]["nomeSocial"] is None
        assert res_5.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_5.json()["data"][0]["bairro"] == "Centro"
        assert res_5.json()["data"][0]["numero"] == "123"
        assert res_5.json()["data"][0]["cep"] == "01001000"
        assert res_5.json()["data"][0]["municipio"] == 2700409.0
        assert res_5.json()["data"][0]["uf"] == 27.0
        assert res_5.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_5.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_5.json()["data"][0]["situacaoAtiva"] == True
        assert res_5.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_5.json()["data"][0]["dataFim"] is None
        assert res_5.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_5.json()["data"][0]["matriculaRede"] == "56789"
        assert res_5.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_5.json()["data"][0]["inep"] == "27014088"
        assert len(res_5.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_5.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_5.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_5.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_5.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_5.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_5.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_5.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_5.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_5.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_5.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_5.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_5.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_5.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_5.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_5.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_5.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_5.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_5.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_5.json()["data"][1]["cpf"] == "33722248094"
        assert res_5.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_5.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_5.json()["data"][1]["genero"] == 1.0
        assert res_5.json()["data"][1]["racaCor"] == 2.0
        assert res_5.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_5.json()["data"][1]["telefone"] is None
        assert res_5.json()["data"][1]["nomeSocial"] is None
        assert res_5.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_5.json()["data"][1]["bairro"] == "Centro"
        assert res_5.json()["data"][1]["numero"] == "123"
        assert res_5.json()["data"][1]["cep"] == "01001000"
        assert res_5.json()["data"][1]["municipio"] == 2700409.0
        assert res_5.json()["data"][1]["uf"] == 27.0
        assert res_5.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_5.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_5.json()["data"][1]["situacaoAtiva"] == True
        assert res_5.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_5.json()["data"][1]["dataFim"] is None
        assert res_5.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_5.json()["data"][1]["matriculaRede"] == "56789"
        assert res_5.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_5.json()["data"][1]["inep"] == "27014088"
        assert len(res_5.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_5.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_5.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_5.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_5.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_5.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_5.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_5.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_5.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_5.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_5.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_5.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_5.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_5.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_5.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_5.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_5.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_5.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_5.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_5.json()["data"][2]["cpf"] == "31863200037"
        assert res_5.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_5.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_5.json()["data"][2]["genero"] == 1.0
        assert res_5.json()["data"][2]["racaCor"] == 2.0
        assert res_5.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_5.json()["data"][2]["telefone"] is None
        assert res_5.json()["data"][2]["nomeSocial"] is None
        assert res_5.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_5.json()["data"][2]["bairro"] == "Centro"
        assert res_5.json()["data"][2]["numero"] == "123"
        assert res_5.json()["data"][2]["cep"] == "01001000"
        assert res_5.json()["data"][2]["municipio"] == 2700409.0
        assert res_5.json()["data"][2]["uf"] == 27.0
        assert res_5.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_5.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_5.json()["data"][2]["situacaoAtiva"] == True
        assert res_5.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_5.json()["data"][2]["dataFim"] is None
        assert res_5.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_5.json()["data"][2]["matriculaRede"] == "56789"
        assert res_5.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_5.json()["data"][2]["inep"] == "27014088"
        assert len(res_5.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_5.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_5.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_5.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_5.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_5.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_5.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_5.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_5.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_5.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_5.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_5.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_5.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_5.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_5.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_5.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_5.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_5.json()["pagination"]["total"] == 3.0
        assert res_5.json()["pagination"]["count"] == 3.0
        assert res_5.json()["pagination"]["per_page"] == 10.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 1.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (500) GET:/v1/estudantes/inep/{inep}
    # 2 - (200) GET:/v1/estudantes/validacao-cadastro
    # 3 - (500) GET:/v1/profissionais/lote/{id}
    # 4 - (200) GET:/v1/estudantes/{cpfNis}
    # Found 21 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   2024
    @timeout_decorator.timeout(60)
    def test_18_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/inep/{inep}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/41095065?" + 
                    "page=-1430468180&" + 
                    "per_page=18&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?page=311",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        assert len(res_1.json()["data"]) == 15
        assert res_1.json()["data"][0]["cpf"] == "41275272770"
        assert res_1.json()["data"][0]["numeroNIS"] == "66060262669"
        assert res_1.json()["data"][0]["situacaoCadastral"] == "Inexistente"
        assert res_1.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_1.json()["data"][0]["nome"] == "Dra. Bruna Ribas"
        assert res_1.json()["data"][0]["nomeValidado"] == False
        assert res_1.json()["data"][0]["dataNascimento"] == "1972-04-14"
        assert res_1.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_1.json()["data"][0]["nomeMaeEstudante"] == "Lorenzo Beltrão"
        assert res_1.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_1.json()["data"][0]["dataValidacaoCadastral"] == "2025-05-01 17:58:45"
        assert res_1.json()["data"][1]["cpf"] == "71130414507"
        assert res_1.json()["data"][1]["numeroNIS"] == "86386111884"
        assert res_1.json()["data"][1]["situacaoCadastral"] == "Inexistente"
        assert res_1.json()["data"][1]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_1.json()["data"][1]["nome"] == "Pérola Barbosa"
        assert res_1.json()["data"][1]["nomeValidado"] == False
        assert res_1.json()["data"][1]["dataNascimento"] == "1961-08-10"
        assert res_1.json()["data"][1]["dataNascimentoValidada"] == False
        assert res_1.json()["data"][1]["nomeMaeEstudante"] == "Carolina Coqueiro"
        assert res_1.json()["data"][1]["nomeMaeEstudanteValidado"] == False
        assert res_1.json()["data"][1]["dataValidacaoCadastral"] == "2025-05-01 17:41:10"
        assert res_1.json()["data"][2]["cpf"] == "37336957471"
        assert res_1.json()["data"][2]["numeroNIS"] == "97026489423"
        assert res_1.json()["data"][2]["situacaoCadastral"] == "Inexistente"
        assert res_1.json()["data"][2]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_1.json()["data"][2]["nome"] == "Washington Roriz"
        assert res_1.json()["data"][2]["nomeValidado"] == False
        assert res_1.json()["data"][2]["dataNascimento"] == "1977-11-08"
        assert res_1.json()["data"][2]["dataNascimentoValidada"] == False
        assert res_1.json()["data"][2]["nomeMaeEstudante"] == "Maria Cecília Esteves"
        assert res_1.json()["data"][2]["nomeMaeEstudanteValidado"] == False
        assert res_1.json()["data"][2]["dataValidacaoCadastral"] == "2025-05-01 17:41:35"
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 54714.0
        assert res_1.json()["pagination"]["count"] == 15.0
        assert res_1.json()["pagination"]["per_page"] == 15.0
        assert res_1.json()["pagination"]["current_page"] == 311.0
        assert res_1.json()["pagination"]["total_pages"] == 3648.0
        assert res_1.json()["pagination"]["links"]["previous"] == 310.0
        assert res_1.json()["pagination"]["links"]["next"] == 312.0
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/57ab0a50-3f13-4a2f-832a-237960e3d542?" + 
                    "page=315&" + 
                    "per_page=740&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 57ab0a50-3f13-4a2f-832a-237960e3d542 Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/67635103652",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert res_3.json()["data"]["cpf"] == "67635103652"
        assert res_3.json()["data"]["nome"] == "Gael Nunes Filho"
        assert res_3.json()["data"]["nomeSocial"] is None
        assert res_3.json()["data"]["numeroNIS"] == "61262113472"
        assert res_3.json()["data"]["rg"] == "99541515583117622128"
        assert res_3.json()["data"]["orgaoEmissor"] == "rGxj-aL"
        assert res_3.json()["data"]["cpfResponsavel"] == "75890079324"
        assert res_3.json()["data"]["nomeMaeEstudante"] == "Helena Menendes"
        assert res_3.json()["data"]["numeroNISResponsavel"] == "05468878222"
        assert res_3.json()["data"]["dataNascimento"] == "1991-05-10"
        assert res_3.json()["data"]["logradouro"] == "Viela Fabrício Tavares"
        assert res_3.json()["data"]["bairro"] == "Bairro doloribus"
        assert res_3.json()["data"]["numero"] == "394"
        assert res_3.json()["data"]["cep"] == "58296660"
        assert res_3.json()["data"]["municipio"] == 5107305.0
        assert res_3.json()["data"]["certidaoNascimento"] == "00708490618583305796061803945752"
        assert res_3.json()["data"]["cnh"] == "75828366811"
        assert res_3.json()["data"]["uf"] == 14.0
        assert res_3.json()["data"]["racaCor"] == 2.0
        assert len(res_3.json()["data"]["tipoDeficiencia"]) == 0
        assert res_3.json()["data"]["genero"] == 2.0
        assert res_3.json()["data"]["telefone"] is None
        assert res_3.json()["data"]["email"] is None
        assert res_3.json()["data"]["situacaoCadastroValidado"] == 4.0
        assert len(res_3.json()["data"]["matriculas"]) == 1
        assert res_3.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1229721.0
        assert res_3.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_3.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "1964-07-24"
        assert res_3.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "1967-10-18"
        assert res_3.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_3.json()["data"]["matriculas"][0]["serieAno"] == 38.0
        assert res_3.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio normal/magistério"
        assert res_3.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_3.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_3.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"]["outrasMatriculas"]) == 0
    
    
    # Calls:
    # 1 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 2 - (500) GET:/v1/estudantes/inep/{inep}
    # 3 - (404) GET:/v1/profissionais/{cpf}
    # 4 - (500) POST:/v1/estudantes/lote
    # 5 - (200) GET:/v1/profissionais
    # 6 - (200) GET:/v1/profissionais/lote
    # Found 21 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_19_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/3421787496848143/erros?page=849",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 3421787496848143"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/inep/{inep}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/29478367?" + 
                    "per_page=10&" + 
                    "situacao_matricula=ATIVAS&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível obter os estudantes."
        assert res_1.json()["errors"]["message"] == "O campo ano_matricula é obrigatório quando o campo situacao_final é informado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/iH8W5cTzS",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes/lote
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["errors"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro."
        assert res_3.json()["errors"]["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_4.json()["data"]) == 3
        assert res_4.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_4.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_4.json()["data"][0]["cpf"] == "43839402000"
        assert res_4.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_4.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_4.json()["data"][0]["genero"] == 1.0
        assert res_4.json()["data"][0]["racaCor"] == 2.0
        assert res_4.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_4.json()["data"][0]["telefone"] is None
        assert res_4.json()["data"][0]["nomeSocial"] is None
        assert res_4.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_4.json()["data"][0]["bairro"] == "Centro"
        assert res_4.json()["data"][0]["numero"] == "123"
        assert res_4.json()["data"][0]["cep"] == "01001000"
        assert res_4.json()["data"][0]["municipio"] == 2700409.0
        assert res_4.json()["data"][0]["uf"] == 27.0
        assert res_4.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_4.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_4.json()["data"][0]["situacaoAtiva"] == True
        assert res_4.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_4.json()["data"][0]["dataFim"] is None
        assert res_4.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_4.json()["data"][0]["matriculaRede"] == "56789"
        assert res_4.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_4.json()["data"][0]["inep"] == "27014088"
        assert len(res_4.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_4.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_4.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_4.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_4.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_4.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_4.json()["data"][1]["cpf"] == "33722248094"
        assert res_4.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_4.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_4.json()["data"][1]["genero"] == 1.0
        assert res_4.json()["data"][1]["racaCor"] == 2.0
        assert res_4.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_4.json()["data"][1]["telefone"] is None
        assert res_4.json()["data"][1]["nomeSocial"] is None
        assert res_4.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_4.json()["data"][1]["bairro"] == "Centro"
        assert res_4.json()["data"][1]["numero"] == "123"
        assert res_4.json()["data"][1]["cep"] == "01001000"
        assert res_4.json()["data"][1]["municipio"] == 2700409.0
        assert res_4.json()["data"][1]["uf"] == 27.0
        assert res_4.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_4.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_4.json()["data"][1]["situacaoAtiva"] == True
        assert res_4.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_4.json()["data"][1]["dataFim"] is None
        assert res_4.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_4.json()["data"][1]["matriculaRede"] == "56789"
        assert res_4.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_4.json()["data"][1]["inep"] == "27014088"
        assert len(res_4.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_4.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_4.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_4.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_4.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_4.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_4.json()["data"][2]["cpf"] == "31863200037"
        assert res_4.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_4.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_4.json()["data"][2]["genero"] == 1.0
        assert res_4.json()["data"][2]["racaCor"] == 2.0
        assert res_4.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_4.json()["data"][2]["telefone"] is None
        assert res_4.json()["data"][2]["nomeSocial"] is None
        assert res_4.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_4.json()["data"][2]["bairro"] == "Centro"
        assert res_4.json()["data"][2]["numero"] == "123"
        assert res_4.json()["data"][2]["cep"] == "01001000"
        assert res_4.json()["data"][2]["municipio"] == 2700409.0
        assert res_4.json()["data"][2]["uf"] == 27.0
        assert res_4.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_4.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_4.json()["data"][2]["situacaoAtiva"] == True
        assert res_4.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_4.json()["data"][2]["dataFim"] is None
        assert res_4.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_4.json()["data"][2]["matriculaRede"] == "56789"
        assert res_4.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_4.json()["data"][2]["inep"] == "27014088"
        assert len(res_4.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_4.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_4.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_4.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_4.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_4.json()["pagination"]["total"] == 3.0
        assert res_4.json()["pagination"]["count"] == 3.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 1.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:25:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?page=-1053702713",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_5.json()["data"]) == 10
        assert res_5.json()["data"][0]["dataEnvio"] == "2025-05-04 08:25:23"
        assert res_5.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][1]["dataEnvio"] == "2025-05-04 08:24:55"
        assert res_5.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][2]["dataEnvio"] == "2025-05-04 08:22:20"
        assert res_5.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_5.json()["pagination"]["total"] == 3147.0
        assert res_5.json()["pagination"]["count"] == 10.0
        assert res_5.json()["pagination"]["per_page"] == 10.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 315.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 2 - (404) GET:/v1/profissionais/{cpf}
    # 3 - (200) GET:/v1/profissionais
    # 4 - (500) GET:/v1/estudantes/inep/{inep}
    # 5 - (200) GET:/v1/estudantes
    # 6 - (200) GET:/v1/profissionais
    # 7 - (401) POST:/v1/estudantes
    # Found 8 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   2024
    @timeout_decorator.timeout(60)
    def test_20_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/6753878883042767/erros?per_page=10",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 6753878883042767"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/25152021285",
                    headers=headers)
        
        assert res_1.status_code == 404
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=1000&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 3.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1000.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] == 999.0
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/inep/{inep}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/Eju6BlPmi?" + 
                    "situacao_matricula=INATIVAS&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Não foi possível obter os estudantes."
        assert res_3.json()["errors"]["message"] == "O campo situacao_final é inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=685&" + 
                    "ano_matricula=2025&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_4.json()["data"]) == 0
        assert res_4.json()["pagination"]["total"] == 0.0
        assert res_4.json()["pagination"]["count"] == 0.0
        assert res_4.json()["pagination"]["per_page"] == 685.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 0.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=215",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_5.json()["data"]) == 0
        assert res_5.json()["pagination"]["total"] == 3.0
        assert res_5.json()["pagination"]["count"] == 0.0
        assert res_5.json()["pagination"]["per_page"] == 10.0
        assert res_5.json()["pagination"]["current_page"] == 215.0
        assert res_5.json()["pagination"]["total_pages"] == 1.0
        assert res_5.json()["pagination"]["links"]["previous"] == 214.0
        assert res_5.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 401 not defined for path '/v1/estudantes'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"Ea\", " + \
            " \"nomeMaeEstudante\": \"7aTq92Zi\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 42, " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"0xwuEp6f\", " + \
            " \"certidaoNascimento\": \"YZTRxJo\", " + \
            " \"logradouro\": \"Rua R. Emanuel Correia\", " + \
            " \"bairro\": \"São Esteves\", " + \
            " \"dataInicioMatricula\": \"2052-10-02\", " + \
            " \"inep\": 797, " + \
            " \"dataInicioPeriodoLetivo\": \"1907-10-02\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 0 " + \
            " } "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_6.status_code == 401
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # 1 - (400) GET:/v1/estudantes/lote/{id}
    # 2 - (200) GET:/v1/estudantes/lote
    # 3 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 4 - (200) GET:/v1/estudantes/lote
    # 5 - (200) GET:/v1/estudantes/lote
    # 6 - (500) POST:/v1/estudantes
    # 7 - (200) GET:/v1/profissionais/inep/{inep}
    # 8 - (401) POST:/v1/profissionais
    # 9 - (200) GET:/v1/profissionais/lote
    # Found 18 potential faults. Type-codes: 100, 200
    # Using 2 examples:
    #   1
    #   5
    @timeout_decorator.timeout(60)
    def test_21_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/F?page=759",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: F"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?page=-757335230",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_1.json()["data"]) == 10
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-05-04 08:36:28"
        assert res_1.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-05-04 08:35:49"
        assert res_1.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-05-04 08:33:48"
        assert res_1.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 10549.0
        assert res_1.json()["pagination"]["count"] == 10.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 1055.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/19150692/erros?per_page=482",
                    headers=headers)
        
        assert res_2.status_code == 400
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "O ID fornecido não é um UUID válido. ID: 19150692"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["dataEnvio"] == "2025-05-04 08:36:28"
        assert res_3.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][1]["dataEnvio"] == "2025-05-04 08:35:49"
        assert res_3.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][2]["dataEnvio"] == "2025-05-04 08:33:48"
        assert res_3.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 10549.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 1055.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_4.json()["data"]) == 10
        assert res_4.json()["data"][0]["dataEnvio"] == "2025-05-04 08:36:28"
        assert res_4.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_4.json()["data"][1]["dataEnvio"] == "2025-05-04 08:35:49"
        assert res_4.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_4.json()["data"][2]["dataEnvio"] == "2025-05-04 08:33:48"
        assert res_4.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_4.json()["pagination"]["total"] == 10549.0
        assert res_4.json()["pagination"]["count"] == 10.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 1055.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"vsP\", " + \
            " \"dataNascimento\": \"kwp4x8\", " + \
            " \"genero\": 7, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"aaron.mario.deverso.filho@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 3 " + \
            " ], " + \
            " \"sexo\": \"0\", " + \
            " \"numeroNIS\": \"3fyv5\", " + \
            " \"orgaoEmissor\": \"SSP-AM\", " + \
            " \"certidaoNascimento\": \"85401861365919216919229208953063\", " + \
            " \"cnh\": \"02342004738\", " + \
            " \"bairro\": \"São Assunção\", " + \
            " \"dataInicioMatricula\": \"1974-09-16\", " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"formaOrganizacaoTurma\": 546, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 291 " + \
            " } "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Ocorreu um erro."
        assert res_5.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/41078179",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_6.json()["data"]) == 0
        assert res_6.json()["pagination"]["total"] == 0.0
        assert res_6.json()["pagination"]["count"] == 0.0
        assert res_6.json()["pagination"]["per_page"] == 10.0
        assert res_6.json()["pagination"]["current_page"] == 1.0
        assert res_6.json()["pagination"]["total_pages"] == 1.0
        assert res_6.json()["pagination"]["links"]["previous"] is None
        assert res_6.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais -> Response status 401 not defined for path '/v1/profissionais'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"nome\": \"João Luca Antunes\", " + \
            " \"racaCor\": 3, " + \
            " \"email\": \"aaron.pablo.galvao.jr@fake.com\", " + \
            " \"telefone\": \"11942878677\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"logradouro\": \"Rua Avenida Adriel\", " + \
            " \"bairro\": \"São Montenegro\", " + \
            " \"cep\": \"\", " + \
            " \"inep\": 33230811, " + \
            " \"matriculaRede\": \"G8BMn2\", " + \
            " \"dataFim\": \"1905-05-28\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_7.status_code == 401
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?" + 
                    "page=466&" + 
                    "per_page=482",
                    headers=headers)
        
        assert res_8.status_code == 200
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == True
        assert res_8.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_8.json()["data"]) == 0
        assert res_8.json()["pagination"]["total"] == 3157.0
        assert res_8.json()["pagination"]["count"] == 0.0
        assert res_8.json()["pagination"]["per_page"] == 482.0
        assert res_8.json()["pagination"]["current_page"] == 466.0
        assert res_8.json()["pagination"]["total_pages"] == 7.0
        assert res_8.json()["pagination"]["links"]["previous"] == 465.0
        assert res_8.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (404) GET:/v1/profissionais/{cpf}
    # 2 - (200) GET:/v1/profissionais/lote
    # 3 - (200) GET:/v1/profissionais/inep/{inep}
    # 4 - (200) GET:/v1/estudantes/lote
    # 5 - (500) POST:/v1/estudantes
    # 6 - (500) POST:/v1/estudantes/lote
    # 7 - (500) POST:/v1/estudantes
    # 8 - (401) GET:/v1/estudantes/{cpfNis}
    # Found 24 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_22_with500(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/99999701094",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-03 03:22:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-03 03:21:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-03 03:21:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-03 03:18:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-03 03:16:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-03 03:16:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-03 03:16:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-03 03:14:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-03 03:14:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-03 03:14:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?page=187",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_1.json()["data"]) == 10
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-05-03 03:22:01"
        assert res_1.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-05-03 03:21:58"
        assert res_1.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-05-03 03:21:37"
        assert res_1.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 3158.0
        assert res_1.json()["pagination"]["count"] == 10.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 187.0
        assert res_1.json()["pagination"]["total_pages"] == 316.0
        assert res_1.json()["pagination"]["links"]["previous"] == 186.0
        assert res_1.json()["pagination"]["links"]["next"] == 188.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/41136233?page=476",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 0.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 476.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] == 475.0
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?page=311",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["dataEnvio"] == "2025-05-02 23:51:19"
        assert res_3.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][1]["dataEnvio"] == "2025-05-02 23:50:34"
        assert res_3.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][2]["dataEnvio"] == "2025-05-02 23:49:26"
        assert res_3.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 10553.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 311.0
        assert res_3.json()["pagination"]["total_pages"] == 1056.0
        assert res_3.json()["pagination"]["links"]["previous"] == 310.0
        assert res_3.json()["pagination"]["links"]["next"] == 312.0
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"Sra. Fabiana Michelle Benez\", " + \
            " \"telefone\": \"kHsviZij7bk\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"rg\": \"5589995976868051\", " + \
            " \"orgaoEmissor\": \"AFT\", " + \
            " \"certidaoNascimento\": \"08561526160989606842807173757098\", " + \
            " \"cnh\": \"v6axrKkrr\", " + \
            " \"logradouro\": \"Rua Travessa Duarte\", " + \
            " \"municipio\": 4200705, " + \
            " \"dataInicioPeriodoLetivo\": \"1912-07-18\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 2025 " + \
            " } "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_4.status_code == 500
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Ocorreu um erro."
        assert res_4.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes/lote
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["errors"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Ocorreu um erro."
        assert res_5.json()["errors"]["message"] == "JSON inválido."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"33383001710\", " + \
            " \"cpf\": \"74737634905\", " + \
            " \"dataNascimento\": \"2007-04-23\", " + \
            " \"genero\": 9, " + \
            " \"email\": \"8qyIM3kRpbh5W\", " + \
            " \"telefone\": \"44444444444\", " + \
            " \"rg\": \"53669048\", " + \
            " \"certidaoNascimento\": \"5844904610940537779\", " + \
            " \"logradouro\": \"Rua R. Kelly Rivera\", " + \
            " \"bairro\": \"CDzACpyI3O\", " + \
            " \"cep\": \"41773068\", " + \
            " \"estudantePpl\": 1, " + \
            " \"serieAno\": 36, " + \
            " \"matriculaRede\": \"j_31gor3rblDjvM\", " + \
            " \"instituicao\": 94577, " + \
            " \"inep\": 41102878, " + \
            " \"dataInicioPeriodoLetivo\": \"1979-02-02\", " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_6.status_code == 500
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Ocorreu um erro."
        assert res_6.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Response status 401 not defined for path '/v1/estudantes/{cpfNis}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/64659961206",
                    headers=headers)
        
        assert res_7.status_code == 401
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # 1 - (404) GET:/v1/profissionais/{cpf}
    # 2 - (404) GET:/v1/profissionais/{cpf}
    # 3 - (500) GET:/v1/estudantes/lote/{id}
    # 4 - (200) GET:/v1/profissionais/lote/{id}
    # 5 - (500) GET:/v1/estudantes/lote/{id}
    # 6 - (200) GET:/v1/estudantes/lote
    # 7 - (500) GET:/v1/estudantes
    # 8 - (404) GET:/v1/estudantes/{cpfNis}
    # 9 - (422) POST:/v1/profissionais
    # 10 - (200) GET:/v1/estudantes/lote
    # Found 10 potential faults. Type-codes: 100, 200
    # Using 3 examples:
    #   2010
    #   2014
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_23_with500(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/61561465712",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Nenhum profissional de educação encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/Y8",
                    headers=headers)
        
        assert res_1.status_code == 404
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/65089d62-dbb2-43f3-b702-bcf9d9484034?page=112904570",
                    headers=headers)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 65089d62-dbb2-43f3-b702-bcf9d9484034 Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/32394caa-4c1b-4d48-8f7b-e70e9c1540de?" + 
                    "page=72&" + 
                    "per_page=374",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["status_processamento"] == "Enviado"
        assert res_3.json()["message"] == "Lote recuperado com sucesso. ID: 32394caa-4c1b-4d48-8f7b-e70e9c1540de"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/768550d7-6e39-4e0b-91ee-5b984ad2e8a5?per_page=15",
                    headers=headers)
        
        assert res_4.status_code == 500
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 768550d7-6e39-4e0b-91ee-5b984ad2e8a5 Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?" + 
                    "page=-1548436571&" + 
                    "per_page=83",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_5.json()["data"]) == 83
        assert res_5.json()["data"][0]["dataEnvio"] == "2025-05-04 08:40:03"
        assert res_5.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][1]["dataEnvio"] == "2025-05-04 08:39:39"
        assert res_5.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][2]["dataEnvio"] == "2025-05-04 08:39:16"
        assert res_5.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 80 elements. This limit of 3 elements can be increased in the configurations
        assert res_5.json()["pagination"]["total"] == 10555.0
        assert res_5.json()["pagination"]["count"] == 83.0
        assert res_5.json()["pagination"]["per_page"] == 83.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 128.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=740&" + 
                    "situacao_matricula=EVOMASTER",
                    headers=headers)
        
        assert res_6.status_code == 500
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Ocorreu um erro."
        assert res_6.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/NDDHm4BojpC",
                    headers=headers)
        
        assert res_7.status_code == 404
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Nenhum estudante encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"dataNascimento\": \"1951-03-12\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 0, " + \
            " \"telefone\": \"11933018135\", " + \
            " \"sexo\": \"3\", " + \
            " \"bairro\": \"São Fontes\", " + \
            " \"cep\": \"75541063\", " + \
            " \"inep\": \"29479800\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2081-03-18\", " + \
            " \"dataFim\": \"1953-02-17\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_8 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_8.status_code == 422
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_9 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?page=710",
                    headers=headers)
        
        assert res_9.status_code == 200
        assert "application/json" in res_9.headers["content-type"]
        assert res_9.json()["success"] == True
        assert res_9.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_9.json()["data"]) == 10
        assert res_9.json()["data"][0]["dataEnvio"] == "2025-03-13 02:21:43"
        assert res_9.json()["data"][0]["status_processamento"] == "Processado com sucesso"
        assert res_9.json()["data"][1]["dataEnvio"] == "2025-03-13 02:21:43"
        assert res_9.json()["data"][1]["status_processamento"] == "Processado com sucesso"
        assert res_9.json()["data"][2]["dataEnvio"] == "2025-03-13 02:21:42"
        assert res_9.json()["data"][2]["status_processamento"] == "Processado com sucesso"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_9.json()["pagination"]["total"] == 10555.0
        assert res_9.json()["pagination"]["count"] == 10.0
        assert res_9.json()["pagination"]["per_page"] == 10.0
        assert res_9.json()["pagination"]["current_page"] == 710.0
        assert res_9.json()["pagination"]["total_pages"] == 1056.0
        assert res_9.json()["pagination"]["links"]["previous"] == 709.0
        assert res_9.json()["pagination"]["links"]["next"] == 711.0
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais/inep/{inep}
    # 2 - (201) POST:/v1/estudantes/lote
    # 3 - (500) POST:/v1/estudantes
    # 4 - (401) GET:/v1/profissionais/lote/{id}
    # 5 - (404) GET:/v1/profissionais/{cpf}
    # 6 - (200) GET:/v1/estudantes/lote
    # 7 - (401) GET:/v1/profissionais/lote/{id}/erros
    # 8 - (422) POST:/v1/profissionais
    # 9 - (200) GET:/v1/profissionais
    # Found 11 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   25
    @timeout_decorator.timeout(60)
    def test_24_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/vsfEzl",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 0.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"numeroNISResponsavel\": \"96236882770\", " + \
            " \"nomeMaeEstudante\": \"Dr. Gabrielly Matoso\", " + \
            " \"cpf\": \"07189562656\", " + \
            " \"nome\": \"_TZ9bkUm26g\", " + \
            " \"dataNascimento\": \"2010-12-28\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 0, " + \
            " \"telefone\": \"11945225241\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 10, " + \
            " 3, " + \
            " 781, " + \
            " 5 " + \
            " ], " + \
            " \"certidaoNascimento\": \"ypqauJTHqFKNObBV\", " + \
            " \"estudantePpl\": 2, " + \
            " \"dataInicioPeriodoLetivo\": \"2045-09-28\", " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"5Ew4\", " + \
            " \"nomeMaeEstudante\": \"Danilo Conceição\", " + \
            " \"cpf\": \"59213754205\", " + \
            " \"genero\": 6, " + \
            " \"email\": \"aaron.igor.mascarenhas@fake.com\", " + \
            " \"telefone\": \"44444444444\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 10, " + \
            " 6, " + \
            " 4, " + \
            " 2 " + \
            " ], " + \
            " \"rg\": \"2657670738300566\", " + \
            " \"certidaoNascimento\": \"06288880843927562368107230811042\", " + \
            " \"cnh\": \"35232457485\", " + \
            " \"bairro\": \"São Batista\", " + \
            " \"municipio\": 549, " + \
            " \"estudantePpl\": 1, " + \
            " \"matriculaRede\": \"56789\", " + \
            " \"inep\": 29479800, " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 3 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpf\": \"g\", " + \
            " \"dataNascimento\": \"2001-07-21\", " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 3, " + \
            " \"telefone\": \"16982231381\", " + \
            " \"sexo\": \"3\", " + \
            " \"orgaoEmissor\": \"SSP-SP\", " + \
            " \"uf\": 11, " + \
            " \"dataInicioMatricula\": \"2097-10-14\", " + \
            " \"serieAno\": 25, " + \
            " \"matriculaRede\": \"qyWPbnYsup9Y\", " + \
            " \"instituicao\": 94507, " + \
            " \"inep\": 72, " + \
            " \"formaOrganizacaoTurma\": 23, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"estudanteIntegral\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Response status 401 not defined for path '/v1/profissionais/lote/{id}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/WTn7U9a1L?incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_3.status_code == 401
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Não autorizado"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/45254844388",
                    headers=headers)
        
        assert res_4.status_code == 404
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?per_page=83",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_5.json()["data"]) == 83
        assert res_5.json()["data"][0]["dataEnvio"] == "2025-05-04 08:41:31"
        assert res_5.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][1]["dataEnvio"] == "2025-05-04 08:41:25"
        assert res_5.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][2]["dataEnvio"] == "2025-05-04 08:40:03"
        assert res_5.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 80 elements. This limit of 3 elements can be increased in the configurations
        assert res_5.json()["pagination"]["total"] == 10557.0
        assert res_5.json()["pagination"]["count"] == 83.0
        assert res_5.json()["pagination"]["per_page"] == 83.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 128.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 401 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/7302007515655337/erros?page=102",
                    headers=headers)
        
        assert res_6.status_code == 401
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Não autorizado"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"mb9SGo6P20YsCwAW\", " + \
            " \"email\": \"GW0rzVPqGPVW@example.com\", " + \
            " \"telefone\": \"0mBXiHoyPjlUgG\", " + \
            " \"logradouro\": \"Rua Largo Ávila\", " + \
            " \"cep\": \"sQI\", " + \
            " \"municipio\": 1100940, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 724 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 741, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 28, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 323 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 892, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 40 " + \
            " } "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_7.status_code == 422
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #2 ($dataNascimento) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=789&" + 
                    "per_page=18",
                    headers=headers)
        
        assert res_8.status_code == 200
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == True
        assert res_8.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_8.json()["data"]) == 0
        assert res_8.json()["pagination"]["total"] == 3.0
        assert res_8.json()["pagination"]["count"] == 0.0
        assert res_8.json()["pagination"]["per_page"] == 18.0
        assert res_8.json()["pagination"]["current_page"] == 789.0
        assert res_8.json()["pagination"]["total_pages"] == 1.0
        assert res_8.json()["pagination"]["links"]["previous"] == 788.0
        assert res_8.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 2 - (200) GET:/v1/estudantes/lote/{id}
    # 3 - (200) GET:/v1/estudantes/validacao-cadastro
    # 4 - (500) GET:/v1/estudantes
    # 5 - (401) GET:/v1/estudantes/validacao-cadastro
    # 6 - (200) GET:/v1/estudantes
    # Found 9 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_25_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "page=391&" + 
                    "per_page=18&" + 
                    "cpfAtual=93773545959&" + 
                    "cpfNovo=13213485179",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro inesperado."
        assert res_0.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/a098f189-d140-4793-8bc1-233cb31a4b0f?" + 
                    "page=209&" + 
                    "per_page=740",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: a098f189-d140-4793-8bc1-233cb31a4b0f"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?cpf=87585971150",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        assert len(res_2.json()["data"]) == 1
        assert res_2.json()["data"][0]["cpf"] == "87585971150"
        assert res_2.json()["data"][0]["numeroNIS"] == "77752888196"
        assert res_2.json()["data"][0]["situacaoCadastral"] == "Inexistente"
        assert res_2.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_2.json()["data"][0]["nome"] == "Ígor Albuquerque"
        assert res_2.json()["data"][0]["nomeValidado"] == False
        assert res_2.json()["data"][0]["dataNascimento"] == "1967-11-10"
        assert res_2.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_2.json()["data"][0]["nomeMaeEstudante"] == "Sra. Enzo Thiago Solimões"
        assert res_2.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_2.json()["data"][0]["dataValidacaoCadastral"] == "2025-05-01 20:50:44"
        assert res_2.json()["pagination"]["total"] == 1.0
        assert res_2.json()["pagination"]["count"] == 1.0
        assert res_2.json()["pagination"]["per_page"] == 15.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=463&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro."
        assert res_3.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 401 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "page=354&" + 
                    "cpf=21573098027",
                    headers=headers)
        
        assert res_4.status_code == 401
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=60&" + 
                    "situacao_matricula=INATIVAS&" + 
                    "ano_matricula=239&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_5.json()["data"]) == 0
        assert res_5.json()["pagination"]["total"] == 0.0
        assert res_5.json()["pagination"]["count"] == 0.0
        assert res_5.json()["pagination"]["per_page"] == 10.0
        assert res_5.json()["pagination"]["current_page"] == 60.0
        assert res_5.json()["pagination"]["total_pages"] == 0.0
        assert res_5.json()["pagination"]["links"]["previous"] == 59.0
        assert res_5.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (401) POST:/v1/profissionais
    # 2 - (500) POST:/v1/estudantes
    # 3 - (200) GET:/v1/profissionais/inep/{inep}
    # 4 - (404) GET:/v1/estudantes/{cpfNis}
    # 5 - (422) POST:/v1/profissionais
    # 6 - (200) GET:/v1/estudantes/lote
    # 7 - (200) GET:/v1/profissionais/inep/{inep}
    # 8 - (404) GET:/v1/estudantes/validacao-cadastro
    # 9 - (401) GET:/v1/profissionais/{cpf}
    # 10 - (200) GET:/v1/estudantes
    # Found 13 potential faults. Type-codes: 100, 200
    # Using 3 examples:
    #   1
    #   2024
    #   44
    @timeout_decorator.timeout(60)
    def test_26_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais -> Response status 401 not defined for path '/v1/profissionais'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"cpf\": \"pot5YqXaGNP\", " + \
            " \"dataNascimento\": \"NLary\", " + \
            " \"genero\": 7, " + \
            " \"telefone\": \"hWSMBsaimUm\", " + \
            " \"nomeSocial\": \"yZx\", " + \
            " \"sexo\": \"0\", " + \
            " \"logradouro\": \"2ZDpQG\", " + \
            " \"cep\": \"9w\", " + \
            " \"municipio\": 482, " + \
            " \"uf\": 25, " + \
            " \"inep\": 255, " + \
            " \"codigoFuncao\": 284, " + \
            " \"dataIngresso\": \"2001-05-29\", " + \
            " \"cargaHoraria\": 400 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"EudjD6ezlsdYNLEB\", " + \
            " \"dataNascimento\": \"kAElFhiunyOwUn\", " + \
            " \"genero\": 5, " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"fciGW9ODbQo17Pk\", " + \
            " \"nomeSocial\": \"zZQqa\", " + \
            " \"sexo\": \"5\", " + \
            " \"rg\": \"_1JyyEgAMr_wuma\", " + \
            " \"certidaoNascimento\": \"X7Bv9jb5GS\", " + \
            " \"cnh\": \"inRRKhizGtP\", " + \
            " \"logradouro\": \"vEsxS\", " + \
            " \"bairro\": \"cZ0rQuo\", " + \
            " \"cep\": \"Lx\", " + \
            " \"uf\": 620, " + \
            " \"dataInicioMatricula\": \"2012-11-15\", " + \
            " \"matriculaRede\": \"hlVjel\", " + \
            " \"inep\": 215, " + \
            " \"formaOrganizacaoTurma\": 269 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/blAl2C?per_page=10",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 0.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/ZFjizqvkZa",
                    headers=headers)
        
        assert res_3.status_code == 404
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Nenhum estudante encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpf\": \"rekCa\", " + \
            " \"nome\": \"Q0\", " + \
            " \"email\": \"Ho\", " + \
            " \"logradouro\": \"ZTHU\", " + \
            " \"bairro\": \"bVnc\", " + \
            " \"numero\": \"6_tG\", " + \
            " \"cep\": \"\", " + \
            " \"uf\": 939, " + \
            " \"cargaHoraria\": 44 " + \
            " } "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_4.status_code == 422
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #2 ($dataNascimento) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?page=1",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_5.json()["data"]) == 10
        assert res_5.json()["data"][0]["dataEnvio"] == "2025-05-04 08:28:20"
        assert res_5.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][1]["dataEnvio"] == "2025-05-04 08:27:24"
        assert res_5.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][2]["dataEnvio"] == "2025-05-04 08:25:29"
        assert res_5.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_5.json()["pagination"]["total"] == 10539.0
        assert res_5.json()["pagination"]["count"] == 10.0
        assert res_5.json()["pagination"]["per_page"] == 10.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 1054.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/dcTDrfx3iE5JXeUJ?per_page=482",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_6.json()["data"]) == 0
        assert res_6.json()["pagination"]["total"] == 0.0
        assert res_6.json()["pagination"]["count"] == 0.0
        assert res_6.json()["pagination"]["per_page"] == 482.0
        assert res_6.json()["pagination"]["current_page"] == 1.0
        assert res_6.json()["pagination"]["total_pages"] == 1.0
        assert res_6.json()["pagination"]["links"]["previous"] is None
        assert res_6.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 404 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "page=302&" + 
                    "per_page=482&" + 
                    "cpf=",
                    headers=headers)
        
        assert res_7.status_code == 404
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Ocorreu um erro inesperado."
        assert res_7.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/{cpf} -> Response status 401 not defined for path '/v1/profissionais/{cpf}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/X0SGm0Fa",
                    headers=headers)
        
        assert res_8.status_code == 401
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_9 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=357&" + 
                    "per_page=482&" + 
                    "situacao_matricula=ATIVAS&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_9.status_code == 200
        assert "application/json" in res_9.headers["content-type"]
        assert res_9.json()["success"] == True
        assert res_9.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_9.json()["data"]) == 0
        assert res_9.json()["pagination"]["total"] == 12.0
        assert res_9.json()["pagination"]["count"] == 0.0
        assert res_9.json()["pagination"]["per_page"] == 482.0
        assert res_9.json()["pagination"]["current_page"] == 357.0
        assert res_9.json()["pagination"]["total_pages"] == 1.0
        assert res_9.json()["pagination"]["links"]["previous"] == 356.0
        assert res_9.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (500) GET:/v1/profissionais/lote/{id}
    # 2 - (401) PATCH:/v1/estudantes/lote
    # 3 - (200) GET:/v1/estudantes/solicitacoes-alteracoes
    # 4 - (500) POST:/v1/estudantes/lote
    # 5 - (200) GET:/v1/profissionais/lote
    # 6 - (200) PATCH:/v1/estudantes/lote
    # 7 - (200) GET:/v1/estudantes/{cpfNis}
    # 8 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 9 - (201) POST:/v1/estudantes/lote
    # 10 - (422) PATCH:/v1/estudantes/lote
    # Found 22 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_27_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/86945c33-21d4-4c09-b672-2da6bdf6fd3d?" + 
                    "per_page=740&" + 
                    "incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 86945c33-21d4-4c09-b672-2da6bdf6fd3d Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. PATCH:/v1/estudantes/lote -> Response status 401 not defined for path '/v1/estudantes/lote'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_27_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_28_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_29_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_30_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 401
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?cpfNovo=30311393721",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        assert len(res_2.json()["data"]) == 1
        assert res_2.json()["data"][0]["cpfAtual"] == "02227254270"
        assert res_2.json()["data"][0]["cpfNovo"] == "30311393721"
        assert res_2.json()["data"][0]["situacaoCpf"] is None
        assert res_2.json()["data"][0]["descricaoSituacaoCpf"] is None
        assert res_2.json()["data"][0]["tipoSituacaoCpf"] is None
        assert res_2.json()["data"][0]["nomeAtual"] == "Stacey Thiel"
        assert res_2.json()["data"][0]["nomeNovo"] == "Stacey Thiel"
        assert res_2.json()["data"][0]["nomeValidado"] is None
        assert res_2.json()["data"][0]["dataNascimentoAtual"] == "2024-12-28"
        assert res_2.json()["data"][0]["dataNascimentoNovo"] == "2024-12-28"
        assert res_2.json()["data"][0]["dataNascimentoValidada"] is None
        assert res_2.json()["data"][0]["nomeMaeEstudanteAtual"] == "Dr. Woodrow Hauck"
        assert res_2.json()["data"][0]["nomeMaeEstudanteNovo"] == "Dr. Woodrow Hauck"
        assert res_2.json()["data"][0]["nomeMaeEstudanteValidado"] is None
        assert res_2.json()["data"][0]["dataValidacaoCadastral"] is None
        assert res_2.json()["pagination"]["total"] == 1.0
        assert res_2.json()["pagination"]["count"] == 1.0
        assert res_2.json()["pagination"]["per_page"] == 15.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes/lote
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["errors"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro."
        assert res_3.json()["errors"]["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-01 02:03:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-01 02:03:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-01 02:03:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-01 02:03:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-01 02:03:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-01 02:02:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-01 02:02:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-01 02:02:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-01 02:02:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-01 02:01:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?" + 
                    "page=301&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_4.json()["data"]) == 10
        assert res_4.json()["data"][0]["dataEnvio"] == "2025-05-01 02:03:57"
        assert res_4.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_4.json()["data"][1]["dataEnvio"] == "2025-05-01 02:03:53"
        assert res_4.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_4.json()["data"][2]["dataEnvio"] == "2025-05-01 02:03:50"
        assert res_4.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_4.json()["pagination"]["total"] == 3158.0
        assert res_4.json()["pagination"]["count"] == 10.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 301.0
        assert res_4.json()["pagination"]["total_pages"] == 316.0
        assert res_4.json()["pagination"]["links"]["previous"] == 300.0
        assert res_4.json()["pagination"]["links"]["next"] == 302.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_31_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_32_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_33_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_5.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/21677466014",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert res_6.json()["data"]["cpf"] == "21677466014"
        assert res_6.json()["data"]["nome"] == "Aaron Natal Ávila Sobrinho"
        assert res_6.json()["data"]["nomeSocial"] is None
        assert res_6.json()["data"]["numeroNIS"] == "57760836578"
        assert res_6.json()["data"]["rg"] == "7460335317573012"
        assert res_6.json()["data"]["orgaoEmissor"] == "SSP-MG"
        assert res_6.json()["data"]["cpfResponsavel"] == "47542223771"
        assert res_6.json()["data"]["nomeMaeEstudante"] == "Rosana Nathalia Rocha"
        assert res_6.json()["data"]["numeroNISResponsavel"] == "05550440055"
        assert res_6.json()["data"]["dataNascimento"] == "2008-05-07"
        assert res_6.json()["data"]["logradouro"] == "Rua Av. Aline"
        assert res_6.json()["data"]["bairro"] == "São Rezende"
        assert res_6.json()["data"]["numero"] == "4266"
        assert res_6.json()["data"]["cep"] == "65407298"
        assert res_6.json()["data"]["municipio"] == 3106200.0
        assert res_6.json()["data"]["certidaoNascimento"] == "46897183709973431416183422932313"
        assert res_6.json()["data"]["cnh"] is None
        assert res_6.json()["data"]["uf"] == 31.0
        assert res_6.json()["data"]["racaCor"] == 0.0
        assert len(res_6.json()["data"]["tipoDeficiencia"]) == 0
        assert res_6.json()["data"]["genero"] == 4.0
        assert res_6.json()["data"]["telefone"] is None
        assert res_6.json()["data"]["email"] == "aaron.natal.avila.sobrinho@fake.com"
        assert res_6.json()["data"]["situacaoCadastroValidado"] is None
        assert len(res_6.json()["data"]["matriculas"]) == 1
        assert res_6.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 8271399.0
        assert res_6.json()["data"]["matriculas"][0]["codInstituicao"] == 174112.0
        assert res_6.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_6.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_6.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_6.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_6.json()["data"]["matriculas"][0]["serieAno"] == 26.0
        assert res_6.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_6.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_6.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_6.json()["data"]["matriculas"][0]["inep"] == "35428875"
        assert res_6.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_6.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_6.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_6.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_6.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_6.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_6.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_6.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_6.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_6.json()["data"]["outrasMatriculas"]) == 0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/3858201516232197/erros",
                    headers=headers)
        
        assert res_7.status_code == 400
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "O ID fornecido não é um UUID válido. ID: 3858201516232197"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"43244176283\", " + \
            " \"numeroNISResponsavel\": \"28075908158\", " + \
            " \"nomeMaeEstudante\": \"\", " + \
            " \"cpf\": \"71900567423\", " + \
            " \"dataNascimento\": \"m0h\", " + \
            " \"telefone\": \"11917982977\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"numeroNIS\": \"13546019449\", " + \
            " \"logradouro\": \"Rua Av. Aline\", " + \
            " \"numero\": \"4478\", " + \
            " \"cep\": \"20977178\", " + \
            " \"uf\": 35, " + \
            " \"inep\": 41069005, " + \
            " \"dataInicioPeriodoLetivo\": \"2026-00-23\", " + \
            " \"formaOrganizacaoTurma\": 5, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"anoMatricula\": 2025 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_8 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_8.status_code == 201
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == True
        assert res_8.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_9 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_9.status_code == 422
        assert "application/json" in res_9.headers["content-type"]
        assert res_9.json()["success"] == False
        assert res_9.json()["message"] == "Não foi possível processar as informações."
        assert res_9.json()["errors"]["message"] == "JSON inválido."
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes/lote/{id}
    # 2 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 3 - (200) GET:/v1/profissionais/inep/{inep}
    # 4 - (422) POST:/v1/profissionais
    # 5 - (404) GET:/v1/profissionais/{cpf}
    # 6 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 7 - (200) GET:/v1/estudantes/lote
    # 8 - (500) GET:/v1/profissionais/lote/{id}
    # 9 - (401) GET:/v1/estudantes/lote/{id}
    # 10 - (500) GET:/v1/estudantes
    # Found 11 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   5
    @timeout_decorator.timeout(60)
    def test_28_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/6c4e52d7-3854-49a9-8f20-f7822867bfdd?" + 
                    "per_page=685&" + 
                    "incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["status_processamento"] == "Enviado"
        assert res_0.json()["message"] == "Lote recuperado com sucesso. ID: 6c4e52d7-3854-49a9-8f20-f7822867bfdd"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/1492339829949947/erros?per_page=789",
                    headers=headers)
        
        assert res_1.status_code == 400
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "O ID fornecido não é um UUID válido. ID: 1492339829949947"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/41532074?per_page=83",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 0.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 83.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"joao.silva@email.com\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 6, " + \
            " 495, " + \
            " 10, " + \
            " 6 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"logradouro\": \"Rua Largo Franco Lira\", " + \
            " \"bairro\": \"São Fonseca\", " + \
            " \"cep\": \"56548916\", " + \
            " \"formacoesAcademicas\": [], " + \
            " \"matriculaRede\": \"56789\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataFim\": \"2027-13-03\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_3.status_code == 422
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/82329860545",
                    headers=headers)
        
        assert res_4.status_code == 404
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/3421787496848143/erros?page=1",
                    headers=headers)
        
        assert res_5.status_code == 400
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "O ID fornecido não é um UUID válido. ID: 3421787496848143"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?page=108",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_6.json()["data"]) == 10
        assert res_6.json()["data"][0]["dataEnvio"] == "2025-05-04 00:03:35"
        assert res_6.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][1]["dataEnvio"] == "2025-05-04 00:02:20"
        assert res_6.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][2]["dataEnvio"] == "2025-05-04 00:01:55"
        assert res_6.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_6.json()["pagination"]["total"] == 10559.0
        assert res_6.json()["pagination"]["count"] == 10.0
        assert res_6.json()["pagination"]["per_page"] == 10.0
        assert res_6.json()["pagination"]["current_page"] == 108.0
        assert res_6.json()["pagination"]["total_pages"] == 1056.0
        assert res_6.json()["pagination"]["links"]["previous"] == 107.0
        assert res_6.json()["pagination"]["links"]["next"] == 109.0
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/67d79ff3-fd8a-4586-9ed2-41bee2ab96cf?page=570",
                    headers=headers)
        
        assert res_7.status_code == 500
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 67d79ff3-fd8a-4586-9ed2-41bee2ab96cf Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Response status 401 not defined for path '/v1/estudantes/lote/{id}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/033becad-c73c-4b6c-b1f0-043a3a0044fa?per_page=482",
                    headers=headers)
        
        assert res_8.status_code == 401
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "Não autorizado"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_9 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=935&" + 
                    "situacao_matricula=ATIVAS&" + 
                    "ano_matricula=2025&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_9.status_code == 500
        assert "application/json" in res_9.headers["content-type"]
        assert res_9.json()["success"] == False
        assert res_9.json()["message"] == "Ocorreu um erro inesperado."
        assert res_9.json()["errors"]["message"] == "O campo situacao_final é inválido."
    
    
    # Calls:
    # 1 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 2 - (422) POST:/v1/profissionais/lote
    # 3 - (200) GET:/v1/profissionais
    # 4 - (200) GET:/v1/estudantes/{cpfNis}
    # 5 - (500) GET:/v1/estudantes/inep/{inep}
    # 6 - (401) PATCH:/v1/estudantes/lote
    # 7 - (200) GET:/v1/profissionais/lote
    # 8 - (500) POST:/v1/estudantes
    # 9 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # Found 24 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_29_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/gz/erros",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: gz"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 422
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?per_page=685",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 3
        assert res_2.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"][0]["cpf"] == "43839402000"
        assert res_2.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_2.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"][0]["genero"] == 1.0
        assert res_2.json()["data"][0]["racaCor"] == 2.0
        assert res_2.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"][0]["telefone"] is None
        assert res_2.json()["data"][0]["nomeSocial"] is None
        assert res_2.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"][0]["bairro"] == "Centro"
        assert res_2.json()["data"][0]["numero"] == "123"
        assert res_2.json()["data"][0]["cep"] == "01001000"
        assert res_2.json()["data"][0]["municipio"] == 2700409.0
        assert res_2.json()["data"][0]["uf"] == 27.0
        assert res_2.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_2.json()["data"][0]["situacaoAtiva"] == True
        assert res_2.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"][0]["dataFim"] is None
        assert res_2.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_2.json()["data"][0]["matriculaRede"] == "56789"
        assert res_2.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_2.json()["data"][0]["inep"] == "27014088"
        assert len(res_2.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"][1]["cpf"] == "33722248094"
        assert res_2.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_2.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"][1]["genero"] == 1.0
        assert res_2.json()["data"][1]["racaCor"] == 2.0
        assert res_2.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"][1]["telefone"] is None
        assert res_2.json()["data"][1]["nomeSocial"] is None
        assert res_2.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"][1]["bairro"] == "Centro"
        assert res_2.json()["data"][1]["numero"] == "123"
        assert res_2.json()["data"][1]["cep"] == "01001000"
        assert res_2.json()["data"][1]["municipio"] == 2700409.0
        assert res_2.json()["data"][1]["uf"] == 27.0
        assert res_2.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_2.json()["data"][1]["situacaoAtiva"] == True
        assert res_2.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"][1]["dataFim"] is None
        assert res_2.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_2.json()["data"][1]["matriculaRede"] == "56789"
        assert res_2.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_2.json()["data"][1]["inep"] == "27014088"
        assert len(res_2.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"][2]["cpf"] == "31863200037"
        assert res_2.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_2.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"][2]["genero"] == 1.0
        assert res_2.json()["data"][2]["racaCor"] == 2.0
        assert res_2.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"][2]["telefone"] is None
        assert res_2.json()["data"][2]["nomeSocial"] is None
        assert res_2.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"][2]["bairro"] == "Centro"
        assert res_2.json()["data"][2]["numero"] == "123"
        assert res_2.json()["data"][2]["cep"] == "01001000"
        assert res_2.json()["data"][2]["municipio"] == 2700409.0
        assert res_2.json()["data"][2]["uf"] == 27.0
        assert res_2.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_2.json()["data"][2]["situacaoAtiva"] == True
        assert res_2.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"][2]["dataFim"] is None
        assert res_2.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_2.json()["data"][2]["matriculaRede"] == "56789"
        assert res_2.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_2.json()["data"][2]["inep"] == "27014088"
        assert len(res_2.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_2.json()["pagination"]["total"] == 3.0
        assert res_2.json()["pagination"]["count"] == 3.0
        assert res_2.json()["pagination"]["per_page"] == 685.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/17474522209",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert res_3.json()["data"]["cpf"] == "17474522209"
        assert res_3.json()["data"]["nome"] == "Dr. Pietra Veles"
        assert res_3.json()["data"]["nomeSocial"] is None
        assert res_3.json()["data"]["numeroNIS"] == "98752855375"
        assert res_3.json()["data"]["rg"] == "07766265517482763331"
        assert res_3.json()["data"]["orgaoEmissor"] == "FwRW-yi"
        assert res_3.json()["data"]["cpfResponsavel"] == "67216174643"
        assert res_3.json()["data"]["nomeMaeEstudante"] == "Joaquim Pedroso Neto"
        assert res_3.json()["data"]["numeroNISResponsavel"] == "56390290747"
        assert res_3.json()["data"]["dataNascimento"] == "1996-10-13"
        assert res_3.json()["data"]["logradouro"] == "Travessa Maitê dos Reis"
        assert res_3.json()["data"]["bairro"] == "Bairro dolorem"
        assert res_3.json()["data"]["numero"] == "100"
        assert res_3.json()["data"]["cep"] == "97538941"
        assert res_3.json()["data"]["municipio"] == 2208403.0
        assert res_3.json()["data"]["certidaoNascimento"] == "33271028123920187697045502421479"
        assert res_3.json()["data"]["cnh"] == "94418761198"
        assert res_3.json()["data"]["uf"] == 31.0
        assert res_3.json()["data"]["racaCor"] == 3.0
        assert len(res_3.json()["data"]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"]["tipoDeficiencia"][0] == 5.0
        assert res_3.json()["data"]["tipoDeficiencia"][1] == 9.0
        assert res_3.json()["data"]["tipoDeficiencia"][2] == 10.0
        assert res_3.json()["data"]["genero"] == 1.0
        assert res_3.json()["data"]["telefone"] is None
        assert res_3.json()["data"]["email"] is None
        assert res_3.json()["data"]["situacaoCadastroValidado"] == 4.0
        assert len(res_3.json()["data"]["matriculas"]) == 1
        assert res_3.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1390176.0
        assert res_3.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_3.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "1968-04-17"
        assert res_3.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "1961-04-21"
        assert res_3.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_3.json()["data"]["matriculas"][0]["serieAno"] == 45.0
        assert res_3.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_3.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_3.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_3.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_3.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"]["outrasMatriculas"]) == 0
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/inep/{inep}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/33008892?" + 
                    "per_page=482&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_4.status_code == 500
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Não foi possível obter os estudantes."
        assert res_4.json()["errors"]["message"] == "O campo ano_matricula é obrigatório quando o campo situacao_final é informado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. PATCH:/v1/estudantes/lote -> Response status 401 not defined for path '/v1/estudantes/lote'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 401
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:36:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:35:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:35:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:34:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:32:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:32:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:31:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:31:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:29:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:29:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=10",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_6.json()["data"]) == 10
        assert res_6.json()["data"][0]["dataEnvio"] == "2025-05-04 08:36:51"
        assert res_6.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][1]["dataEnvio"] == "2025-05-04 08:35:36"
        assert res_6.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][2]["dataEnvio"] == "2025-05-04 08:35:02"
        assert res_6.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_6.json()["pagination"]["total"] == 3158.0
        assert res_6.json()["pagination"]["count"] == 10.0
        assert res_6.json()["pagination"]["per_page"] == 10.0
        assert res_6.json()["pagination"]["current_page"] == 1.0
        assert res_6.json()["pagination"]["total_pages"] == 316.0
        assert res_6.json()["pagination"]["links"]["previous"] is None
        assert res_6.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"57674546338\", " + \
            " \"dataNascimento\": \"1986-10-20\", " + \
            " \"genero\": 8, " + \
            " \"nomeSocial\": \"oZymDIPtU\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"numeroNIS\": \"67321924100\", " + \
            " \"orgaoEmissor\": \"doxy-Mj\", " + \
            " \"certidaoNascimento\": \"2433373681424944076\", " + \
            " \"bairro\": \"São D\u0027ávila\", " + \
            " \"numero\": \"55\", " + \
            " \"uf\": 13, " + \
            " \"dataInicioMatricula\": \"1957-08-31\", " + \
            " \"matriculaRede\": \"G8BMn2\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 3, " + \
            " \"estudanteIntegral\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_7.status_code == 500
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Ocorreu um erro."
        assert res_7.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?page=336",
                    headers=headers)
        
        assert res_8.status_code == 404
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "Ocorreu um erro inesperado."
        assert res_8.json()["errors"]["message"] == "Nenhum dado encontrado"
    
    
    # Calls:
    # 1 - (500) GET:/v1/profissionais/lote/{id}
    # 2 - (500) GET:/v1/estudantes/inep/{inep}
    # 3 - (200) GET:/v1/estudantes/inep/{inep}
    # 4 - (200) GET:/v1/estudantes/lote/{id}
    # 5 - (200) GET:/v1/profissionais/lote
    # 6 - (200) PATCH:/v1/estudantes/lote
    # Found 16 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_30_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/0e3d2c43-2e1d-472d-991a-b4c6224dbf2d?" + 
                    "page=752&" + 
                    "per_page=482&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 0e3d2c43-2e1d-472d-991a-b4c6224dbf2d Nenhum lote correspondente foi encontrado."
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/inep/{inep}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/L4?" + 
                    "per_page=740&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/35428875?" + 
                    "page=482&" + 
                    "situacao_matricula=INATIVAS",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 0.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 482.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] == 481.0
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/0fa4b45a-1ee2-4e2a-bdde-1c82260fd9a1?" + 
                    "page=571&" + 
                    "per_page=740&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["status_processamento"] == "Enviado"
        assert res_3.json()["message"] == "Lote recuperado com sucesso. ID: 0fa4b45a-1ee2-4e2a-bdde-1c82260fd9a1"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:35:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:35:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:34:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:32:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:32:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:31:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:31:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:29:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:29:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:27:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_4.json()["data"]) == 10
        assert res_4.json()["data"][0]["dataEnvio"] == "2025-05-04 08:35:36"
        assert res_4.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_4.json()["data"][1]["dataEnvio"] == "2025-05-04 08:35:02"
        assert res_4.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_4.json()["data"][2]["dataEnvio"] == "2025-05-04 08:34:52"
        assert res_4.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_4.json()["pagination"]["total"] == 3157.0
        assert res_4.json()["pagination"]["count"] == 10.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 316.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] == 2.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_34_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_35_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_36_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_37_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_38_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_5.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais
    # 2 - (200) GET:/v1/estudantes/{cpfNis}
    # 3 - (404) GET:/v1/estudantes/validacao-cadastro
    # 4 - (500) GET:/v1/estudantes
    # 5 - (200) GET:/v1/estudantes/lote/{id}
    # 6 - (201) POST:/v1/estudantes/lote
    # 7 - (200) GET:/v1/estudantes/lote/{id}
    # 8 - (200) GET:/v1/estudantes/inep/{inep}
    # Found 11 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_31_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 3
        assert res_0.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][0]["cpf"] == "43839402000"
        assert res_0.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][0]["genero"] == 1.0
        assert res_0.json()["data"][0]["racaCor"] == 2.0
        assert res_0.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][0]["telefone"] is None
        assert res_0.json()["data"][0]["nomeSocial"] is None
        assert res_0.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][0]["bairro"] == "Centro"
        assert res_0.json()["data"][0]["numero"] == "123"
        assert res_0.json()["data"][0]["cep"] == "01001000"
        assert res_0.json()["data"][0]["municipio"] == 2700409.0
        assert res_0.json()["data"][0]["uf"] == 27.0
        assert res_0.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][0]["situacaoAtiva"] == True
        assert res_0.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][0]["dataFim"] is None
        assert res_0.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][0]["matriculaRede"] == "56789"
        assert res_0.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][0]["inep"] == "27014088"
        assert len(res_0.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][1]["cpf"] == "33722248094"
        assert res_0.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][1]["genero"] == 1.0
        assert res_0.json()["data"][1]["racaCor"] == 2.0
        assert res_0.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][1]["telefone"] is None
        assert res_0.json()["data"][1]["nomeSocial"] is None
        assert res_0.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][1]["bairro"] == "Centro"
        assert res_0.json()["data"][1]["numero"] == "123"
        assert res_0.json()["data"][1]["cep"] == "01001000"
        assert res_0.json()["data"][1]["municipio"] == 2700409.0
        assert res_0.json()["data"][1]["uf"] == 27.0
        assert res_0.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][1]["situacaoAtiva"] == True
        assert res_0.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][1]["dataFim"] is None
        assert res_0.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][1]["matriculaRede"] == "56789"
        assert res_0.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][1]["inep"] == "27014088"
        assert len(res_0.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][2]["cpf"] == "31863200037"
        assert res_0.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][2]["genero"] == 1.0
        assert res_0.json()["data"][2]["racaCor"] == 2.0
        assert res_0.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][2]["telefone"] is None
        assert res_0.json()["data"][2]["nomeSocial"] is None
        assert res_0.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][2]["bairro"] == "Centro"
        assert res_0.json()["data"][2]["numero"] == "123"
        assert res_0.json()["data"][2]["cep"] == "01001000"
        assert res_0.json()["data"][2]["municipio"] == 2700409.0
        assert res_0.json()["data"][2]["uf"] == 27.0
        assert res_0.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][2]["situacaoAtiva"] == True
        assert res_0.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][2]["dataFim"] is None
        assert res_0.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][2]["matriculaRede"] == "56789"
        assert res_0.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][2]["inep"] == "27014088"
        assert len(res_0.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["pagination"]["total"] == 3.0
        assert res_0.json()["pagination"]["count"] == 3.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/25537802651",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert res_1.json()["data"]["cpf"] == "25537802651"
        assert res_1.json()["data"]["nome"] == "Teresa Collier"
        assert res_1.json()["data"]["nomeSocial"] is None
        assert res_1.json()["data"]["numeroNIS"] == "28713967021"
        assert res_1.json()["data"]["rg"] == "21046302"
        assert res_1.json()["data"]["orgaoEmissor"] == "SEDS"
        assert res_1.json()["data"]["cpfResponsavel"] == "12111123521"
        assert res_1.json()["data"]["nomeMaeEstudante"] == "William Miller"
        assert res_1.json()["data"]["numeroNISResponsavel"] is None
        assert res_1.json()["data"]["dataNascimento"] == "2000-11-25"
        assert res_1.json()["data"]["logradouro"] == "Rua teste"
        assert res_1.json()["data"]["bairro"] == "Santa Lucia"
        assert res_1.json()["data"]["numero"] == "220"
        assert res_1.json()["data"]["cep"] == "57018780"
        assert res_1.json()["data"]["municipio"] == 2704302.0
        assert res_1.json()["data"]["certidaoNascimento"] == "2005060"
        assert res_1.json()["data"]["cnh"] == "101302420"
        assert res_1.json()["data"]["uf"] == 27.0
        assert res_1.json()["data"]["racaCor"] == 5.0
        assert len(res_1.json()["data"]["tipoDeficiencia"]) == 0
        assert res_1.json()["data"]["genero"] == 1.0
        assert res_1.json()["data"]["telefone"] is None
        assert res_1.json()["data"]["email"] == ""
        assert res_1.json()["data"]["situacaoCadastroValidado"] == 2.0
        assert len(res_1.json()["data"]["matriculas"]) == 3
        assert res_1.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 112.0
        assert res_1.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_1.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2024-03-03"
        assert res_1.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_1.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_1.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_1.json()["data"]["matriculas"][0]["serieAno"] == 2.0
        assert res_1.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação Infantil"
        assert res_1.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_1.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_1.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_1.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_1.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_1.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] == "2024-09-27 02:03:07"
        assert res_1.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert res_1.json()["data"]["matriculas"][1]["codigoMatriculaSgp"] == 113.0
        assert res_1.json()["data"]["matriculas"][1]["codInstituicao"] == 223323.0
        assert res_1.json()["data"]["matriculas"][1]["dataInicioMatricula"] == "2024-03-03"
        assert res_1.json()["data"]["matriculas"][1]["estudantePpl"] == 0.0
        assert res_1.json()["data"]["matriculas"][1]["dataFimOuAprovacao"] is None
        assert res_1.json()["data"]["matriculas"][1]["situacaoMatricula"] == False
        assert res_1.json()["data"]["matriculas"][1]["serieAno"] == 2.0
        assert res_1.json()["data"]["matriculas"][1]["etapaEnsinoConsolidado"] == "Educação Infantil"
        assert res_1.json()["data"]["matriculas"][1]["matriculaRede"] is None
        assert res_1.json()["data"]["matriculas"][1]["deletadaEm"] == "2024-04-09 18:32:04"
        assert res_1.json()["data"]["matriculas"][1]["inep"] == "20110231"
        assert res_1.json()["data"]["matriculas"][1]["estudanteSituacaoFinal"] is None
        assert res_1.json()["data"]["matriculas"][1]["dataConclusaoEnsinoMedio"] is None
        assert res_1.json()["data"]["matriculas"][1]["dataInicioPeriodoLetivo"] is None
        assert res_1.json()["data"]["matriculas"][1]["formaOrganizacaoTurma"] is None
        assert res_1.json()["data"]["matriculas"][1]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_1.json()["data"]["matriculas"][1]["estudanteAnoPeriodo"] is None
        assert res_1.json()["data"]["matriculas"][1]["estudanteIntegral"] is None
        assert res_1.json()["data"]["matriculas"][1]["dataAtivacaoMatricula"] is None
        assert res_1.json()["data"]["matriculas"][1]["anoMatricula"] is None
        assert res_1.json()["data"]["matriculas"][2]["codigoMatriculaSgp"] == 114.0
        assert res_1.json()["data"]["matriculas"][2]["codInstituicao"] == 223326.0
        assert res_1.json()["data"]["matriculas"][2]["dataInicioMatricula"] == "2024-03-03"
        assert res_1.json()["data"]["matriculas"][2]["estudantePpl"] == 0.0
        assert res_1.json()["data"]["matriculas"][2]["dataFimOuAprovacao"] is None
        assert res_1.json()["data"]["matriculas"][2]["situacaoMatricula"] == False
        assert res_1.json()["data"]["matriculas"][2]["serieAno"] == 2.0
        assert res_1.json()["data"]["matriculas"][2]["etapaEnsinoConsolidado"] == "Educação Infantil"
        assert res_1.json()["data"]["matriculas"][2]["matriculaRede"] is None
        assert res_1.json()["data"]["matriculas"][2]["deletadaEm"] == "2024-04-09 18:32:04"
        assert res_1.json()["data"]["matriculas"][2]["inep"] == "44310121"
        assert res_1.json()["data"]["matriculas"][2]["estudanteSituacaoFinal"] is None
        assert res_1.json()["data"]["matriculas"][2]["dataConclusaoEnsinoMedio"] is None
        assert res_1.json()["data"]["matriculas"][2]["dataInicioPeriodoLetivo"] is None
        assert res_1.json()["data"]["matriculas"][2]["formaOrganizacaoTurma"] is None
        assert res_1.json()["data"]["matriculas"][2]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_1.json()["data"]["matriculas"][2]["estudanteAnoPeriodo"] is None
        assert res_1.json()["data"]["matriculas"][2]["estudanteIntegral"] is None
        assert res_1.json()["data"]["matriculas"][2]["dataAtivacaoMatricula"] is None
        assert res_1.json()["data"]["matriculas"][2]["anoMatricula"] is None
        assert len(res_1.json()["data"]["outrasMatriculas"]) == 0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 404 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "page=285&" + 
                    "per_page=740",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro inesperado."
        assert res_2.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=462&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro inesperado."
        assert res_3.json()["errors"]["message"] == "O campo ano_matricula é obrigatório quando o campo situacao_final é informado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/f642082d-74be-4ba3-933e-dca98cba124c?" + 
                    "per_page=374&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["status_processamento"] == "Enviado"
        assert res_4.json()["message"] == "Lote recuperado com sucesso. ID: f642082d-74be-4ba3-933e-dca98cba124c"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"numeroNISResponsavel\": \"08839259030\", " + \
            " \"nome\": \"7bP363bR3\", " + \
            " \"dataNascimento\": \"uBi3Wjko1X8\", " + \
            " \"email\": \"aaron.jose.fonseca.sobrinho@fake.com\", " + \
            " \"telefone\": \"11969630845\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"66060262669\", " + \
            " \"rg\": \"6575193089368098\", " + \
            " \"cnh\": \"5\", " + \
            " \"bairro\": \"São Valência\", " + \
            " \"numero\": \"4478\", " + \
            " \"municipio\": 4314902, " + \
            " \"inep\": 129, " + \
            " \"dataInicioPeriodoLetivo\": \"1907-06-13\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 7, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"46578013060\", " + \
            " \"cpf\": \"77823029430\", " + \
            " \"email\": \"FpXgQNS\", " + \
            " \"telefone\": \"11917982977\", " + \
            " \"nomeSocial\": \"RsOLwyuuUB3\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 8 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"orgaoEmissor\": \"Nt Uteu4fY\", " + \
            " \"logradouro\": \"GBdu\", " + \
            " \"cep\": \"UGuZrO6\", " + \
            " \"uf\": 51, " + \
            " \"estudantePpl\": 2, " + \
            " \"dataInicioMatricula\": \"1931-10-30\", " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"inep\": 32078625, " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"anoMatricula\": 2024 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 201
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/a23e247b-58b2-4481-bfe5-11bcaf8dfb6a?" + 
                    "page=589048208&" + 
                    "per_page=740&" + 
                    "incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["status_processamento"] == "Enviado"
        assert res_6.json()["message"] == "Lote recuperado com sucesso. ID: a23e247b-58b2-4481-bfe5-11bcaf8dfb6a"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/41102878?" + 
                    "per_page=515&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_7.json()["data"]) == 0
        assert res_7.json()["pagination"]["total"] == 0.0
        assert res_7.json()["pagination"]["count"] == 0.0
        assert res_7.json()["pagination"]["per_page"] == 515.0
        assert res_7.json()["pagination"]["current_page"] == 1.0
        assert res_7.json()["pagination"]["total_pages"] == 1.0
        assert res_7.json()["pagination"]["links"]["previous"] is None
        assert res_7.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes
    # 2 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 3 - (200) GET:/v1/estudantes/solicitacoes-alteracoes
    # 4 - (500) GET:/v1/estudantes
    # 5 - (200) GET:/v1/profissionais
    # 6 - (500) GET:/v1/profissionais/lote/{id}
    # 7 - (200) PATCH:/v1/estudantes/lote
    # 8 - (401) GET:/v1/estudantes/{cpfNis}
    # Found 12 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_32_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=400&" + 
                    "per_page=18&" + 
                    "ano_matricula=2025",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 235.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 18.0
        assert res_0.json()["pagination"]["current_page"] == 400.0
        assert res_0.json()["pagination"]["total_pages"] == 14.0
        assert res_0.json()["pagination"]["links"]["previous"] == 399.0
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/1316319834491102/erros?" + 
                    "page=445&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_1.status_code == 400
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "O ID fornecido não é um UUID válido. ID: 1316319834491102"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?cpfAtual=93773545959",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        assert len(res_2.json()["data"]) == 2
        assert res_2.json()["data"][0]["cpfAtual"] == "93773545959"
        assert res_2.json()["data"][0]["cpfNovo"] == "70460115243"
        assert res_2.json()["data"][0]["situacaoCpf"] is None
        assert res_2.json()["data"][0]["descricaoSituacaoCpf"] is None
        assert res_2.json()["data"][0]["tipoSituacaoCpf"] is None
        assert res_2.json()["data"][0]["nomeAtual"] == "Robin Greenfelder"
        assert res_2.json()["data"][0]["nomeNovo"] == "Robin Greenfelder"
        assert res_2.json()["data"][0]["nomeValidado"] is None
        assert res_2.json()["data"][0]["dataNascimentoAtual"] == "2024-12-28"
        assert res_2.json()["data"][0]["dataNascimentoNovo"] == "2024-12-28"
        assert res_2.json()["data"][0]["dataNascimentoValidada"] is None
        assert res_2.json()["data"][0]["nomeMaeEstudanteAtual"] == "Valentina Rezende"
        assert res_2.json()["data"][0]["nomeMaeEstudanteNovo"] == "Valentina Rezende"
        assert res_2.json()["data"][0]["nomeMaeEstudanteValidado"] is None
        assert res_2.json()["data"][0]["dataValidacaoCadastral"] is None
        assert res_2.json()["data"][1]["cpfAtual"] == "93773545959"
        assert res_2.json()["data"][1]["cpfNovo"] == "70460115243"
        assert res_2.json()["data"][1]["situacaoCpf"] is None
        assert res_2.json()["data"][1]["descricaoSituacaoCpf"] is None
        assert res_2.json()["data"][1]["tipoSituacaoCpf"] is None
        assert res_2.json()["data"][1]["nomeAtual"] == "Robin Greenfelder"
        assert res_2.json()["data"][1]["nomeNovo"] == "Robin Greenfelder"
        assert res_2.json()["data"][1]["nomeValidado"] is None
        assert res_2.json()["data"][1]["dataNascimentoAtual"] == "2024-12-28"
        assert res_2.json()["data"][1]["dataNascimentoNovo"] == "2024-12-28"
        assert res_2.json()["data"][1]["dataNascimentoValidada"] is None
        assert res_2.json()["data"][1]["nomeMaeEstudanteAtual"] == "Valentina Rezende"
        assert res_2.json()["data"][1]["nomeMaeEstudanteNovo"] == "Valentina Rezende"
        assert res_2.json()["data"][1]["nomeMaeEstudanteValidado"] is None
        assert res_2.json()["data"][1]["dataValidacaoCadastral"] is None
        assert res_2.json()["pagination"]["total"] == 2.0
        assert res_2.json()["pagination"]["count"] == 2.0
        assert res_2.json()["pagination"]["per_page"] == 15.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=934&" + 
                    "per_page=386&" + 
                    "situacao_matricula=ATIVAS&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro inesperado."
        assert res_3.json()["errors"]["message"] == "O campo ano_matricula é obrigatório quando o campo situacao_final é informado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=636&" + 
                    "per_page=482",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_4.json()["data"]) == 0
        assert res_4.json()["pagination"]["total"] == 3.0
        assert res_4.json()["pagination"]["count"] == 0.0
        assert res_4.json()["pagination"]["per_page"] == 482.0
        assert res_4.json()["pagination"]["current_page"] == 636.0
        assert res_4.json()["pagination"]["total_pages"] == 1.0
        assert res_4.json()["pagination"]["links"]["previous"] == 635.0
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/269da76b-8863-4c60-91da-57d8252e8e14?" + 
                    "page=379&" + 
                    "per_page=15",
                    headers=headers)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 269da76b-8863-4c60-91da-57d8252e8e14 Nenhum lote correspondente foi encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_81_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_82_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_83_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_84_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_85_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_6.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Response status 401 not defined for path '/v1/estudantes/{cpfNis}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/52652547496",
                    headers=headers)
        
        assert res_7.status_code == 401
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # 1 - (422) POST:/v1/profissionais
    # 2 - (201) POST:/v1/estudantes/lote
    # 3 - (200) GET:/v1/estudantes/solicitacoes-alteracoes
    # 4 - (200) GET:/v1/estudantes
    # 5 - (200) GET:/v1/estudantes/inep/{inep}
    # 6 - (400) GET:/v1/profissionais/lote/{id}
    # 7 - (200) GET:/v1/profissionais/lote
    # 8 - (500) GET:/v1/estudantes/lote/{id}
    # Found 24 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   1
    @timeout_decorator.timeout(60)
    def test_33_with500(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nome\": \"NLdpi1pMed\", " + \
            " \"dataNascimento\": \"2009-08-30\", " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"8_uJrlOpVdih0o6\", " + \
            " \"telefone\": \"11969630845\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 970, " + \
            " 3, " + \
            " 3 " + \
            " ], " + \
            " \"numero\": \"1536\", " + \
            " \"cep\": \"73814984\", " + \
            " \"inep\": 42109361, " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataFim\": \"1999-06-05\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O campo tipoEnsinoMedio deve ser um número inteiro. (and 2 more errors)"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"87185736900\", " + \
            " \"nome\": \"Aaron Martines Casanova\", " + \
            " \"genero\": 4, " + \
            " \"racaCor\": 42, " + \
            " \"telefone\": \"11949911257\", " + \
            " \"numeroNIS\": \"13504967381\", " + \
            " \"orgaoEmissor\": \"Nt Uteu4fY\", " + \
            " \"cnh\": \"3333333\", " + \
            " \"logradouro\": \"Rua Rua Guerra\", " + \
            " \"bairro\": \"_QZ3\", " + \
            " \"municipio\": 2611606, " + \
            " \"uf\": 27, " + \
            " \"estudantePpl\": 42, " + \
            " \"matriculaRede\": \"7\", " + \
            " \"dataInicioPeriodoLetivo\": \"2002-10-04\", " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 17, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 0 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"01247044769\", " + \
            " \"numeroNISResponsavel\": \"92481481070\", " + \
            " \"nomeMaeEstudante\": \"Srta. Karen de Freitas Filho\", " + \
            " \"cpf\": \"25581162662\", " + \
            " \"nome\": \"Aaron Pablo Lourenço\", " + \
            " \"dataNascimento\": \"2006-12-09\", " + \
            " \"racaCor\": 3, " + \
            " \"telefone\": \"11969630845\", " + \
            " \"sexo\": \"4\", " + \
            " \"numeroNIS\": \"16003962624\", " + \
            " \"orgaoEmissor\": \"SSP-PE\", " + \
            " \"cnh\": \"02342004738\", " + \
            " \"logradouro\": \"Rua Rua Sabrina\", " + \
            " \"cep\": \"22027342\", " + \
            " \"municipio\": 2704302, " + \
            " \"dataInicioMatricula\": \"2089-09-20\", " + \
            " \"anoMatricula\": 999 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"14806107557\", " + \
            " \"dataNascimento\": \"2008-04-01\", " + \
            " \"genero\": 42, " + \
            " \"email\": \"aaron.fontes@fake.com\", " + \
            " \"telefone\": \"11969630845\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9 " + \
            " ], " + \
            " \"numeroNIS\": \"11330692465\", " + \
            " \"certidaoNascimento\": \"67498550141183626413144052936219\", " + \
            " \"cnh\": \"01354673004\", " + \
            " \"logradouro\": \"vpxBDB\", " + \
            " \"bairro\": \"São Matias\", " + \
            " \"municipio\": 479, " + \
            " \"uf\": 43, " + \
            " \"estudantePpl\": 2, " + \
            " \"dataInicioMatricula\": \"1988-13-24\", " + \
            " \"serieAno\": 27, " + \
            " \"matriculaRede\": \"7\", " + \
            " \"dataInicioPeriodoLetivo\": \"2053-11-14\", " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"estudanteIntegral\": 42 " + \
            " }, " + \
            " { " + \
            " \"nome\": \"Aaron Otávio Aranda Sobrinho\", " + \
            " \"dataNascimento\": \"1d0YefUW9JvRbvcQ\", " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"aaron.guerra@fake.com\", " + \
            " \"telefone\": \"11969630845\", " + \
            " \"numeroNIS\": \"86701783688\", " + \
            " \"rg\": \"7948405004657878\", " + \
            " \"orgaoEmissor\": \"SSP-PE\", " + \
            " \"certidaoNascimento\": \"NL\", " + \
            " \"logradouro\": \"Rua Largo Molina\", " + \
            " \"bairro\": \"tc38bUBcRk\", " + \
            " \"numero\": \"54379\", " + \
            " \"cep\": \"53848957\", " + \
            " \"municipio\": 3304557, " + \
            " \"uf\": 33 " + \
            " }, " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Sra. Maraisa Garcia Jr.\", " + \
            " \"cpf\": \"31863200037\", " + \
            " \"dataNascimento\": \"iGixDIpctYEmKr6N\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 3, " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 2, " + \
            " 9 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"rg\": \"1662369739692786\", " + \
            " \"logradouro\": \"Rua Av. Solano\", " + \
            " \"municipio\": 1100940, " + \
            " \"uf\": 26, " + \
            " \"estudantePpl\": 1, " + \
            " \"instituicao\": 185382, " + \
            " \"inep\": 12032115, " + \
            " \"dataInicioPeriodoLetivo\": \"1961-08-24\", " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteAnoPeriodo\": 42 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        assert len(res_2.json()["data"]) == 15
        assert res_2.json()["data"][0]["cpfAtual"] == "13213485179"
        assert res_2.json()["data"][0]["cpfNovo"] == "13213485179"
        assert res_2.json()["data"][0]["situacaoCpf"] is None
        assert res_2.json()["data"][0]["descricaoSituacaoCpf"] is None
        assert res_2.json()["data"][0]["tipoSituacaoCpf"] is None
        assert res_2.json()["data"][0]["nomeAtual"] == "Audrey Roob"
        assert res_2.json()["data"][0]["nomeNovo"] == "nome certo"
        assert res_2.json()["data"][0]["nomeValidado"] is None
        assert res_2.json()["data"][0]["dataNascimentoAtual"] == "2024-12-28"
        assert res_2.json()["data"][0]["dataNascimentoNovo"] == "2024-12-28"
        assert res_2.json()["data"][0]["dataNascimentoValidada"] is None
        assert res_2.json()["data"][0]["nomeMaeEstudanteAtual"] == "Teresa Harris IV"
        assert res_2.json()["data"][0]["nomeMaeEstudanteNovo"] == "Teresa Harris IV"
        assert res_2.json()["data"][0]["nomeMaeEstudanteValidado"] is None
        assert res_2.json()["data"][0]["dataValidacaoCadastral"] is None
        assert res_2.json()["data"][1]["cpfAtual"] == "49255179888"
        assert res_2.json()["data"][1]["cpfNovo"] == "02742633359"
        assert res_2.json()["data"][1]["situacaoCpf"] is None
        assert res_2.json()["data"][1]["descricaoSituacaoCpf"] is None
        assert res_2.json()["data"][1]["tipoSituacaoCpf"] is None
        assert res_2.json()["data"][1]["nomeAtual"] == "111"
        assert res_2.json()["data"][1]["nomeNovo"] == "111"
        assert res_2.json()["data"][1]["nomeValidado"] is None
        assert res_2.json()["data"][1]["dataNascimentoAtual"] == "2024-12-28"
        assert res_2.json()["data"][1]["dataNascimentoNovo"] == "2024-12-28"
        assert res_2.json()["data"][1]["dataNascimentoValidada"] is None
        assert res_2.json()["data"][1]["nomeMaeEstudanteAtual"] == "Valentina Rezende"
        assert res_2.json()["data"][1]["nomeMaeEstudanteNovo"] == "Valentina Rezende"
        assert res_2.json()["data"][1]["nomeMaeEstudanteValidado"] is None
        assert res_2.json()["data"][1]["dataValidacaoCadastral"] is None
        assert res_2.json()["data"][2]["cpfAtual"] == "49255179888"
        assert res_2.json()["data"][2]["cpfNovo"] == "02742633359"
        assert res_2.json()["data"][2]["situacaoCpf"] is None
        assert res_2.json()["data"][2]["descricaoSituacaoCpf"] is None
        assert res_2.json()["data"][2]["tipoSituacaoCpf"] is None
        assert res_2.json()["data"][2]["nomeAtual"] == "111"
        assert res_2.json()["data"][2]["nomeNovo"] == "111"
        assert res_2.json()["data"][2]["nomeValidado"] is None
        assert res_2.json()["data"][2]["dataNascimentoAtual"] == "2024-12-28"
        assert res_2.json()["data"][2]["dataNascimentoNovo"] == "2024-12-28"
        assert res_2.json()["data"][2]["dataNascimentoValidada"] is None
        assert res_2.json()["data"][2]["nomeMaeEstudanteAtual"] == "Valentina Rezende"
        assert res_2.json()["data"][2]["nomeMaeEstudanteNovo"] == "Valentina Rezende"
        assert res_2.json()["data"][2]["nomeMaeEstudanteValidado"] is None
        assert res_2.json()["data"][2]["dataValidacaoCadastral"] is None
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 72.0
        assert res_2.json()["pagination"]["count"] == 15.0
        assert res_2.json()["pagination"]["per_page"] == 15.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 5.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=10&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["cpf"] == "86141562434"
        assert res_3.json()["data"][0]["nome"] == "Aaron Cruz Alcantara Neto"
        assert res_3.json()["data"][0]["nomeSocial"] is None
        assert res_3.json()["data"][0]["numeroNIS"] == "87732598473"
        assert res_3.json()["data"][0]["rg"] == "6666978857527129"
        assert res_3.json()["data"][0]["orgaoEmissor"] == "SSP-AM"
        assert res_3.json()["data"][0]["cpfResponsavel"] == "38033844191"
        assert res_3.json()["data"][0]["nomeMaeEstudante"] == "Srta. Valentina Souza"
        assert res_3.json()["data"][0]["numeroNISResponsavel"] == "86354613348"
        assert res_3.json()["data"][0]["dataNascimento"] == "2006-03-10"
        assert res_3.json()["data"][0]["logradouro"] == "Rua Travessa Duarte"
        assert res_3.json()["data"][0]["bairro"] == "São Perez"
        assert res_3.json()["data"][0]["numero"] == "67745"
        assert res_3.json()["data"][0]["cep"] == "37921122"
        assert res_3.json()["data"][0]["municipio"] == 1302603.0
        assert res_3.json()["data"][0]["certidaoNascimento"] == "97058493590404594010206740494975"
        assert res_3.json()["data"][0]["cnh"] is None
        assert res_3.json()["data"][0]["uf"] == 13.0
        assert res_3.json()["data"][0]["racaCor"] == 1.0
        assert len(res_3.json()["data"][0]["tipoDeficiencia"]) == 0
        assert res_3.json()["data"][0]["genero"] == 1.0
        assert res_3.json()["data"][0]["telefone"] is None
        assert res_3.json()["data"][0]["email"] is None
        assert res_3.json()["data"][0]["situacaoCadastroValidado"] is None
        assert len(res_3.json()["data"][0]["matriculas"]) == 1
        assert res_3.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 3342819.0
        assert res_3.json()["data"][0]["matriculas"][0]["codInstituicao"] == 8440.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_3.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] == "2024-07-23"
        assert res_3.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == False
        assert res_3.json()["data"][0]["matriculas"][0]["serieAno"] == 25.0
        assert res_3.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_3.json()["data"][0]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["deletadaEm"] == "2024-12-04 08:06:31"
        assert res_3.json()["data"][0]["matriculas"][0]["inep"] == "12033278"
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] == 10.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][1]["cpf"] == "59986809525"
        assert res_3.json()["data"][1]["nome"] == "Aaron Emanuel Garcia Jr."
        assert res_3.json()["data"][1]["nomeSocial"] is None
        assert res_3.json()["data"][1]["numeroNIS"] == "89991914467"
        assert res_3.json()["data"][1]["rg"] == "3489743586055069"
        assert res_3.json()["data"][1]["orgaoEmissor"] == "SSP-PE"
        assert res_3.json()["data"][1]["cpfResponsavel"] == "55053437408"
        assert res_3.json()["data"][1]["nomeMaeEstudante"] == "Emilly Zaragoça Filho"
        assert res_3.json()["data"][1]["numeroNISResponsavel"] == "00271957484"
        assert res_3.json()["data"][1]["dataNascimento"] == "2008-03-23"
        assert res_3.json()["data"][1]["logradouro"] == "Rua Rua Sebastião"
        assert res_3.json()["data"][1]["bairro"] == "São Soares"
        assert res_3.json()["data"][1]["numero"] == "7829"
        assert res_3.json()["data"][1]["cep"] == "98483504"
        assert res_3.json()["data"][1]["municipio"] == 2611606.0
        assert res_3.json()["data"][1]["certidaoNascimento"] == "29657727563356405071523758327047"
        assert res_3.json()["data"][1]["cnh"] is None
        assert res_3.json()["data"][1]["uf"] == 26.0
        assert res_3.json()["data"][1]["racaCor"] == 2.0
        assert len(res_3.json()["data"][1]["tipoDeficiencia"]) == 0
        assert res_3.json()["data"][1]["genero"] == 4.0
        assert res_3.json()["data"][1]["telefone"] is None
        assert res_3.json()["data"][1]["email"] is None
        assert res_3.json()["data"][1]["situacaoCadastroValidado"] is None
        assert len(res_3.json()["data"][1]["matriculas"]) == 1
        assert res_3.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 6352479.0
        assert res_3.json()["data"][1]["matriculas"][0]["codInstituicao"] == 8361.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_3.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] == "2024-07-23"
        assert res_3.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == False
        assert res_3.json()["data"][1]["matriculas"][0]["serieAno"] == 45.0
        assert res_3.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_3.json()["data"][1]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["deletadaEm"] == "2024-12-12 02:26:04"
        assert res_3.json()["data"][1]["matriculas"][0]["inep"] == "12032115"
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] == 10.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][2]["cpf"] == "07189562656"
        assert res_3.json()["data"][2]["nome"] == "Alana Vieira"
        assert res_3.json()["data"][2]["nomeSocial"] is None
        assert res_3.json()["data"][2]["numeroNIS"] == "78956067480"
        assert res_3.json()["data"][2]["rg"] == "80592132703471160974"
        assert res_3.json()["data"][2]["orgaoEmissor"] == "SSP/AL"
        assert res_3.json()["data"][2]["cpfResponsavel"] == "11878918940"
        assert res_3.json()["data"][2]["nomeMaeEstudante"] == "Dr. Lorenzo Jesus"
        assert res_3.json()["data"][2]["numeroNISResponsavel"] == "57634795981"
        assert res_3.json()["data"][2]["dataNascimento"] == "2005-10-13"
        assert res_3.json()["data"][2]["logradouro"] == "Recanto Melissa da Mata, 91\nVila Copasa\n85498615 da Paz / SE"
        assert res_3.json()["data"][2]["bairro"] == "Bairro"
        assert res_3.json()["data"][2]["numero"] == "8823"
        assert res_3.json()["data"][2]["cep"] == "57000000"
        assert res_3.json()["data"][2]["municipio"] == 1200203.0
        assert res_3.json()["data"][2]["certidaoNascimento"] == "36889690437362011130166117247755"
        assert res_3.json()["data"][2]["cnh"] is None
        assert res_3.json()["data"][2]["uf"] == 12.0
        assert res_3.json()["data"][2]["racaCor"] == 5.0
        assert len(res_3.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][2]["tipoDeficiencia"][0] == 5.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][1] == 9.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][2] == 10.0
        assert res_3.json()["data"][2]["genero"] == 2.0
        assert res_3.json()["data"][2]["telefone"] is None
        assert res_3.json()["data"][2]["email"] is None
        assert res_3.json()["data"][2]["situacaoCadastroValidado"] == 3.0
        assert len(res_3.json()["data"][2]["matriculas"]) == 1
        assert res_3.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 1289517.0
        assert res_3.json()["data"][2]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "1970-09-18"
        assert res_3.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] == "2024-09-23"
        assert res_3.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == False
        assert res_3.json()["data"][2]["matriculas"][0]["serieAno"] == 43.0
        assert res_3.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_3.json()["data"][2]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["deletadaEm"] == "2024-09-23 17:40:12"
        assert res_3.json()["data"][2]["matriculas"][0]["inep"] == "27014088"
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] == 10.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][2]["outrasMatriculas"]) == 1
        assert res_3.json()["data"][2]["outrasMatriculas"][0]["codigoMatriculaSgp"] == 754367.0
        assert res_3.json()["data"][2]["outrasMatriculas"][0]["serieAno"] == 47.0
        assert res_3.json()["data"][2]["outrasMatriculas"][0]["nomeRede"] == "Secretaria Estadual de Educação"
        assert res_3.json()["data"][2]["outrasMatriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_3.json()["data"][2]["outrasMatriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][2]["outrasMatriculas"][0]["uf"] == "Rio Grande do Sul"
        assert res_3.json()["data"][2]["outrasMatriculas"][0]["nomeMunicipio"] is None
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 17.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 2.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/32070853?" + 
                    "per_page=10&" + 
                    "situacao_matricula=INATIVAS",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_4.json()["data"]) == 0
        assert res_4.json()["pagination"]["total"] == 0.0
        assert res_4.json()["pagination"]["count"] == 0.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 1.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/e58LC6TYc5I8?" + 
                    "per_page=10&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_5.status_code == 400
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "O ID fornecido não é um UUID válido. ID: e58LC6TYc5I8"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?page=950",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_6.json()["data"]) == 0
        assert res_6.json()["pagination"]["total"] == 3157.0
        assert res_6.json()["pagination"]["count"] == 0.0
        assert res_6.json()["pagination"]["per_page"] == 10.0
        assert res_6.json()["pagination"]["current_page"] == 950.0
        assert res_6.json()["pagination"]["total_pages"] == 316.0
        assert res_6.json()["pagination"]["links"]["previous"] == 949.0
        assert res_6.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/53775b20-db57-4c70-86a4-ac676721551c?" + 
                    "page=709&" + 
                    "per_page=10&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_7.status_code == 500
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 53775b20-db57-4c70-86a4-ac676721551c Nenhum lote correspondente foi encontrado."
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (500) GET:/v1/estudantes/inep/{inep}
    # 3 - (200) GET:/v1/estudantes/inep/{inep}
    # 4 - (500) GET:/v1/estudantes
    # 5 - (200) GET:/v1/estudantes/validacao-cadastro
    # 6 - (404) GET:/v1/estudantes/validacao-cadastro
    # 7 - (200) GET:/v1/profissionais
    # 8 - (422) POST:/v1/profissionais/lote
    # 9 - (200) GET:/v1/profissionais/lote
    # 10 - (401) GET:/v1/estudantes/inep/{inep}
    # Found 405 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_34_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"Hugo Teixeira\", " + \
            " \"dataNascimento\": \"1983-11-10\", " + \
            " \"genero\": 8, " + \
            " \"racaCor\": 4, " + \
            " \"telefone\": \"7qMzhcyT6\", " + \
            " \"logradouro\": \"Rua R. Kelly Rivera\", " + \
            " \"cep\": \"24373655\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/inep/{inep}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/w6MbkbrF2?" + 
                    "page=1&" + 
                    "per_page=10&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/41067428?" + 
                    "per_page=10&" + 
                    "ano_matricula=2025&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 0.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=740&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro inesperado."
        assert res_3.json()["errors"]["message"] == "O campo situacao_final é inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?page=237",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Operação realizada com sucesso"
        assert len(res_4.json()["data"]) == 15
        assert res_4.json()["data"][0]["cpf"] == "65555027702"
        assert res_4.json()["data"][0]["numeroNIS"] == "42512042029"
        assert res_4.json()["data"][0]["situacaoCadastral"] == "Inexistente"
        assert res_4.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_4.json()["data"][0]["nome"] == "Sra. Lorena da Luz"
        assert res_4.json()["data"][0]["nomeValidado"] == False
        assert res_4.json()["data"][0]["dataNascimento"] == "1981-01-26"
        assert res_4.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_4.json()["data"][0]["nomeMaeEstudante"] == "João Luca Figueira"
        assert res_4.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_4.json()["data"][0]["dataValidacaoCadastral"] == "2025-05-01 17:26:38"
        assert res_4.json()["data"][1]["cpf"] == "81781683832"
        assert res_4.json()["data"][1]["numeroNIS"] == "17378331155"
        assert res_4.json()["data"][1]["situacaoCadastral"] == "Inexistente"
        assert res_4.json()["data"][1]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_4.json()["data"][1]["nome"] == "Allana Muniz"
        assert res_4.json()["data"][1]["nomeValidado"] == False
        assert res_4.json()["data"][1]["dataNascimento"] == "1985-06-01"
        assert res_4.json()["data"][1]["dataNascimentoValidada"] == False
        assert res_4.json()["data"][1]["nomeMaeEstudante"] == "Heitor Grotas Filho"
        assert res_4.json()["data"][1]["nomeMaeEstudanteValidado"] == False
        assert res_4.json()["data"][1]["dataValidacaoCadastral"] == "2025-05-01 17:26:51"
        assert res_4.json()["data"][2]["cpf"] == "27365386339"
        assert res_4.json()["data"][2]["numeroNIS"] == "35184060138"
        assert res_4.json()["data"][2]["situacaoCadastral"] == "Inexistente"
        assert res_4.json()["data"][2]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_4.json()["data"][2]["nome"] == "Maria Eduarda da Terra Jr."
        assert res_4.json()["data"][2]["nomeValidado"] == False
        assert res_4.json()["data"][2]["dataNascimento"] == "1989-08-11"
        assert res_4.json()["data"][2]["dataNascimentoValidada"] == False
        assert res_4.json()["data"][2]["nomeMaeEstudante"] == "Bryan Barata"
        assert res_4.json()["data"][2]["nomeMaeEstudanteValidado"] == False
        assert res_4.json()["data"][2]["dataValidacaoCadastral"] == "2025-05-02 09:08:42"
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_4.json()["pagination"]["total"] == 54714.0
        assert res_4.json()["pagination"]["count"] == 15.0
        assert res_4.json()["pagination"]["per_page"] == 15.0
        assert res_4.json()["pagination"]["current_page"] == 237.0
        assert res_4.json()["pagination"]["total_pages"] == 3648.0
        assert res_4.json()["pagination"]["links"]["previous"] == 236.0
        assert res_4.json()["pagination"]["links"]["next"] == 238.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 404 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "per_page=740&" + 
                    "cpf=58929950620",
                    headers=headers)
        
        assert res_5.status_code == 404
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Ocorreu um erro inesperado."
        assert res_5.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_6.json()["data"]) == 3
        assert res_6.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_6.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_6.json()["data"][0]["cpf"] == "43839402000"
        assert res_6.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_6.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_6.json()["data"][0]["genero"] == 1.0
        assert res_6.json()["data"][0]["racaCor"] == 2.0
        assert res_6.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_6.json()["data"][0]["telefone"] is None
        assert res_6.json()["data"][0]["nomeSocial"] is None
        assert res_6.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_6.json()["data"][0]["bairro"] == "Centro"
        assert res_6.json()["data"][0]["numero"] == "123"
        assert res_6.json()["data"][0]["cep"] == "01001000"
        assert res_6.json()["data"][0]["municipio"] == 2700409.0
        assert res_6.json()["data"][0]["uf"] == 27.0
        assert res_6.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_6.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_6.json()["data"][0]["situacaoAtiva"] == True
        assert res_6.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_6.json()["data"][0]["dataFim"] is None
        assert res_6.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_6.json()["data"][0]["matriculaRede"] == "56789"
        assert res_6.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_6.json()["data"][0]["inep"] == "27014088"
        assert len(res_6.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_6.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_6.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_6.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_6.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_6.json()["data"][1]["cpf"] == "33722248094"
        assert res_6.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_6.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_6.json()["data"][1]["genero"] == 1.0
        assert res_6.json()["data"][1]["racaCor"] == 2.0
        assert res_6.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_6.json()["data"][1]["telefone"] is None
        assert res_6.json()["data"][1]["nomeSocial"] is None
        assert res_6.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_6.json()["data"][1]["bairro"] == "Centro"
        assert res_6.json()["data"][1]["numero"] == "123"
        assert res_6.json()["data"][1]["cep"] == "01001000"
        assert res_6.json()["data"][1]["municipio"] == 2700409.0
        assert res_6.json()["data"][1]["uf"] == 27.0
        assert res_6.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_6.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_6.json()["data"][1]["situacaoAtiva"] == True
        assert res_6.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_6.json()["data"][1]["dataFim"] is None
        assert res_6.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_6.json()["data"][1]["matriculaRede"] == "56789"
        assert res_6.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_6.json()["data"][1]["inep"] == "27014088"
        assert len(res_6.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_6.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_6.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_6.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_6.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_6.json()["data"][2]["cpf"] == "31863200037"
        assert res_6.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_6.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_6.json()["data"][2]["genero"] == 1.0
        assert res_6.json()["data"][2]["racaCor"] == 2.0
        assert res_6.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_6.json()["data"][2]["telefone"] is None
        assert res_6.json()["data"][2]["nomeSocial"] is None
        assert res_6.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_6.json()["data"][2]["bairro"] == "Centro"
        assert res_6.json()["data"][2]["numero"] == "123"
        assert res_6.json()["data"][2]["cep"] == "01001000"
        assert res_6.json()["data"][2]["municipio"] == 2700409.0
        assert res_6.json()["data"][2]["uf"] == 27.0
        assert res_6.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_6.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_6.json()["data"][2]["situacaoAtiva"] == True
        assert res_6.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_6.json()["data"][2]["dataFim"] is None
        assert res_6.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_6.json()["data"][2]["matriculaRede"] == "56789"
        assert res_6.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_6.json()["data"][2]["inep"] == "27014088"
        assert len(res_6.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_6.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_6.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_6.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_6.json()["pagination"]["total"] == 3.0
        assert res_6.json()["pagination"]["count"] == 3.0
        assert res_6.json()["pagination"]["per_page"] == 10.0
        assert res_6.json()["pagination"]["current_page"] == 1.0
        assert res_6.json()["pagination"]["total_pages"] == 1.0
        assert res_6.json()["pagination"]["links"]["previous"] is None
        assert res_6.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_7.status_code == 422
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:36:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:35:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:35:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:34:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:32:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:32:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:31:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:31:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:29:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:29:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 08:27:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 08:25:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/15/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/16/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/17/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/18/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/19/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/20/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/21/dataEnvio'] String "2025-05-04 08:11:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/22/dataEnvio'] String "2025-05-04 08:09:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/23/dataEnvio'] String "2025-05-04 08:08:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/24/dataEnvio'] String "2025-05-04 08:07:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/25/dataEnvio'] String "2025-05-04 08:06:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/26/dataEnvio'] String "2025-05-04 08:03:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/27/dataEnvio'] String "2025-05-04 08:02:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/28/dataEnvio'] String "2025-05-04 08:02:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/29/dataEnvio'] String "2025-05-04 08:01:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/30/dataEnvio'] String "2025-05-04 08:00:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/31/dataEnvio'] String "2025-05-04 07:58:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/32/dataEnvio'] String "2025-05-04 07:55:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/33/dataEnvio'] String "2025-05-04 07:55:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/34/dataEnvio'] String "2025-05-04 07:55:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/35/dataEnvio'] String "2025-05-04 07:54:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/36/dataEnvio'] String "2025-05-04 07:53:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/37/dataEnvio'] String "2025-05-04 07:53:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/38/dataEnvio'] String "2025-05-04 07:53:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/39/dataEnvio'] String "2025-05-04 07:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/40/dataEnvio'] String "2025-05-04 07:53:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/41/dataEnvio'] String "2025-05-04 07:53:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/42/dataEnvio'] String "2025-05-04 07:53:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/43/dataEnvio'] String "2025-05-04 07:53:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/44/dataEnvio'] String "2025-05-04 07:53:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/45/dataEnvio'] String "2025-05-04 07:53:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/46/dataEnvio'] String "2025-05-04 07:52:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/47/dataEnvio'] String "2025-05-04 07:52:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/48/dataEnvio'] String "2025-05-04 07:52:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/49/dataEnvio'] String "2025-05-04 07:52:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/50/dataEnvio'] String "2025-05-04 07:52:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/51/dataEnvio'] String "2025-05-04 07:52:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/52/dataEnvio'] String "2025-05-04 07:52:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/53/dataEnvio'] String "2025-05-04 07:51:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/54/dataEnvio'] String "2025-05-04 07:51:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/55/dataEnvio'] String "2025-05-04 07:51:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/56/dataEnvio'] String "2025-05-04 07:51:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/57/dataEnvio'] String "2025-05-04 07:51:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/58/dataEnvio'] String "2025-05-04 07:49:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/59/dataEnvio'] String "2025-05-04 07:49:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/60/dataEnvio'] String "2025-05-04 07:48:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/61/dataEnvio'] String "2025-05-04 07:46:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/62/dataEnvio'] String "2025-05-04 07:46:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/63/dataEnvio'] String "2025-05-04 07:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/64/dataEnvio'] String "2025-05-04 07:46:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/65/dataEnvio'] String "2025-05-04 07:44:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/66/dataEnvio'] String "2025-05-04 07:43:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/67/dataEnvio'] String "2025-05-04 07:43:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/68/dataEnvio'] String "2025-05-04 07:43:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/69/dataEnvio'] String "2025-05-04 07:43:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/70/dataEnvio'] String "2025-05-04 07:43:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/71/dataEnvio'] String "2025-05-04 07:43:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/72/dataEnvio'] String "2025-05-04 07:43:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/73/dataEnvio'] String "2025-05-04 07:43:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/74/dataEnvio'] String "2025-05-04 07:42:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/75/dataEnvio'] String "2025-05-04 07:42:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/76/dataEnvio'] String "2025-05-04 07:42:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/77/dataEnvio'] String "2025-05-04 07:42:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/78/dataEnvio'] String "2025-05-04 07:42:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/79/dataEnvio'] String "2025-05-04 07:41:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/80/dataEnvio'] String "2025-05-04 07:39:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/81/dataEnvio'] String "2025-05-04 07:38:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/82/dataEnvio'] String "2025-05-04 07:38:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/83/dataEnvio'] String "2025-05-04 07:37:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/84/dataEnvio'] String "2025-05-04 07:37:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/85/dataEnvio'] String "2025-05-04 07:37:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/86/dataEnvio'] String "2025-05-04 07:37:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/87/dataEnvio'] String "2025-05-04 07:36:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/88/dataEnvio'] String "2025-05-04 07:36:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/89/dataEnvio'] String "2025-05-04 07:36:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/90/dataEnvio'] String "2025-05-04 07:36:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/91/dataEnvio'] String "2025-05-04 07:35:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/92/dataEnvio'] String "2025-05-04 07:35:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/93/dataEnvio'] String "2025-05-04 07:35:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/94/dataEnvio'] String "2025-05-04 07:34:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/95/dataEnvio'] String "2025-05-04 07:33:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/96/dataEnvio'] String "2025-05-04 07:33:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/97/dataEnvio'] String "2025-05-04 07:33:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/98/dataEnvio'] String "2025-05-04 07:33:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/99/dataEnvio'] String "2025-05-04 07:33:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/100/dataEnvio'] String "2025-05-04 07:33:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/101/dataEnvio'] String "2025-05-04 07:33:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/102/dataEnvio'] String "2025-05-04 07:33:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/103/dataEnvio'] String "2025-05-04 07:33:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/104/dataEnvio'] String "2025-05-04 07:33:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/105/dataEnvio'] String "2025-05-04 07:33:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/106/dataEnvio'] String "2025-05-04 07:32:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/107/dataEnvio'] String "2025-05-04 07:31:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/108/dataEnvio'] String "2025-05-04 07:31:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/109/dataEnvio'] String "2025-05-04 07:31:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/110/dataEnvio'] String "2025-05-04 07:31:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/111/dataEnvio'] String "2025-05-04 07:30:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/112/dataEnvio'] String "2025-05-04 07:29:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/113/dataEnvio'] String "2025-05-04 07:26:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/114/dataEnvio'] String "2025-05-04 07:25:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/115/dataEnvio'] String "2025-05-04 07:25:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/116/dataEnvio'] String "2025-05-04 07:25:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/117/dataEnvio'] String "2025-05-04 07:24:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/118/dataEnvio'] String "2025-05-04 07:24:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/119/dataEnvio'] String "2025-05-04 07:24:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/120/dataEnvio'] String "2025-05-04 07:24:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/121/dataEnvio'] String "2025-05-04 07:24:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/122/dataEnvio'] String "2025-05-04 07:24:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/123/dataEnvio'] String "2025-05-04 07:23:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/124/dataEnvio'] String "2025-05-04 07:23:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/125/dataEnvio'] String "2025-05-04 07:23:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/126/dataEnvio'] String "2025-05-04 07:19:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/127/dataEnvio'] String "2025-05-04 07:19:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/128/dataEnvio'] String "2025-05-04 07:17:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/129/dataEnvio'] String "2025-05-04 07:16:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/130/dataEnvio'] String "2025-05-04 07:16:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/131/dataEnvio'] String "2025-05-04 07:15:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/132/dataEnvio'] String "2025-05-04 07:15:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/133/dataEnvio'] String "2025-05-04 07:15:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/134/dataEnvio'] String "2025-05-04 07:15:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/135/dataEnvio'] String "2025-05-04 07:14:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/136/dataEnvio'] String "2025-05-04 07:14:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/137/dataEnvio'] String "2025-05-04 07:13:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/138/dataEnvio'] String "2025-05-04 07:12:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/139/dataEnvio'] String "2025-05-04 07:09:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/140/dataEnvio'] String "2025-05-04 07:06:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/141/dataEnvio'] String "2025-05-04 07:03:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/142/dataEnvio'] String "2025-05-04 07:02:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/143/dataEnvio'] String "2025-05-04 07:02:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/144/dataEnvio'] String "2025-05-04 07:01:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/145/dataEnvio'] String "2025-05-04 07:00:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/146/dataEnvio'] String "2025-05-04 06:59:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/147/dataEnvio'] String "2025-05-04 06:59:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/148/dataEnvio'] String "2025-05-04 06:57:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/149/dataEnvio'] String "2025-05-04 06:57:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/150/dataEnvio'] String "2025-05-04 06:54:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/151/dataEnvio'] String "2025-05-04 06:53:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/152/dataEnvio'] String "2025-05-04 06:52:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/153/dataEnvio'] String "2025-05-04 06:49:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/154/dataEnvio'] String "2025-05-04 06:46:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/155/dataEnvio'] String "2025-05-04 06:44:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/156/dataEnvio'] String "2025-05-04 06:44:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/157/dataEnvio'] String "2025-05-04 06:44:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/158/dataEnvio'] String "2025-05-04 06:43:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/159/dataEnvio'] String "2025-05-04 06:43:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/160/dataEnvio'] String "2025-05-04 06:37:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/161/dataEnvio'] String "2025-05-04 06:37:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/162/dataEnvio'] String "2025-05-04 06:36:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/163/dataEnvio'] String "2025-05-04 06:35:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/164/dataEnvio'] String "2025-05-04 06:31:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/165/dataEnvio'] String "2025-05-04 06:29:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/166/dataEnvio'] String "2025-05-04 06:29:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/167/dataEnvio'] String "2025-05-04 06:29:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/168/dataEnvio'] String "2025-05-04 06:28:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/169/dataEnvio'] String "2025-05-04 06:27:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/170/dataEnvio'] String "2025-05-04 06:26:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/171/dataEnvio'] String "2025-05-04 06:25:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/172/dataEnvio'] String "2025-05-04 06:25:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/173/dataEnvio'] String "2025-05-04 06:25:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/174/dataEnvio'] String "2025-05-04 06:23:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/175/dataEnvio'] String "2025-05-04 06:21:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/176/dataEnvio'] String "2025-05-04 06:20:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/177/dataEnvio'] String "2025-05-04 06:20:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/178/dataEnvio'] String "2025-05-04 06:18:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/179/dataEnvio'] String "2025-05-04 06:17:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/180/dataEnvio'] String "2025-05-04 06:17:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/181/dataEnvio'] String "2025-05-04 06:13:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/182/dataEnvio'] String "2025-05-04 06:12:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/183/dataEnvio'] String "2025-05-04 06:12:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/184/dataEnvio'] String "2025-05-04 06:09:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/185/dataEnvio'] String "2025-05-04 06:07:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/186/dataEnvio'] String "2025-05-04 06:02:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/187/dataEnvio'] String "2025-05-04 05:54:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/188/dataEnvio'] String "2025-05-04 05:51:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/189/dataEnvio'] String "2025-05-04 05:51:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/190/dataEnvio'] String "2025-05-04 05:50:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/191/dataEnvio'] String "2025-05-04 05:48:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/192/dataEnvio'] String "2025-05-04 05:46:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/193/dataEnvio'] String "2025-05-04 05:45:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/194/dataEnvio'] String "2025-05-04 05:44:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/195/dataEnvio'] String "2025-05-04 05:43:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/196/dataEnvio'] String "2025-05-04 05:42:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/197/dataEnvio'] String "2025-05-04 05:42:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/198/dataEnvio'] String "2025-05-04 05:42:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/199/dataEnvio'] String "2025-05-04 05:40:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/200/dataEnvio'] String "2025-05-04 05:39:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/201/dataEnvio'] String "2025-05-04 05:39:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/202/dataEnvio'] String "2025-05-04 05:37:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/203/dataEnvio'] String "2025-05-04 05:36:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/204/dataEnvio'] String "2025-05-04 05:34:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/205/dataEnvio'] String "2025-05-04 05:33:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/206/dataEnvio'] String "2025-05-04 05:33:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/207/dataEnvio'] String "2025-05-04 05:32:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/208/dataEnvio'] String "2025-05-04 05:32:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/209/dataEnvio'] String "2025-05-04 05:32:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/210/dataEnvio'] String "2025-05-04 05:32:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/211/dataEnvio'] String "2025-05-04 05:32:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/212/dataEnvio'] String "2025-05-04 05:32:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/213/dataEnvio'] String "2025-05-04 05:32:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/214/dataEnvio'] String "2025-05-04 05:32:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/215/dataEnvio'] String "2025-05-04 05:32:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/216/dataEnvio'] String "2025-05-04 05:32:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/217/dataEnvio'] String "2025-05-04 05:32:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/218/dataEnvio'] String "2025-05-04 05:32:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/219/dataEnvio'] String "2025-05-04 05:32:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/220/dataEnvio'] String "2025-05-04 05:32:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/221/dataEnvio'] String "2025-05-04 05:31:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/222/dataEnvio'] String "2025-05-04 05:31:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/223/dataEnvio'] String "2025-05-04 05:31:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/224/dataEnvio'] String "2025-05-04 05:31:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/225/dataEnvio'] String "2025-05-04 05:30:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/226/dataEnvio'] String "2025-05-04 05:30:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/227/dataEnvio'] String "2025-05-04 05:30:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/228/dataEnvio'] String "2025-05-04 05:30:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/229/dataEnvio'] String "2025-05-04 05:30:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/230/dataEnvio'] String "2025-05-04 05:30:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/231/dataEnvio'] String "2025-05-04 05:30:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/232/dataEnvio'] String "2025-05-04 05:30:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/233/dataEnvio'] String "2025-05-04 05:29:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/234/dataEnvio'] String "2025-05-04 05:29:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/235/dataEnvio'] String "2025-05-04 05:29:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/236/dataEnvio'] String "2025-05-04 05:29:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/237/dataEnvio'] String "2025-05-04 05:28:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/238/dataEnvio'] String "2025-05-04 05:27:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/239/dataEnvio'] String "2025-05-04 05:26:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/240/dataEnvio'] String "2025-05-04 05:26:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/241/dataEnvio'] String "2025-05-04 05:26:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/242/dataEnvio'] String "2025-05-04 05:26:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/243/dataEnvio'] String "2025-05-04 05:26:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/244/dataEnvio'] String "2025-05-04 05:26:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/245/dataEnvio'] String "2025-05-04 05:26:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/246/dataEnvio'] String "2025-05-04 05:26:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/247/dataEnvio'] String "2025-05-04 05:26:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/248/dataEnvio'] String "2025-05-04 05:24:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/249/dataEnvio'] String "2025-05-04 05:21:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/250/dataEnvio'] String "2025-05-04 05:20:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/251/dataEnvio'] String "2025-05-04 05:20:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/252/dataEnvio'] String "2025-05-04 05:20:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/253/dataEnvio'] String "2025-05-04 05:20:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/254/dataEnvio'] String "2025-05-04 05:20:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/255/dataEnvio'] String "2025-05-04 05:20:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/256/dataEnvio'] String "2025-05-04 05:20:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/257/dataEnvio'] String "2025-05-04 05:19:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/258/dataEnvio'] String "2025-05-04 05:19:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/259/dataEnvio'] String "2025-05-04 05:19:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/260/dataEnvio'] String "2025-05-04 05:19:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/261/dataEnvio'] String "2025-05-04 05:19:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/262/dataEnvio'] String "2025-05-04 05:19:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/263/dataEnvio'] String "2025-05-04 05:19:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/264/dataEnvio'] String "2025-05-04 05:19:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/265/dataEnvio'] String "2025-05-04 05:19:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/266/dataEnvio'] String "2025-05-04 05:18:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/267/dataEnvio'] String "2025-05-04 05:18:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/268/dataEnvio'] String "2025-05-04 05:18:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/269/dataEnvio'] String "2025-05-04 05:18:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/270/dataEnvio'] String "2025-05-04 05:18:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/271/dataEnvio'] String "2025-05-04 05:18:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/272/dataEnvio'] String "2025-05-04 05:18:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/273/dataEnvio'] String "2025-05-04 05:17:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/274/dataEnvio'] String "2025-05-04 05:17:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/275/dataEnvio'] String "2025-05-04 05:17:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/276/dataEnvio'] String "2025-05-04 05:16:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/277/dataEnvio'] String "2025-05-04 05:16:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/278/dataEnvio'] String "2025-05-04 05:15:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/279/dataEnvio'] String "2025-05-04 05:15:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/280/dataEnvio'] String "2025-05-04 05:15:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/281/dataEnvio'] String "2025-05-04 05:15:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/282/dataEnvio'] String "2025-05-04 05:15:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/283/dataEnvio'] String "2025-05-04 05:15:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/284/dataEnvio'] String "2025-05-04 05:15:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/285/dataEnvio'] String "2025-05-04 05:15:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/286/dataEnvio'] String "2025-05-04 05:15:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/287/dataEnvio'] String "2025-05-04 05:15:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/288/dataEnvio'] String "2025-05-04 05:14:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/289/dataEnvio'] String "2025-05-04 05:14:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/290/dataEnvio'] String "2025-05-04 05:14:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/291/dataEnvio'] String "2025-05-04 05:14:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/292/dataEnvio'] String "2025-05-04 05:13:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/293/dataEnvio'] String "2025-05-04 05:12:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/294/dataEnvio'] String "2025-05-04 05:11:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/295/dataEnvio'] String "2025-05-04 05:11:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/296/dataEnvio'] String "2025-05-04 05:11:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/297/dataEnvio'] String "2025-05-04 05:11:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/298/dataEnvio'] String "2025-05-04 05:11:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/299/dataEnvio'] String "2025-05-04 05:10:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/300/dataEnvio'] String "2025-05-04 05:10:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/301/dataEnvio'] String "2025-05-04 05:10:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/302/dataEnvio'] String "2025-05-04 05:10:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/303/dataEnvio'] String "2025-05-04 05:10:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/304/dataEnvio'] String "2025-05-04 05:10:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/305/dataEnvio'] String "2025-05-04 05:10:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/306/dataEnvio'] String "2025-05-04 05:09:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/307/dataEnvio'] String "2025-05-04 05:09:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/308/dataEnvio'] String "2025-05-04 05:09:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/309/dataEnvio'] String "2025-05-04 05:09:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/310/dataEnvio'] String "2025-05-04 05:08:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/311/dataEnvio'] String "2025-05-04 05:08:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/312/dataEnvio'] String "2025-05-04 05:06:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/313/dataEnvio'] String "2025-05-04 05:06:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/314/dataEnvio'] String "2025-05-04 05:06:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/315/dataEnvio'] String "2025-05-04 05:05:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/316/dataEnvio'] String "2025-05-04 05:05:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/317/dataEnvio'] String "2025-05-04 05:05:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/318/dataEnvio'] String "2025-05-04 05:05:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/319/dataEnvio'] String "2025-05-04 05:04:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/320/dataEnvio'] String "2025-05-04 05:04:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/321/dataEnvio'] String "2025-05-04 05:04:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/322/dataEnvio'] String "2025-05-04 05:03:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/323/dataEnvio'] String "2025-05-04 05:02:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/324/dataEnvio'] String "2025-05-04 05:02:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/325/dataEnvio'] String "2025-05-04 05:02:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/326/dataEnvio'] String "2025-05-04 05:02:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/327/dataEnvio'] String "2025-05-04 05:02:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/328/dataEnvio'] String "2025-05-04 05:01:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/329/dataEnvio'] String "2025-05-04 05:00:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/330/dataEnvio'] String "2025-05-04 05:00:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/331/dataEnvio'] String "2025-05-04 04:59:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/332/dataEnvio'] String "2025-05-04 04:59:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/333/dataEnvio'] String "2025-05-04 04:58:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/334/dataEnvio'] String "2025-05-04 04:58:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/335/dataEnvio'] String "2025-05-04 04:58:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/336/dataEnvio'] String "2025-05-04 04:58:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/337/dataEnvio'] String "2025-05-04 04:57:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/338/dataEnvio'] String "2025-05-04 04:56:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/339/dataEnvio'] String "2025-05-04 04:56:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/340/dataEnvio'] String "2025-05-04 04:55:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/341/dataEnvio'] String "2025-05-04 04:54:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/342/dataEnvio'] String "2025-05-04 04:54:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/343/dataEnvio'] String "2025-05-04 04:54:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/344/dataEnvio'] String "2025-05-04 04:54:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/345/dataEnvio'] String "2025-05-04 04:54:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/346/dataEnvio'] String "2025-05-04 04:54:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/347/dataEnvio'] String "2025-05-04 04:54:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/348/dataEnvio'] String "2025-05-04 04:53:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/349/dataEnvio'] String "2025-05-04 04:53:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/350/dataEnvio'] String "2025-05-04 04:52:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/351/dataEnvio'] String "2025-05-04 04:50:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/352/dataEnvio'] String "2025-05-04 04:49:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/353/dataEnvio'] String "2025-05-04 04:48:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/354/dataEnvio'] String "2025-05-04 04:46:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/355/dataEnvio'] String "2025-05-04 04:45:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/356/dataEnvio'] String "2025-05-04 04:45:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/357/dataEnvio'] String "2025-05-04 04:41:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/358/dataEnvio'] String "2025-05-04 04:40:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/359/dataEnvio'] String "2025-05-04 04:38:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/360/dataEnvio'] String "2025-05-04 04:33:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/361/dataEnvio'] String "2025-05-04 04:33:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/362/dataEnvio'] String "2025-05-04 04:29:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/363/dataEnvio'] String "2025-05-04 04:28:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/364/dataEnvio'] String "2025-05-04 04:27:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/365/dataEnvio'] String "2025-05-04 04:26:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/366/dataEnvio'] String "2025-05-04 04:24:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/367/dataEnvio'] String "2025-05-04 04:23:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/368/dataEnvio'] String "2025-05-04 04:21:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/369/dataEnvio'] String "2025-05-04 04:21:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/370/dataEnvio'] String "2025-05-04 04:19:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/371/dataEnvio'] String "2025-05-04 04:18:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/372/dataEnvio'] String "2025-05-04 04:18:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/373/dataEnvio'] String "2025-05-04 04:13:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=374",
                    headers=headers)
        
        assert res_8.status_code == 200
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == True
        assert res_8.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_8.json()["data"]) == 374
        assert res_8.json()["data"][0]["dataEnvio"] == "2025-05-04 08:36:51"
        assert res_8.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_8.json()["data"][1]["dataEnvio"] == "2025-05-04 08:35:36"
        assert res_8.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_8.json()["data"][2]["dataEnvio"] == "2025-05-04 08:35:02"
        assert res_8.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 371 elements. This limit of 3 elements can be increased in the configurations
        assert res_8.json()["pagination"]["total"] == 3158.0
        assert res_8.json()["pagination"]["count"] == 374.0
        assert res_8.json()["pagination"]["per_page"] == 374.0
        assert res_8.json()["pagination"]["current_page"] == 1.0
        assert res_8.json()["pagination"]["total_pages"] == 9.0
        assert res_8.json()["pagination"]["links"]["previous"] is None
        assert res_8.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Response status 401 not defined for path '/v1/estudantes/inep/{inep}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_9 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/29182034?" + 
                    "situacao_matricula=ATIVAS&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_9.status_code == 401
        assert "application/json" in res_9.headers["content-type"]
        assert res_9.json()["success"] == False
        assert res_9.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (200) GET:/v1/profissionais/lote
    # 3 - (201) POST:/v1/profissionais/lote
    # 4 - (404) GET:/v1/profissionais/{cpf}
    # 5 - (200) GET:/v1/profissionais
    # 6 - (200) GET:/v1/estudantes/lote
    # Found 492 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   2014
    @timeout_decorator.timeout(60)
    def test_35_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"55633003071\", " + \
            " \"cpf\": \"07113251706\", " + \
            " \"dataNascimento\": \"XVTJK\", " + \
            " \"genero\": 6, " + \
            " \"email\": \"aaron.marcelo.rocha.filho@fake.com\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 913 " + \
            " ], " + \
            " \"sexo\": \"1\", " + \
            " \"numeroNIS\": \"25964225838\", " + \
            " \"orgaoEmissor\": \"SSP-RJ\", " + \
            " \"cnh\": \"01354673004\", " + \
            " \"instituicao\": 141221, " + \
            " \"inep\": 32020341, " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"anoMatricula\": 2025 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:35:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:34:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:32:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:32:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:31:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:31:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:29:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:29:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:27:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:25:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/15/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/16/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/17/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/18/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/19/dataEnvio'] String "2025-05-04 08:11:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/20/dataEnvio'] String "2025-05-04 08:09:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/21/dataEnvio'] String "2025-05-04 08:08:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/22/dataEnvio'] String "2025-05-04 08:07:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/23/dataEnvio'] String "2025-05-04 08:06:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/24/dataEnvio'] String "2025-05-04 08:03:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/25/dataEnvio'] String "2025-05-04 08:02:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/26/dataEnvio'] String "2025-05-04 08:02:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/27/dataEnvio'] String "2025-05-04 08:01:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/28/dataEnvio'] String "2025-05-04 08:00:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/29/dataEnvio'] String "2025-05-04 07:58:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/30/dataEnvio'] String "2025-05-04 07:55:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/31/dataEnvio'] String "2025-05-04 07:55:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/32/dataEnvio'] String "2025-05-04 07:55:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/33/dataEnvio'] String "2025-05-04 07:54:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/34/dataEnvio'] String "2025-05-04 07:53:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/35/dataEnvio'] String "2025-05-04 07:53:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/36/dataEnvio'] String "2025-05-04 07:53:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/37/dataEnvio'] String "2025-05-04 07:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/38/dataEnvio'] String "2025-05-04 07:53:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/39/dataEnvio'] String "2025-05-04 07:53:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/40/dataEnvio'] String "2025-05-04 07:53:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/41/dataEnvio'] String "2025-05-04 07:53:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/42/dataEnvio'] String "2025-05-04 07:53:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/43/dataEnvio'] String "2025-05-04 07:53:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/44/dataEnvio'] String "2025-05-04 07:52:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/45/dataEnvio'] String "2025-05-04 07:52:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/46/dataEnvio'] String "2025-05-04 07:52:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/47/dataEnvio'] String "2025-05-04 07:52:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/48/dataEnvio'] String "2025-05-04 07:52:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/49/dataEnvio'] String "2025-05-04 07:52:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/50/dataEnvio'] String "2025-05-04 07:52:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/51/dataEnvio'] String "2025-05-04 07:51:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/52/dataEnvio'] String "2025-05-04 07:51:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/53/dataEnvio'] String "2025-05-04 07:51:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/54/dataEnvio'] String "2025-05-04 07:51:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/55/dataEnvio'] String "2025-05-04 07:51:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/56/dataEnvio'] String "2025-05-04 07:49:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/57/dataEnvio'] String "2025-05-04 07:49:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/58/dataEnvio'] String "2025-05-04 07:48:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/59/dataEnvio'] String "2025-05-04 07:46:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/60/dataEnvio'] String "2025-05-04 07:46:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/61/dataEnvio'] String "2025-05-04 07:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/62/dataEnvio'] String "2025-05-04 07:46:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/63/dataEnvio'] String "2025-05-04 07:44:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/64/dataEnvio'] String "2025-05-04 07:43:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/65/dataEnvio'] String "2025-05-04 07:43:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/66/dataEnvio'] String "2025-05-04 07:43:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/67/dataEnvio'] String "2025-05-04 07:43:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/68/dataEnvio'] String "2025-05-04 07:43:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/69/dataEnvio'] String "2025-05-04 07:43:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/70/dataEnvio'] String "2025-05-04 07:43:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/71/dataEnvio'] String "2025-05-04 07:43:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/72/dataEnvio'] String "2025-05-04 07:42:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/73/dataEnvio'] String "2025-05-04 07:42:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/74/dataEnvio'] String "2025-05-04 07:42:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/75/dataEnvio'] String "2025-05-04 07:42:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/76/dataEnvio'] String "2025-05-04 07:42:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/77/dataEnvio'] String "2025-05-04 07:41:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/78/dataEnvio'] String "2025-05-04 07:39:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/79/dataEnvio'] String "2025-05-04 07:38:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/80/dataEnvio'] String "2025-05-04 07:38:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/81/dataEnvio'] String "2025-05-04 07:37:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/82/dataEnvio'] String "2025-05-04 07:37:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/83/dataEnvio'] String "2025-05-04 07:37:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/84/dataEnvio'] String "2025-05-04 07:37:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/85/dataEnvio'] String "2025-05-04 07:36:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/86/dataEnvio'] String "2025-05-04 07:36:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/87/dataEnvio'] String "2025-05-04 07:36:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/88/dataEnvio'] String "2025-05-04 07:36:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/89/dataEnvio'] String "2025-05-04 07:35:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/90/dataEnvio'] String "2025-05-04 07:35:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/91/dataEnvio'] String "2025-05-04 07:35:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/92/dataEnvio'] String "2025-05-04 07:34:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/93/dataEnvio'] String "2025-05-04 07:33:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/94/dataEnvio'] String "2025-05-04 07:33:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/95/dataEnvio'] String "2025-05-04 07:33:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/96/dataEnvio'] String "2025-05-04 07:33:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/97/dataEnvio'] String "2025-05-04 07:33:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/98/dataEnvio'] String "2025-05-04 07:33:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/99/dataEnvio'] String "2025-05-04 07:33:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/100/dataEnvio'] String "2025-05-04 07:33:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/101/dataEnvio'] String "2025-05-04 07:33:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/102/dataEnvio'] String "2025-05-04 07:33:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/103/dataEnvio'] String "2025-05-04 07:33:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/104/dataEnvio'] String "2025-05-04 07:32:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/105/dataEnvio'] String "2025-05-04 07:31:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/106/dataEnvio'] String "2025-05-04 07:31:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/107/dataEnvio'] String "2025-05-04 07:31:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/108/dataEnvio'] String "2025-05-04 07:31:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/109/dataEnvio'] String "2025-05-04 07:30:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/110/dataEnvio'] String "2025-05-04 07:29:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/111/dataEnvio'] String "2025-05-04 07:26:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/112/dataEnvio'] String "2025-05-04 07:25:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/113/dataEnvio'] String "2025-05-04 07:25:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/114/dataEnvio'] String "2025-05-04 07:25:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/115/dataEnvio'] String "2025-05-04 07:24:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/116/dataEnvio'] String "2025-05-04 07:24:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/117/dataEnvio'] String "2025-05-04 07:24:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/118/dataEnvio'] String "2025-05-04 07:24:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/119/dataEnvio'] String "2025-05-04 07:24:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/120/dataEnvio'] String "2025-05-04 07:24:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/121/dataEnvio'] String "2025-05-04 07:23:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/122/dataEnvio'] String "2025-05-04 07:23:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/123/dataEnvio'] String "2025-05-04 07:23:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/124/dataEnvio'] String "2025-05-04 07:19:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/125/dataEnvio'] String "2025-05-04 07:19:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/126/dataEnvio'] String "2025-05-04 07:17:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/127/dataEnvio'] String "2025-05-04 07:16:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/128/dataEnvio'] String "2025-05-04 07:16:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/129/dataEnvio'] String "2025-05-04 07:15:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/130/dataEnvio'] String "2025-05-04 07:15:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/131/dataEnvio'] String "2025-05-04 07:15:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/132/dataEnvio'] String "2025-05-04 07:15:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/133/dataEnvio'] String "2025-05-04 07:14:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/134/dataEnvio'] String "2025-05-04 07:14:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/135/dataEnvio'] String "2025-05-04 07:13:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/136/dataEnvio'] String "2025-05-04 07:12:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/137/dataEnvio'] String "2025-05-04 07:09:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/138/dataEnvio'] String "2025-05-04 07:06:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/139/dataEnvio'] String "2025-05-04 07:03:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/140/dataEnvio'] String "2025-05-04 07:02:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/141/dataEnvio'] String "2025-05-04 07:02:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/142/dataEnvio'] String "2025-05-04 07:01:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/143/dataEnvio'] String "2025-05-04 07:00:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/144/dataEnvio'] String "2025-05-04 06:59:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/145/dataEnvio'] String "2025-05-04 06:59:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/146/dataEnvio'] String "2025-05-04 06:57:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/147/dataEnvio'] String "2025-05-04 06:57:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/148/dataEnvio'] String "2025-05-04 06:54:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/149/dataEnvio'] String "2025-05-04 06:53:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/150/dataEnvio'] String "2025-05-04 06:52:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/151/dataEnvio'] String "2025-05-04 06:49:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/152/dataEnvio'] String "2025-05-04 06:46:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/153/dataEnvio'] String "2025-05-04 06:44:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/154/dataEnvio'] String "2025-05-04 06:44:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/155/dataEnvio'] String "2025-05-04 06:44:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/156/dataEnvio'] String "2025-05-04 06:43:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/157/dataEnvio'] String "2025-05-04 06:43:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/158/dataEnvio'] String "2025-05-04 06:37:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/159/dataEnvio'] String "2025-05-04 06:37:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/160/dataEnvio'] String "2025-05-04 06:36:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/161/dataEnvio'] String "2025-05-04 06:35:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/162/dataEnvio'] String "2025-05-04 06:31:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/163/dataEnvio'] String "2025-05-04 06:29:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/164/dataEnvio'] String "2025-05-04 06:29:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/165/dataEnvio'] String "2025-05-04 06:29:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/166/dataEnvio'] String "2025-05-04 06:28:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/167/dataEnvio'] String "2025-05-04 06:27:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/168/dataEnvio'] String "2025-05-04 06:26:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/169/dataEnvio'] String "2025-05-04 06:25:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/170/dataEnvio'] String "2025-05-04 06:25:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/171/dataEnvio'] String "2025-05-04 06:25:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/172/dataEnvio'] String "2025-05-04 06:23:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/173/dataEnvio'] String "2025-05-04 06:21:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/174/dataEnvio'] String "2025-05-04 06:20:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/175/dataEnvio'] String "2025-05-04 06:20:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/176/dataEnvio'] String "2025-05-04 06:18:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/177/dataEnvio'] String "2025-05-04 06:17:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/178/dataEnvio'] String "2025-05-04 06:17:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/179/dataEnvio'] String "2025-05-04 06:13:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/180/dataEnvio'] String "2025-05-04 06:12:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/181/dataEnvio'] String "2025-05-04 06:12:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/182/dataEnvio'] String "2025-05-04 06:09:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/183/dataEnvio'] String "2025-05-04 06:07:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/184/dataEnvio'] String "2025-05-04 06:02:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/185/dataEnvio'] String "2025-05-04 05:54:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/186/dataEnvio'] String "2025-05-04 05:51:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/187/dataEnvio'] String "2025-05-04 05:51:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/188/dataEnvio'] String "2025-05-04 05:50:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/189/dataEnvio'] String "2025-05-04 05:48:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/190/dataEnvio'] String "2025-05-04 05:46:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/191/dataEnvio'] String "2025-05-04 05:45:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/192/dataEnvio'] String "2025-05-04 05:44:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/193/dataEnvio'] String "2025-05-04 05:43:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/194/dataEnvio'] String "2025-05-04 05:42:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/195/dataEnvio'] String "2025-05-04 05:42:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/196/dataEnvio'] String "2025-05-04 05:42:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/197/dataEnvio'] String "2025-05-04 05:40:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/198/dataEnvio'] String "2025-05-04 05:39:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/199/dataEnvio'] String "2025-05-04 05:39:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/200/dataEnvio'] String "2025-05-04 05:37:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/201/dataEnvio'] String "2025-05-04 05:36:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/202/dataEnvio'] String "2025-05-04 05:34:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/203/dataEnvio'] String "2025-05-04 05:33:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/204/dataEnvio'] String "2025-05-04 05:33:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/205/dataEnvio'] String "2025-05-04 05:32:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/206/dataEnvio'] String "2025-05-04 05:32:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/207/dataEnvio'] String "2025-05-04 05:32:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/208/dataEnvio'] String "2025-05-04 05:32:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/209/dataEnvio'] String "2025-05-04 05:32:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/210/dataEnvio'] String "2025-05-04 05:32:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/211/dataEnvio'] String "2025-05-04 05:32:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/212/dataEnvio'] String "2025-05-04 05:32:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/213/dataEnvio'] String "2025-05-04 05:32:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/214/dataEnvio'] String "2025-05-04 05:32:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/215/dataEnvio'] String "2025-05-04 05:32:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/216/dataEnvio'] String "2025-05-04 05:32:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/217/dataEnvio'] String "2025-05-04 05:32:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/218/dataEnvio'] String "2025-05-04 05:32:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/219/dataEnvio'] String "2025-05-04 05:31:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/220/dataEnvio'] String "2025-05-04 05:31:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/221/dataEnvio'] String "2025-05-04 05:31:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/222/dataEnvio'] String "2025-05-04 05:31:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/223/dataEnvio'] String "2025-05-04 05:30:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/224/dataEnvio'] String "2025-05-04 05:30:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/225/dataEnvio'] String "2025-05-04 05:30:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/226/dataEnvio'] String "2025-05-04 05:30:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/227/dataEnvio'] String "2025-05-04 05:30:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/228/dataEnvio'] String "2025-05-04 05:30:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/229/dataEnvio'] String "2025-05-04 05:30:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/230/dataEnvio'] String "2025-05-04 05:30:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/231/dataEnvio'] String "2025-05-04 05:29:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/232/dataEnvio'] String "2025-05-04 05:29:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/233/dataEnvio'] String "2025-05-04 05:29:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/234/dataEnvio'] String "2025-05-04 05:29:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/235/dataEnvio'] String "2025-05-04 05:28:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/236/dataEnvio'] String "2025-05-04 05:27:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/237/dataEnvio'] String "2025-05-04 05:26:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/238/dataEnvio'] String "2025-05-04 05:26:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/239/dataEnvio'] String "2025-05-04 05:26:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/240/dataEnvio'] String "2025-05-04 05:26:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/241/dataEnvio'] String "2025-05-04 05:26:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/242/dataEnvio'] String "2025-05-04 05:26:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/243/dataEnvio'] String "2025-05-04 05:26:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/244/dataEnvio'] String "2025-05-04 05:26:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/245/dataEnvio'] String "2025-05-04 05:26:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/246/dataEnvio'] String "2025-05-04 05:24:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/247/dataEnvio'] String "2025-05-04 05:21:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/248/dataEnvio'] String "2025-05-04 05:20:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/249/dataEnvio'] String "2025-05-04 05:20:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/250/dataEnvio'] String "2025-05-04 05:20:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/251/dataEnvio'] String "2025-05-04 05:20:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/252/dataEnvio'] String "2025-05-04 05:20:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/253/dataEnvio'] String "2025-05-04 05:20:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/254/dataEnvio'] String "2025-05-04 05:20:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/255/dataEnvio'] String "2025-05-04 05:19:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/256/dataEnvio'] String "2025-05-04 05:19:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/257/dataEnvio'] String "2025-05-04 05:19:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/258/dataEnvio'] String "2025-05-04 05:19:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/259/dataEnvio'] String "2025-05-04 05:19:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/260/dataEnvio'] String "2025-05-04 05:19:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/261/dataEnvio'] String "2025-05-04 05:19:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/262/dataEnvio'] String "2025-05-04 05:19:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/263/dataEnvio'] String "2025-05-04 05:19:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/264/dataEnvio'] String "2025-05-04 05:18:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/265/dataEnvio'] String "2025-05-04 05:18:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/266/dataEnvio'] String "2025-05-04 05:18:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/267/dataEnvio'] String "2025-05-04 05:18:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/268/dataEnvio'] String "2025-05-04 05:18:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/269/dataEnvio'] String "2025-05-04 05:18:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/270/dataEnvio'] String "2025-05-04 05:18:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/271/dataEnvio'] String "2025-05-04 05:17:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/272/dataEnvio'] String "2025-05-04 05:17:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/273/dataEnvio'] String "2025-05-04 05:17:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/274/dataEnvio'] String "2025-05-04 05:16:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/275/dataEnvio'] String "2025-05-04 05:16:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/276/dataEnvio'] String "2025-05-04 05:15:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/277/dataEnvio'] String "2025-05-04 05:15:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/278/dataEnvio'] String "2025-05-04 05:15:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/279/dataEnvio'] String "2025-05-04 05:15:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/280/dataEnvio'] String "2025-05-04 05:15:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/281/dataEnvio'] String "2025-05-04 05:15:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/282/dataEnvio'] String "2025-05-04 05:15:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/283/dataEnvio'] String "2025-05-04 05:15:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/284/dataEnvio'] String "2025-05-04 05:15:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/285/dataEnvio'] String "2025-05-04 05:15:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/286/dataEnvio'] String "2025-05-04 05:14:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/287/dataEnvio'] String "2025-05-04 05:14:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/288/dataEnvio'] String "2025-05-04 05:14:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/289/dataEnvio'] String "2025-05-04 05:14:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/290/dataEnvio'] String "2025-05-04 05:13:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/291/dataEnvio'] String "2025-05-04 05:12:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/292/dataEnvio'] String "2025-05-04 05:11:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/293/dataEnvio'] String "2025-05-04 05:11:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/294/dataEnvio'] String "2025-05-04 05:11:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/295/dataEnvio'] String "2025-05-04 05:11:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/296/dataEnvio'] String "2025-05-04 05:11:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/297/dataEnvio'] String "2025-05-04 05:10:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/298/dataEnvio'] String "2025-05-04 05:10:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/299/dataEnvio'] String "2025-05-04 05:10:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/300/dataEnvio'] String "2025-05-04 05:10:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/301/dataEnvio'] String "2025-05-04 05:10:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/302/dataEnvio'] String "2025-05-04 05:10:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/303/dataEnvio'] String "2025-05-04 05:10:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/304/dataEnvio'] String "2025-05-04 05:09:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/305/dataEnvio'] String "2025-05-04 05:09:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/306/dataEnvio'] String "2025-05-04 05:09:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/307/dataEnvio'] String "2025-05-04 05:09:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/308/dataEnvio'] String "2025-05-04 05:08:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/309/dataEnvio'] String "2025-05-04 05:08:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/310/dataEnvio'] String "2025-05-04 05:06:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/311/dataEnvio'] String "2025-05-04 05:06:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/312/dataEnvio'] String "2025-05-04 05:06:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/313/dataEnvio'] String "2025-05-04 05:05:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/314/dataEnvio'] String "2025-05-04 05:05:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/315/dataEnvio'] String "2025-05-04 05:05:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/316/dataEnvio'] String "2025-05-04 05:05:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/317/dataEnvio'] String "2025-05-04 05:04:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/318/dataEnvio'] String "2025-05-04 05:04:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/319/dataEnvio'] String "2025-05-04 05:04:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/320/dataEnvio'] String "2025-05-04 05:03:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/321/dataEnvio'] String "2025-05-04 05:02:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/322/dataEnvio'] String "2025-05-04 05:02:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/323/dataEnvio'] String "2025-05-04 05:02:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/324/dataEnvio'] String "2025-05-04 05:02:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/325/dataEnvio'] String "2025-05-04 05:02:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/326/dataEnvio'] String "2025-05-04 05:01:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/327/dataEnvio'] String "2025-05-04 05:00:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/328/dataEnvio'] String "2025-05-04 05:00:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/329/dataEnvio'] String "2025-05-04 04:59:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/330/dataEnvio'] String "2025-05-04 04:59:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/331/dataEnvio'] String "2025-05-04 04:58:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/332/dataEnvio'] String "2025-05-04 04:58:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/333/dataEnvio'] String "2025-05-04 04:58:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/334/dataEnvio'] String "2025-05-04 04:58:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/335/dataEnvio'] String "2025-05-04 04:57:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/336/dataEnvio'] String "2025-05-04 04:56:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/337/dataEnvio'] String "2025-05-04 04:56:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/338/dataEnvio'] String "2025-05-04 04:55:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/339/dataEnvio'] String "2025-05-04 04:54:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/340/dataEnvio'] String "2025-05-04 04:54:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/341/dataEnvio'] String "2025-05-04 04:54:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/342/dataEnvio'] String "2025-05-04 04:54:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/343/dataEnvio'] String "2025-05-04 04:54:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/344/dataEnvio'] String "2025-05-04 04:54:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/345/dataEnvio'] String "2025-05-04 04:54:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/346/dataEnvio'] String "2025-05-04 04:53:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/347/dataEnvio'] String "2025-05-04 04:53:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/348/dataEnvio'] String "2025-05-04 04:52:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/349/dataEnvio'] String "2025-05-04 04:50:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/350/dataEnvio'] String "2025-05-04 04:49:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/351/dataEnvio'] String "2025-05-04 04:48:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/352/dataEnvio'] String "2025-05-04 04:46:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/353/dataEnvio'] String "2025-05-04 04:45:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/354/dataEnvio'] String "2025-05-04 04:45:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/355/dataEnvio'] String "2025-05-04 04:41:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/356/dataEnvio'] String "2025-05-04 04:40:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/357/dataEnvio'] String "2025-05-04 04:38:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/358/dataEnvio'] String "2025-05-04 04:33:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/359/dataEnvio'] String "2025-05-04 04:33:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/360/dataEnvio'] String "2025-05-04 04:29:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/361/dataEnvio'] String "2025-05-04 04:28:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/362/dataEnvio'] String "2025-05-04 04:27:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/363/dataEnvio'] String "2025-05-04 04:26:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/364/dataEnvio'] String "2025-05-04 04:24:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/365/dataEnvio'] String "2025-05-04 04:23:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/366/dataEnvio'] String "2025-05-04 04:21:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/367/dataEnvio'] String "2025-05-04 04:21:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/368/dataEnvio'] String "2025-05-04 04:19:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/369/dataEnvio'] String "2025-05-04 04:18:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/370/dataEnvio'] String "2025-05-04 04:18:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/371/dataEnvio'] String "2025-05-04 04:13:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/372/dataEnvio'] String "2025-05-04 04:12:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/373/dataEnvio'] String "2025-05-04 04:11:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/374/dataEnvio'] String "2025-05-04 04:10:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/375/dataEnvio'] String "2025-05-04 04:08:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/376/dataEnvio'] String "2025-05-04 04:06:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/377/dataEnvio'] String "2025-05-04 04:05:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/378/dataEnvio'] String "2025-05-04 04:04:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/379/dataEnvio'] String "2025-05-04 03:59:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/380/dataEnvio'] String "2025-05-04 03:57:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/381/dataEnvio'] String "2025-05-04 03:54:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/382/dataEnvio'] String "2025-05-04 03:52:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/383/dataEnvio'] String "2025-05-04 03:49:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/384/dataEnvio'] String "2025-05-04 03:47:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/385/dataEnvio'] String "2025-05-04 03:45:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/386/dataEnvio'] String "2025-05-04 03:42:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/387/dataEnvio'] String "2025-05-04 03:40:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/388/dataEnvio'] String "2025-05-04 03:36:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/389/dataEnvio'] String "2025-05-04 03:34:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/390/dataEnvio'] String "2025-05-04 03:33:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/391/dataEnvio'] String "2025-05-04 03:32:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/392/dataEnvio'] String "2025-05-04 03:31:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/393/dataEnvio'] String "2025-05-04 03:31:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/394/dataEnvio'] String "2025-05-04 03:30:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/395/dataEnvio'] String "2025-05-04 03:29:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/396/dataEnvio'] String "2025-05-04 03:28:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/397/dataEnvio'] String "2025-05-04 03:27:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/398/dataEnvio'] String "2025-05-04 03:23:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/399/dataEnvio'] String "2025-05-04 03:23:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/400/dataEnvio'] String "2025-05-04 03:20:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/401/dataEnvio'] String "2025-05-04 03:16:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/402/dataEnvio'] String "2025-05-04 03:14:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/403/dataEnvio'] String "2025-05-04 03:13:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/404/dataEnvio'] String "2025-05-04 03:11:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/405/dataEnvio'] String "2025-05-04 03:08:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/406/dataEnvio'] String "2025-05-04 03:07:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/407/dataEnvio'] String "2025-05-04 03:07:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/408/dataEnvio'] String "2025-05-04 03:07:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/409/dataEnvio'] String "2025-05-04 03:07:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/410/dataEnvio'] String "2025-05-04 03:07:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/411/dataEnvio'] String "2025-05-04 03:07:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/412/dataEnvio'] String "2025-05-04 03:07:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/413/dataEnvio'] String "2025-05-04 03:07:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/414/dataEnvio'] String "2025-05-04 03:06:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/415/dataEnvio'] String "2025-05-04 03:06:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/416/dataEnvio'] String "2025-05-04 03:06:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/417/dataEnvio'] String "2025-05-04 03:05:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/418/dataEnvio'] String "2025-05-04 03:05:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/419/dataEnvio'] String "2025-05-04 03:05:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/420/dataEnvio'] String "2025-05-04 03:05:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/421/dataEnvio'] String "2025-05-04 03:05:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/422/dataEnvio'] String "2025-05-04 03:04:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/423/dataEnvio'] String "2025-05-04 03:04:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/424/dataEnvio'] String "2025-05-04 03:04:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/425/dataEnvio'] String "2025-05-04 03:04:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/426/dataEnvio'] String "2025-05-04 03:04:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/427/dataEnvio'] String "2025-05-04 03:04:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/428/dataEnvio'] String "2025-05-04 03:04:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/429/dataEnvio'] String "2025-05-04 03:04:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/430/dataEnvio'] String "2025-05-04 03:04:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/431/dataEnvio'] String "2025-05-04 03:04:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/432/dataEnvio'] String "2025-05-04 03:04:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/433/dataEnvio'] String "2025-05-04 03:02:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/434/dataEnvio'] String "2025-05-04 03:02:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/435/dataEnvio'] String "2025-05-04 03:02:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/436/dataEnvio'] String "2025-05-04 03:02:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/437/dataEnvio'] String "2025-05-04 03:02:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/438/dataEnvio'] String "2025-05-04 03:00:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/439/dataEnvio'] String "2025-05-04 03:00:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/440/dataEnvio'] String "2025-05-04 03:00:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/441/dataEnvio'] String "2025-05-04 03:00:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/442/dataEnvio'] String "2025-05-04 03:00:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/443/dataEnvio'] String "2025-05-04 03:00:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/444/dataEnvio'] String "2025-05-04 03:00:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/445/dataEnvio'] String "2025-05-04 03:00:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/446/dataEnvio'] String "2025-05-04 03:00:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/447/dataEnvio'] String "2025-05-04 02:59:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/448/dataEnvio'] String "2025-05-04 02:59:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/449/dataEnvio'] String "2025-05-04 02:59:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/450/dataEnvio'] String "2025-05-04 02:59:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/451/dataEnvio'] String "2025-05-04 02:57:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/452/dataEnvio'] String "2025-05-04 02:56:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/453/dataEnvio'] String "2025-05-04 02:56:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/454/dataEnvio'] String "2025-05-04 02:55:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/455/dataEnvio'] String "2025-05-04 02:54:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/456/dataEnvio'] String "2025-05-04 02:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/457/dataEnvio'] String "2025-05-04 02:52:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/458/dataEnvio'] String "2025-05-04 02:52:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/459/dataEnvio'] String "2025-05-04 02:51:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/460/dataEnvio'] String "2025-05-04 02:51:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/461/dataEnvio'] String "2025-05-04 02:50:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/462/dataEnvio'] String "2025-05-04 02:50:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/463/dataEnvio'] String "2025-05-04 02:50:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/464/dataEnvio'] String "2025-05-04 02:50:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/465/dataEnvio'] String "2025-05-04 02:50:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/466/dataEnvio'] String "2025-05-04 02:50:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/467/dataEnvio'] String "2025-05-04 02:48:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/468/dataEnvio'] String "2025-05-04 02:47:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/469/dataEnvio'] String "2025-05-04 02:47:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/470/dataEnvio'] String "2025-05-04 02:47:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/471/dataEnvio'] String "2025-05-04 02:47:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/472/dataEnvio'] String "2025-05-04 02:47:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/473/dataEnvio'] String "2025-05-04 02:47:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/474/dataEnvio'] String "2025-05-04 02:47:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/475/dataEnvio'] String "2025-05-04 02:47:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/476/dataEnvio'] String "2025-05-04 02:46:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/477/dataEnvio'] String "2025-05-04 02:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/478/dataEnvio'] String "2025-05-04 02:46:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/479/dataEnvio'] String "2025-05-04 02:46:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/480/dataEnvio'] String "2025-05-04 02:46:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/481/dataEnvio'] String "2025-05-04 02:46:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=482",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_1.json()["data"]) == 482
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-05-04 08:35:02"
        assert res_1.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-05-04 08:34:52"
        assert res_1.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-05-04 08:32:55"
        assert res_1.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 479 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 3156.0
        assert res_1.json()["pagination"]["count"] == 482.0
        assert res_1.json()["pagination"]["per_page"] == 482.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 7.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"04683839482\", " + \
            " \"nome\": \"Giulia Nascimento\", " + \
            " \"dataNascimento\": \"2009-12-18\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"aaron.fernandes.espinoza.sobrinho@fake.com\", " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 90, " + \
            " 389 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"logradouro\": \"\", " + \
            " \"bairro\": \"São Caldeira\", " + \
            " \"cep\": \"uqD7\", " + \
            " \"uf\": 11, " + \
            " \"inep\": 41061748, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\" " + \
            " }, " + \
            " { " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2088-07-32\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 201
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/88990722489",
                    headers=headers)
        
        assert res_3.status_code == 404
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=562&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_4.json()["data"]) == 0
        assert res_4.json()["pagination"]["total"] == 3.0
        assert res_4.json()["pagination"]["count"] == 0.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 562.0
        assert res_4.json()["pagination"]["total_pages"] == 1.0
        assert res_4.json()["pagination"]["links"]["previous"] == 561.0
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_5.json()["data"]) == 10
        assert res_5.json()["data"][0]["dataEnvio"] == "2025-05-04 08:33:48"
        assert res_5.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][1]["dataEnvio"] == "2025-05-04 08:33:09"
        assert res_5.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][2]["dataEnvio"] == "2025-05-04 08:33:05"
        assert res_5.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_5.json()["pagination"]["total"] == 10547.0
        assert res_5.json()["pagination"]["count"] == 10.0
        assert res_5.json()["pagination"]["per_page"] == 10.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 1055.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais
    # 2 - (200) GET:/v1/profissionais
    # 3 - (200) GET:/v1/estudantes/lote/{id}
    # 4 - (200) GET:/v1/estudantes/validacao-cadastro
    # 5 - (422) POST:/v1/profissionais/lote
    # 6 - (200) GET:/v1/estudantes/{cpfNis}
    # 7 - (404) GET:/v1/profissionais/{cpf}
    # 8 - (500) POST:/v1/estudantes
    # 9 - (404) GET:/v1/profissionais/{cpf}
    # 10 - (200) GET:/v1/profissionais
    # Found 498 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_36_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=543&" + 
                    "per_page=374",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 3.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 374.0
        assert res_0.json()["pagination"]["current_page"] == 543.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] == 542.0
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_1.json()["data"]) == 3
        assert res_1.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_1.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_1.json()["data"][0]["cpf"] == "43839402000"
        assert res_1.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_1.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_1.json()["data"][0]["genero"] == 1.0
        assert res_1.json()["data"][0]["racaCor"] == 2.0
        assert res_1.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_1.json()["data"][0]["telefone"] is None
        assert res_1.json()["data"][0]["nomeSocial"] is None
        assert res_1.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_1.json()["data"][0]["bairro"] == "Centro"
        assert res_1.json()["data"][0]["numero"] == "123"
        assert res_1.json()["data"][0]["cep"] == "01001000"
        assert res_1.json()["data"][0]["municipio"] == 2700409.0
        assert res_1.json()["data"][0]["uf"] == 27.0
        assert res_1.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_1.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_1.json()["data"][0]["situacaoAtiva"] == True
        assert res_1.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_1.json()["data"][0]["dataFim"] is None
        assert res_1.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_1.json()["data"][0]["matriculaRede"] == "56789"
        assert res_1.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_1.json()["data"][0]["inep"] == "27014088"
        assert len(res_1.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_1.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_1.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_1.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_1.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_1.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_1.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_1.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_1.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_1.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_1.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_1.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_1.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_1.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_1.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_1.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_1.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_1.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_1.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_1.json()["data"][1]["cpf"] == "33722248094"
        assert res_1.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_1.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_1.json()["data"][1]["genero"] == 1.0
        assert res_1.json()["data"][1]["racaCor"] == 2.0
        assert res_1.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_1.json()["data"][1]["telefone"] is None
        assert res_1.json()["data"][1]["nomeSocial"] is None
        assert res_1.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_1.json()["data"][1]["bairro"] == "Centro"
        assert res_1.json()["data"][1]["numero"] == "123"
        assert res_1.json()["data"][1]["cep"] == "01001000"
        assert res_1.json()["data"][1]["municipio"] == 2700409.0
        assert res_1.json()["data"][1]["uf"] == 27.0
        assert res_1.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_1.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_1.json()["data"][1]["situacaoAtiva"] == True
        assert res_1.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_1.json()["data"][1]["dataFim"] is None
        assert res_1.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_1.json()["data"][1]["matriculaRede"] == "56789"
        assert res_1.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_1.json()["data"][1]["inep"] == "27014088"
        assert len(res_1.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_1.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_1.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_1.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_1.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_1.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_1.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_1.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_1.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_1.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_1.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_1.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_1.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_1.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_1.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_1.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_1.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_1.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_1.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_1.json()["data"][2]["cpf"] == "31863200037"
        assert res_1.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_1.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_1.json()["data"][2]["genero"] == 1.0
        assert res_1.json()["data"][2]["racaCor"] == 2.0
        assert res_1.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_1.json()["data"][2]["telefone"] is None
        assert res_1.json()["data"][2]["nomeSocial"] is None
        assert res_1.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_1.json()["data"][2]["bairro"] == "Centro"
        assert res_1.json()["data"][2]["numero"] == "123"
        assert res_1.json()["data"][2]["cep"] == "01001000"
        assert res_1.json()["data"][2]["municipio"] == 2700409.0
        assert res_1.json()["data"][2]["uf"] == 27.0
        assert res_1.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_1.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_1.json()["data"][2]["situacaoAtiva"] == True
        assert res_1.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_1.json()["data"][2]["dataFim"] is None
        assert res_1.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_1.json()["data"][2]["matriculaRede"] == "56789"
        assert res_1.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_1.json()["data"][2]["inep"] == "27014088"
        assert len(res_1.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_1.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_1.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_1.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_1.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_1.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_1.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_1.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_1.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_1.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_1.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_1.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_1.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_1.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_1.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_1.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_1.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_1.json()["pagination"]["total"] == 3.0
        assert res_1.json()["pagination"]["count"] == 3.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/033becad-c73c-4b6c-b1f0-043a3a0044fa",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["status_processamento"] == "Enviado"
        assert res_2.json()["message"] == "Lote recuperado com sucesso. ID: 033becad-c73c-4b6c-b1f0-043a3a0044fa"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/15'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/16'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/17'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/18'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/19'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/20'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/21'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/22'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/23'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/24'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/25'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/26'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/27'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/28'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/29'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/30'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/31'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/32'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/33'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/34'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/35'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/36'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/37'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/38'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/39'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/40'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/41'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/42'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/43'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/44'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/45'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/46'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/47'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/48'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/49'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/50'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/51'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/52'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/53'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/54'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/55'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/56'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/57'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/58'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/59'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/60'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/61'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/62'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/63'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/64'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/65'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/66'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/67'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/68'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/69'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/70'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/71'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/72'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/73'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/74'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/75'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/76'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/77'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/78'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/79'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/80'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/81'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/82'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/83'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/84'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/85'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/86'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/87'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/88'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/89'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/90'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/91'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/92'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/93'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/94'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/95'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/96'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/97'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/98'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/99'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/100'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/101'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/102'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/103'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/104'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/105'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/106'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/107'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/108'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/109'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/110'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/111'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/112'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/113'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/114'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/115'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/116'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/117'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/118'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/119'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/120'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/121'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/122'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/123'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/124'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/125'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/126'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/127'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/128'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/129'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/130'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/131'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/132'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/133'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/134'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/135'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/136'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/137'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/138'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/139'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/140'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/141'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/142'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/143'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/144'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/145'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/146'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/147'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/148'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/149'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/150'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/151'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/152'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/153'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/154'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/155'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/156'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/157'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/158'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/159'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/160'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/161'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/162'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/163'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/164'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/165'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/166'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/167'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/168'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/169'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/170'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/171'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/172'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/173'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/174'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/175'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/176'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/177'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/178'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/179'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/180'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/181'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/182'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/183'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/184'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/185'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/186'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/187'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/188'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/189'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/190'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/191'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/192'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/193'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/194'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/195'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/196'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/197'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/198'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/199'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/200'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/201'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/202'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/203'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/204'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/205'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/206'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/207'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/208'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/209'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/210'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/211'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/212'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/213'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/214'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/215'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/216'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/217'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/218'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/219'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/220'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/221'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/222'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/223'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/224'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/225'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/226'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/227'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/228'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/229'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/230'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/231'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/232'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/233'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/234'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/235'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/236'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/237'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/238'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/239'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/240'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/241'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/242'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/243'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/244'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/245'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/246'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/247'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/248'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/249'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/250'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/251'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/252'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/253'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/254'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/255'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/256'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/257'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/258'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/259'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/260'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/261'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/262'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/263'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/264'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/265'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/266'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/267'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/268'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/269'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/270'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/271'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/272'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/273'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/274'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/275'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/276'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/277'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/278'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/279'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/280'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/281'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/282'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/283'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/284'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/285'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/286'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/287'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/288'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/289'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/290'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/291'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/292'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/293'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/294'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/295'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/296'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/297'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/298'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/299'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/300'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/301'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/302'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/303'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/304'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/305'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/306'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/307'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/308'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/309'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/310'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/311'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/312'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/313'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/314'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/315'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/316'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/317'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/318'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/319'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/320'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/321'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/322'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/323'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/324'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/325'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/326'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/327'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/328'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/329'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/330'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/331'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/332'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/333'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/334'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/335'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/336'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/337'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/338'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/339'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/340'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/341'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/342'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/343'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/344'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/345'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/346'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/347'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/348'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/349'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/350'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/351'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/352'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/353'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/354'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/355'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/356'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/357'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/358'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/359'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/360'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/361'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/362'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/363'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/364'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/365'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/366'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/367'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/368'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/369'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/370'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/371'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/372'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/373'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/374'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/375'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/376'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/377'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/378'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/379'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/380'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/381'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/382'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/383'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/384'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/385'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/386'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/387'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/388'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/389'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/390'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/391'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/392'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/393'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/394'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/395'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/396'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/397'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/398'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/399'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/400'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/401'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/402'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/403'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/404'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/405'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/406'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/407'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/408'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/409'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/410'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/411'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/412'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/413'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/414'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/415'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/416'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/417'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/418'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/419'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/420'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/421'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/422'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/423'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/424'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/425'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/426'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/427'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/428'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/429'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/430'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/431'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/432'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/433'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/434'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/435'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/436'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/437'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/438'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/439'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/440'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/441'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/442'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/443'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/444'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/445'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/446'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/447'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/448'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/449'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/450'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/451'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/452'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/453'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/454'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/455'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/456'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/457'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/458'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/459'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/460'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/461'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/462'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/463'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/464'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/465'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/466'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/467'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/468'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/469'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/470'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/471'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/472'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/473'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/474'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/475'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/476'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/477'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/478'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/479'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/480'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/481'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?per_page=482",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        assert len(res_3.json()["data"]) == 482
        assert res_3.json()["data"][0]["cpf"] == "99999701094"
        assert res_3.json()["data"][0]["numeroNIS"] is None
        assert res_3.json()["data"][0]["situacaoCadastral"] == "Autenticada"
        assert res_3.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_3.json()["data"][0]["nome"] == "Bryan  Chen"
        assert res_3.json()["data"][0]["nomeValidado"] == True
        assert res_3.json()["data"][0]["dataNascimento"] == "1956-01-11"
        assert res_3.json()["data"][0]["dataNascimentoValidada"] == True
        assert res_3.json()["data"][0]["nomeMaeEstudante"] == "Mr. Daniel Johnson DVM"
        assert res_3.json()["data"][0]["nomeMaeEstudanteValidado"] == True
        assert res_3.json()["data"][0]["dataValidacaoCadastral"] == "2025-03-11 01:39:26"
        assert res_3.json()["data"][1]["cpf"] == "34535377693"
        assert res_3.json()["data"][1]["numeroNIS"] == "11979328182"
        assert res_3.json()["data"][1]["situacaoCadastral"] == "Não autenticada"
        assert res_3.json()["data"][1]["situacaoCpf"] == "Testando o serviço de validação"
        assert res_3.json()["data"][1]["nome"] == "Trevor Hester"
        assert res_3.json()["data"][1]["nomeValidado"] == True
        assert res_3.json()["data"][1]["dataNascimento"] == "1968-02-26"
        assert res_3.json()["data"][1]["dataNascimentoValidada"] == False
        assert res_3.json()["data"][1]["nomeMaeEstudante"] == "Juan Mccullough"
        assert res_3.json()["data"][1]["nomeMaeEstudanteValidado"] == True
        assert res_3.json()["data"][1]["dataValidacaoCadastral"] == "2023-06-16 00:00:00"
        assert res_3.json()["data"][2]["cpf"] == "14064786602"
        assert res_3.json()["data"][2]["numeroNIS"] == "124112231"
        assert res_3.json()["data"][2]["situacaoCadastral"] == "Não autenticada"
        assert res_3.json()["data"][2]["situacaoCpf"] == "Quando há omissão de DIRPF em um dos últimos 5 exercícios"
        assert res_3.json()["data"][2]["nome"] == "Donald Jackson"
        assert res_3.json()["data"][2]["nomeValidado"] == False
        assert res_3.json()["data"][2]["dataNascimento"] == "1954-08-23"
        assert res_3.json()["data"][2]["dataNascimentoValidada"] == False
        assert res_3.json()["data"][2]["nomeMaeEstudante"] == "Timothy Garcia"
        assert res_3.json()["data"][2]["nomeMaeEstudanteValidado"] == True
        assert res_3.json()["data"][2]["dataValidacaoCadastral"] == "2024-04-23 00:00:00"
        # Skipping assertions on the remaining 479 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 54714.0
        assert res_3.json()["pagination"]["count"] == 482.0
        assert res_3.json()["pagination"]["per_page"] == 482.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 114.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] == 2.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 422
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/47496859419",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Dados obtidos com sucesso."
        assert res_5.json()["data"]["cpf"] == "47496859419"
        assert res_5.json()["data"]["nome"] == "Helena Menendes"
        assert res_5.json()["data"]["nomeSocial"] is None
        assert res_5.json()["data"]["numeroNIS"] == "48788957327"
        assert res_5.json()["data"]["rg"] == "02076400727798777067"
        assert res_5.json()["data"]["orgaoEmissor"] == "jUHj-if"
        assert res_5.json()["data"]["cpfResponsavel"] == "71513435536"
        assert res_5.json()["data"]["nomeMaeEstudante"] == "Dr. Luiz Otávio Corte"
        assert res_5.json()["data"]["numeroNISResponsavel"] == "33121256973"
        assert res_5.json()["data"]["dataNascimento"] == "1975-05-13"
        assert res_5.json()["data"]["logradouro"] == "Rodovia Suélen Peres"
        assert res_5.json()["data"]["bairro"] == "Bairro fuga"
        assert res_5.json()["data"]["numero"] == "944"
        assert res_5.json()["data"]["cep"] == "68978759"
        assert res_5.json()["data"]["municipio"] == 4312377.0
        assert res_5.json()["data"]["certidaoNascimento"] == "84850346168810833239610746257216"
        assert res_5.json()["data"]["cnh"] == "33040485014"
        assert res_5.json()["data"]["uf"] == 53.0
        assert res_5.json()["data"]["racaCor"] == 3.0
        assert len(res_5.json()["data"]["tipoDeficiencia"]) == 0
        assert res_5.json()["data"]["genero"] == 2.0
        assert res_5.json()["data"]["telefone"] is None
        assert res_5.json()["data"]["email"] is None
        assert res_5.json()["data"]["situacaoCadastroValidado"] == 4.0
        assert len(res_5.json()["data"]["matriculas"]) == 1
        assert res_5.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1234299.0
        assert res_5.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_5.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "1960-07-11"
        assert res_5.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_5.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "1981-08-31"
        assert res_5.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_5.json()["data"]["matriculas"][0]["serieAno"] == 12.0
        assert res_5.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Fundamental de 8 anos"
        assert res_5.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_5.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_5.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_5.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_5.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_5.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_5.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_5.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_5.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_5.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_5.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_5.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_5.json()["data"]["outrasMatriculas"]) == 0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/81523138661",
                    headers=headers)
        
        assert res_6.status_code == 404
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"16938061343\", " + \
            " \"numeroNISResponsavel\": \"85912552955\", " + \
            " \"nomeMaeEstudante\": \"Ruan Jaques\", " + \
            " \"cpf\": \"12395152781\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 2, " + \
            " \"telefone\": \"11942878677\", " + \
            " \"numeroNIS\": \"53915112788\", " + \
            " \"orgaoEmissor\": \"W3twGyZrdm\", " + \
            " \"logradouro\": \"Rua teste\", " + \
            " \"cep\": \"87922107\", " + \
            " \"estudantePpl\": 1, " + \
            " \"serieAno\": 48, " + \
            " \"dataInicioPeriodoLetivo\": \"1954-05-25\", " + \
            " \"formaOrganizacaoTurma\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_7.status_code == 500
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Ocorreu um erro."
        assert res_7.json()["errors"]["message"] == "O campo nome é obrigatório. (and 1 more error)"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/85203228590",
                    headers=headers)
        
        assert res_8.status_code == 404
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_9 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=952",
                    headers=headers)
        
        assert res_9.status_code == 200
        assert "application/json" in res_9.headers["content-type"]
        assert res_9.json()["success"] == True
        assert res_9.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_9.json()["data"]) == 0
        assert res_9.json()["pagination"]["total"] == 3.0
        assert res_9.json()["pagination"]["count"] == 0.0
        assert res_9.json()["pagination"]["per_page"] == 10.0
        assert res_9.json()["pagination"]["current_page"] == 952.0
        assert res_9.json()["pagination"]["total_pages"] == 1.0
        assert res_9.json()["pagination"]["links"]["previous"] == 951.0
        assert res_9.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (404) GET:/v1/profissionais/{cpf}
    # 2 - (201) POST:/v1/estudantes/lote
    # 3 - (200) GET:/v1/profissionais/{cpf}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_37(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/59253172541",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Nenhum profissional de educação encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"30407625321\", " + \
            " \"nomeMaeEstudante\": \"Ayla Arriaga\", " + \
            " \"cpf\": \"30251461505\", " + \
            " \"racaCor\": 4, " + \
            " \"rg\": \"OFd\", " + \
            " \"certidaoNascimento\": \"0xLrBx\", " + \
            " \"bairro\": \"São Escobar\", " + \
            " \"numero\": \"\", " + \
            " \"cep\": \"12860898\", " + \
            " \"dataInicioMatricula\": \"2019-10-25\", " + \
            " \"serieAno\": 47, " + \
            " \"instituicao\": 185680, " + \
            " \"dataInicioPeriodoLetivo\": \"1939-12-30\", " + \
            " \"formaOrganizacaoTurma\": 746, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"70336121253\", " + \
            " \"dataNascimento\": \"2010-09-10\", " + \
            " \"racaCor\": 0, " + \
            " \"email\": \"\", " + \
            " \"telefone\": \"_JVOvJCAfBVlXGjC\", " + \
            " \"sexo\": \"5\", " + \
            " \"numeroNIS\": \"28673891480\", " + \
            " \"orgaoEmissor\": \"SSP-AM\", " + \
            " \"logradouro\": \"Rua Avenida Rafaela Marés\", " + \
            " \"numero\": \"85457\", " + \
            " \"uf\": 51, " + \
            " \"dataInicioMatricula\": \"2042-11-07\", " + \
            " \"serieAno\": 25, " + \
            " \"matriculaRede\": \"G8BMn2\", " + \
            " \"instituicao\": 28213, " + \
            " \"inep\": 802, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 597, " + \
            " \"estudanteIntegral\": 42 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/{cpf} -> Instance failed to match all required schemas (matched only 0 out of 5)
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/43839402000",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert res_2.json()["data"]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"]["cpf"] == "43839402000"
        assert res_2.json()["data"]["nome"] == "João da Silva 2"
        assert res_2.json()["data"]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"]["genero"] == 1.0
        assert res_2.json()["data"]["racaCor"] == 2.0
        assert res_2.json()["data"]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"]["telefone"] is None
        assert res_2.json()["data"]["nomeSocial"] is None
        assert res_2.json()["data"]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"]["bairro"] == "Centro"
        assert res_2.json()["data"]["numero"] == "123"
        assert res_2.json()["data"]["cep"] == "01001000"
        assert res_2.json()["data"]["municipio"] == 2700409.0
        assert res_2.json()["data"]["uf"] == 27.0
        assert res_2.json()["data"]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"]["cargaHoraria"] == 40.0
        assert res_2.json()["data"]["situacaoAtiva"] == True
        assert res_2.json()["data"]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"]["dataFim"] is None
        assert res_2.json()["data"]["codigoFuncao"] == 2.0
        assert res_2.json()["data"]["matriculaRede"] == "56789"
        assert res_2.json()["data"]["tipoVinculo"] == 0.0
        assert res_2.json()["data"]["inep"] == "27014088"
        assert len(res_2.json()["data"]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
    
    
    # Calls:
    # 1 - (404) GET:/v1/estudantes/validacao-cadastro
    # 2 - (200) GET:/v1/estudantes/{cpfNis}
    # Found 2 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_38(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 404 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?cpf=Z4F1pi69lXsQmnS",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro inesperado."
        assert res_0.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/91876378980",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert res_1.json()["data"]["cpf"] == "91876378980"
        assert res_1.json()["data"]["nome"] == "Luiza Gabeira"
        assert res_1.json()["data"]["nomeSocial"] is None
        assert res_1.json()["data"]["numeroNIS"] == "34242161291"
        assert res_1.json()["data"]["rg"] == "13196184547881132809"
        assert res_1.json()["data"]["orgaoEmissor"] == "SZQS-JC"
        assert res_1.json()["data"]["cpfResponsavel"] == "04619684015"
        assert res_1.json()["data"]["nomeMaeEstudante"] == "Maria Valentina Jesus"
        assert res_1.json()["data"]["numeroNISResponsavel"] == "85142627150"
        assert res_1.json()["data"]["dataNascimento"] == "1966-11-02"
        assert res_1.json()["data"]["logradouro"] == "Avenida Milena Parreira"
        assert res_1.json()["data"]["bairro"] == "Bairro est"
        assert res_1.json()["data"]["numero"] == "347"
        assert res_1.json()["data"]["cep"] == "11763168"
        assert res_1.json()["data"]["municipio"] == 2401107.0
        assert res_1.json()["data"]["certidaoNascimento"] == "79851335013353375790708687947737"
        assert res_1.json()["data"]["cnh"] == "27567241627"
        assert res_1.json()["data"]["uf"] == 31.0
        assert res_1.json()["data"]["racaCor"] == 1.0
        assert len(res_1.json()["data"]["tipoDeficiencia"]) == 0
        assert res_1.json()["data"]["genero"] == 1.0
        assert res_1.json()["data"]["telefone"] is None
        assert res_1.json()["data"]["email"] is None
        assert res_1.json()["data"]["situacaoCadastroValidado"] == 4.0
        assert len(res_1.json()["data"]["matriculas"]) == 1
        assert res_1.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1230831.0
        assert res_1.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_1.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "1977-04-13"
        assert res_1.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_1.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "1985-08-14"
        assert res_1.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_1.json()["data"]["matriculas"][0]["serieAno"] == 21.0
        assert res_1.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Fundamental (9 anos)"
        assert res_1.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_1.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_1.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_1.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_1.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_1.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_1.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_1.json()["data"]["outrasMatriculas"]) == 0
    
    
    # Calls:
    # 1 - (200) PATCH:/v1/estudantes/lote
    # 2 - (400) GET:/v1/estudantes/lote/{id}/erros
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_39(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_73_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_0.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/5504284997960741/erros?page=-1479701099",
                    headers=headers)
        
        assert res_1.status_code == 400
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "O ID fornecido não é um UUID válido. ID: 5504284997960741"
    
    
    # Calls:
    # (200) GET:/v1/profissionais
    # Found 5 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_40(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?per_page=685",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 3
        assert res_0.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][0]["cpf"] == "43839402000"
        assert res_0.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][0]["genero"] == 1.0
        assert res_0.json()["data"][0]["racaCor"] == 2.0
        assert res_0.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][0]["telefone"] is None
        assert res_0.json()["data"][0]["nomeSocial"] is None
        assert res_0.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][0]["bairro"] == "Centro"
        assert res_0.json()["data"][0]["numero"] == "123"
        assert res_0.json()["data"][0]["cep"] == "01001000"
        assert res_0.json()["data"][0]["municipio"] == 2700409.0
        assert res_0.json()["data"][0]["uf"] == 27.0
        assert res_0.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][0]["situacaoAtiva"] == True
        assert res_0.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][0]["dataFim"] is None
        assert res_0.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][0]["matriculaRede"] == "56789"
        assert res_0.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][0]["inep"] == "27014088"
        assert len(res_0.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][1]["cpf"] == "33722248094"
        assert res_0.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][1]["genero"] == 1.0
        assert res_0.json()["data"][1]["racaCor"] == 2.0
        assert res_0.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][1]["telefone"] is None
        assert res_0.json()["data"][1]["nomeSocial"] is None
        assert res_0.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][1]["bairro"] == "Centro"
        assert res_0.json()["data"][1]["numero"] == "123"
        assert res_0.json()["data"][1]["cep"] == "01001000"
        assert res_0.json()["data"][1]["municipio"] == 2700409.0
        assert res_0.json()["data"][1]["uf"] == 27.0
        assert res_0.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][1]["situacaoAtiva"] == True
        assert res_0.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][1]["dataFim"] is None
        assert res_0.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][1]["matriculaRede"] == "56789"
        assert res_0.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][1]["inep"] == "27014088"
        assert len(res_0.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][2]["cpf"] == "31863200037"
        assert res_0.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][2]["genero"] == 1.0
        assert res_0.json()["data"][2]["racaCor"] == 2.0
        assert res_0.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][2]["telefone"] is None
        assert res_0.json()["data"][2]["nomeSocial"] is None
        assert res_0.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][2]["bairro"] == "Centro"
        assert res_0.json()["data"][2]["numero"] == "123"
        assert res_0.json()["data"][2]["cep"] == "01001000"
        assert res_0.json()["data"][2]["municipio"] == 2700409.0
        assert res_0.json()["data"][2]["uf"] == 27.0
        assert res_0.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][2]["situacaoAtiva"] == True
        assert res_0.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][2]["dataFim"] is None
        assert res_0.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][2]["matriculaRede"] == "56789"
        assert res_0.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][2]["inep"] == "27014088"
        assert len(res_0.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["pagination"]["total"] == 3.0
        assert res_0.json()["pagination"]["count"] == 3.0
        assert res_0.json()["pagination"]["per_page"] == 685.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # (200) GET:/v1/estudantes
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_41(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 10
        assert res_0.json()["data"][0]["cpf"] == "49255179888"
        assert res_0.json()["data"][0]["nome"] == "111"
        assert res_0.json()["data"][0]["nomeSocial"] == "test"
        assert res_0.json()["data"][0]["numeroNIS"] is None
        assert res_0.json()["data"][0]["rg"] == "22307981"
        assert res_0.json()["data"][0]["orgaoEmissor"] == "SSP"
        assert res_0.json()["data"][0]["cpfResponsavel"] == "48405399283"
        assert res_0.json()["data"][0]["nomeMaeEstudante"] == "Valentina Rezende"
        assert res_0.json()["data"][0]["numeroNISResponsavel"] == "64668522654"
        assert res_0.json()["data"][0]["dataNascimento"] == "2024-12-28"
        assert res_0.json()["data"][0]["logradouro"] == "Rua teste"
        assert res_0.json()["data"][0]["bairro"] == "Santa Lucia"
        assert res_0.json()["data"][0]["numero"] == "220"
        assert res_0.json()["data"][0]["cep"] == "57018780"
        assert res_0.json()["data"][0]["municipio"] == 1100940.0
        assert res_0.json()["data"][0]["certidaoNascimento"] == "33333333"
        assert res_0.json()["data"][0]["cnh"] == "3333333"
        assert res_0.json()["data"][0]["uf"] == 11.0
        assert res_0.json()["data"][0]["racaCor"] == 3.0
        assert len(res_0.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert res_0.json()["data"][0]["genero"] == 3.0
        assert res_0.json()["data"][0]["telefone"] == "3333333"
        assert res_0.json()["data"][0]["email"] == "AFTER-TWO@AFTER-TWO.com"
        assert res_0.json()["data"][0]["situacaoCadastroValidado"] == 3.0
        assert len(res_0.json()["data"][0]["matriculas"]) == 1
        assert res_0.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 1733024.0
        assert res_0.json()["data"][0]["matriculas"][0]["codInstituicao"] == 7259.0
        assert res_0.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-09-28"
        assert res_0.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_0.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_0.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == True
        assert res_0.json()["data"][0]["matriculas"][0]["serieAno"] == 74.0
        assert res_0.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Formação inicial continuada ou qualificação profissional (FIC)"
        assert res_0.json()["data"][0]["matriculas"][0]["matriculaRede"] == "Teste Ricardo"
        assert res_0.json()["data"][0]["matriculas"][0]["deletadaEm"] is None
        assert res_0.json()["data"][0]["matriculas"][0]["inep"] == "12005037"
        assert res_0.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_0.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_0.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-09-28"
        assert res_0.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_0.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 0.0
        assert res_0.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_0.json()["data"][0]["matriculas"][0]["estudanteIntegral"] == True
        assert res_0.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] == "2024-09-27 00:00:00"
        assert res_0.json()["data"][0]["matriculas"][0]["anoMatricula"] == 2024.0
        assert len(res_0.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_0.json()["data"][1]["cpf"] == "67089268578"
        assert res_0.json()["data"][1]["nome"] == "6cc97vMeCP9KgSI"
        assert res_0.json()["data"][1]["nomeSocial"] == "rRAEEBPUPdYf"
        assert res_0.json()["data"][1]["numeroNIS"] == "30183310316"
        assert res_0.json()["data"][1]["rg"] == "53669048"
        assert res_0.json()["data"][1]["orgaoEmissor"] == "i4tf"
        assert res_0.json()["data"][1]["cpfResponsavel"] == "52008260631"
        assert res_0.json()["data"][1]["nomeMaeEstudante"] == "7aTq92Zi"
        assert res_0.json()["data"][1]["numeroNISResponsavel"] == "11273745692"
        assert res_0.json()["data"][1]["dataNascimento"] == "2008-10-29"
        assert res_0.json()["data"][1]["logradouro"] == "rWjgYPU1P8"
        assert res_0.json()["data"][1]["bairro"] == "G5tQ1ZJN0"
        assert res_0.json()["data"][1]["numero"] == "55"
        assert res_0.json()["data"][1]["cep"] == "19141821"
        assert res_0.json()["data"][1]["municipio"] == 4200705.0
        assert res_0.json()["data"][1]["certidaoNascimento"] == "373271505447"
        assert res_0.json()["data"][1]["cnh"] == "56267273661"
        assert res_0.json()["data"][1]["uf"] == 42.0
        assert res_0.json()["data"][1]["racaCor"] == 0.0
        assert len(res_0.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert res_0.json()["data"][1]["genero"] == 4.0
        assert res_0.json()["data"][1]["telefone"] == "11969630845"
        assert res_0.json()["data"][1]["email"] == "RTT0VngF3Deo0O@example.com"
        assert res_0.json()["data"][1]["situacaoCadastroValidado"] == 4.0
        assert len(res_0.json()["data"][1]["matriculas"]) == 1
        assert res_0.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 1.020298E7
        assert res_0.json()["data"][1]["matriculas"][0]["codInstituicao"] == 81776.0
        assert res_0.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-02-19"
        assert res_0.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_0.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_0.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == True
        assert res_0.json()["data"][1]["matriculas"][0]["serieAno"] == 71.0
        assert res_0.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_0.json()["data"][1]["matriculas"][0]["matriculaRede"] == "jvjvjv1"
        assert res_0.json()["data"][1]["matriculas"][0]["deletadaEm"] is None
        assert res_0.json()["data"][1]["matriculas"][0]["inep"] == "26540720"
        assert res_0.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_0.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_0.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-01-29"
        assert res_0.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_0.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 3.0
        assert res_0.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] == 3.0
        assert res_0.json()["data"][1]["matriculas"][0]["estudanteIntegral"] == True
        assert res_0.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_0.json()["data"][1]["matriculas"][0]["anoMatricula"] == 2024.0
        assert len(res_0.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_0.json()["data"][2]["cpf"] == "81601036620"
        assert res_0.json()["data"][2]["nome"] == "7nCcq XDiMfCbaJ0cFs"
        assert res_0.json()["data"][2]["nomeSocial"] == "YXWGpw"
        assert res_0.json()["data"][2]["numeroNIS"] == "34442480673"
        assert res_0.json()["data"][2]["rg"] == "21577661"
        assert res_0.json()["data"][2]["orgaoEmissor"] == "vC2a0H9Lv4"
        assert res_0.json()["data"][2]["cpfResponsavel"] == "85307915250"
        assert res_0.json()["data"][2]["nomeMaeEstudante"] == "uoUPQKkc8iCGVq2wAS1"
        assert res_0.json()["data"][2]["numeroNISResponsavel"] == "27296692788"
        assert res_0.json()["data"][2]["dataNascimento"] == "1998-08-08"
        assert res_0.json()["data"][2]["logradouro"] == "01PKhhqGroyvggLAFUEoOHr3Q0KI"
        assert res_0.json()["data"][2]["bairro"] == "nL4bOxhpEiU2PjnP"
        assert res_0.json()["data"][2]["numero"] == "02"
        assert res_0.json()["data"][2]["cep"] == "76984525"
        assert res_0.json()["data"][2]["municipio"] == 4200705.0
        assert res_0.json()["data"][2]["certidaoNascimento"] == "3679215604607"
        assert res_0.json()["data"][2]["cnh"] == "02342004738"
        assert res_0.json()["data"][2]["uf"] == 42.0
        assert res_0.json()["data"][2]["racaCor"] == 2.0
        assert len(res_0.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert res_0.json()["data"][2]["genero"] == 3.0
        assert res_0.json()["data"][2]["telefone"] == "11949911257"
        assert res_0.json()["data"][2]["email"] == "4mphnZDvXrC@example.com"
        assert res_0.json()["data"][2]["situacaoCadastroValidado"] == 4.0
        assert len(res_0.json()["data"][2]["matriculas"]) == 1
        assert res_0.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 1.0202989E7
        assert res_0.json()["data"][2]["matriculas"][0]["codInstituicao"] == 81776.0
        assert res_0.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "2024-11-01"
        assert res_0.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_0.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_0.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == True
        assert res_0.json()["data"][2]["matriculas"][0]["serieAno"] == 58.0
        assert res_0.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_0.json()["data"][2]["matriculas"][0]["matriculaRede"] == "e2XouiaD2aNA 8"
        assert res_0.json()["data"][2]["matriculas"][0]["deletadaEm"] is None
        assert res_0.json()["data"][2]["matriculas"][0]["inep"] == "26540720"
        assert res_0.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_0.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_0.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-10-22"
        assert res_0.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] == 6.0
        assert res_0.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 4.0
        assert res_0.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_0.json()["data"][2]["matriculas"][0]["estudanteIntegral"] == False
        assert res_0.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_0.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_0.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 598780.0
        assert res_0.json()["pagination"]["count"] == 10.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 59878.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # (200) GET:/v1/estudantes/lote/{id}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_42(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/c481959d-b715-4e65-a28c-e6890e5f9e5c?" + 
                    "page=81&" + 
                    "per_page=593",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["status_processamento"] == "Enviado"
        assert res_0.json()["message"] == "Lote recuperado com sucesso. ID: c481959d-b715-4e65-a28c-e6890e5f9e5c"
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes/lote
    # 2 - (201) POST:/v1/estudantes/lote
    # Found 3 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_43(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?page=845",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_0.json()["data"]) == 10
        assert res_0.json()["data"][0]["dataEnvio"] == "2025-02-22 13:02:09"
        assert res_0.json()["data"][0]["status_processamento"] == "Processado com sucesso"
        assert res_0.json()["data"][1]["dataEnvio"] == "2025-02-22 13:02:08"
        assert res_0.json()["data"][1]["status_processamento"] == "Processado com sucesso"
        assert res_0.json()["data"][2]["dataEnvio"] == "2025-02-22 13:02:07"
        assert res_0.json()["data"][2]["status_processamento"] == "Processado com sucesso"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 10534.0
        assert res_0.json()["pagination"]["count"] == 10.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 845.0
        assert res_0.json()["pagination"]["total_pages"] == 1054.0
        assert res_0.json()["pagination"]["links"]["previous"] == 844.0
        assert res_0.json()["pagination"]["links"]["next"] == 846.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"8\", " + \
            " \"numeroNISResponsavel\": \"85912552955\", " + \
            " \"cpf\": \"W90qo7b7\", " + \
            " \"genero\": 7, " + \
            " \"telefone\": \"11949911257\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"rg\": \"Ioy0VkKku7Fcpx\", " + \
            " \"orgaoEmissor\": \"\", " + \
            " \"logradouro\": \"\", " + \
            " \"bairro\": \"São Burgos\", " + \
            " \"numero\": \"31273\", " + \
            " \"cep\": \"33589240\", " + \
            " \"municipio\": 3106200, " + \
            " \"uf\": 33, " + \
            " \"estudantePpl\": 0, " + \
            " \"serieAno\": 121, " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"inep\": 987, " + \
            " \"anoMatricula\": 297 " + \
            " }, " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Ingrid Miriam Queirós Sobrinho\", " + \
            " \"nome\": \"João Luca Antunes\", " + \
            " \"dataNascimento\": \"1977-06-28\", " + \
            " \"genero\": 4, " + \
            " \"tipoDeficiencia\": [ " + \
            " 2 " + \
            " ], " + \
            " \"numeroNIS\": \"38177426184\", " + \
            " \"logradouro\": \"Rua Largo Valente\", " + \
            " \"cep\": \"90338298\", " + \
            " \"municipio\": 548, " + \
            " \"estudantePpl\": 1, " + \
            " \"dataInicioMatricula\": \"2097-01-10\", " + \
            " \"instituicao\": 106086, " + \
            " \"inep\": 33003645, " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 1 " + \
            " }, " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Daniele Queirós Balestero Neto\", " + \
            " \"cpf\": \"28865879823\", " + \
            " \"dataNascimento\": \"2010-09-30\", " + \
            " \"telefone\": \"_Fd\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"numeroNIS\": \"20994197750\", " + \
            " \"rg\": \"7798751968836194\", " + \
            " \"orgaoEmissor\": \"OM4V\", " + \
            " \"logradouro\": \"evV4LsU4iZfabrk\", " + \
            " \"bairro\": \"São Valência\", " + \
            " \"numero\": \"6174\", " + \
            " \"cep\": \"93114161\", " + \
            " \"municipio\": 1100940, " + \
            " \"serieAno\": 27, " + \
            " \"estudanteAnoPeriodo\": 42 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes/lote
    # 2 - (200) PATCH:/v1/estudantes/lote
    # Found 3 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_44(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?per_page=482",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_0.json()["data"]) == 482
        assert res_0.json()["data"][0]["dataEnvio"] == "2025-05-04 08:24:30"
        assert res_0.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][1]["dataEnvio"] == "2025-05-04 08:21:56"
        assert res_0.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][2]["dataEnvio"] == "2025-05-04 08:20:52"
        assert res_0.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 479 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 10535.0
        assert res_0.json()["pagination"]["count"] == 482.0
        assert res_0.json()["pagination"]["per_page"] == 482.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 22.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] == 2.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_89_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_90_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_1.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
    
    
    # Calls:
    # 1 - (401) POST:/v1/profissionais/lote
    # 2 - (200) GET:/v1/estudantes/inep/{inep}
    # Found 2 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_45(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Response status 401 not defined for path '/v1/profissionais/lote'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/SxmJW?per_page=482",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 0.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 482.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (422) POST:/v1/profissionais
    # 2 - (200) GET:/v1/estudantes
    # Found 1 potential fault of type-code 200
    # Using 2 examples:
    #   1
    #   5
    @timeout_decorator.timeout(60)
    def test_46(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"dataNascimento\": \"2000-11-25\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 508 " + \
            " ], " + \
            " \"municipio\": 2403806, " + \
            " \"uf\": 14, " + \
            " \"inep\": 909, " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataIngresso\": \"2014-08-07\", " + \
            " \"dataFim\": \"2053-04-24\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=333&" + 
                    "ano_matricula=291",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 0.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 333.0
        assert res_1.json()["pagination"]["total_pages"] == 0.0
        assert res_1.json()["pagination"]["links"]["previous"] == 332.0
        assert res_1.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais/lote
    # 2 - (201) POST:/v1/estudantes/lote
    # 3 - (200) GET:/v1/profissionais/lote
    # Found 24 potential faults of type-code 200
    # Using 1 example:
    #   2025
    @timeout_decorator.timeout(60)
    def test_47(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:25:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_0.json()["data"]) == 10
        assert res_0.json()["data"][0]["dataEnvio"] == "2025-05-04 08:25:23"
        assert res_0.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][1]["dataEnvio"] == "2025-05-04 08:24:55"
        assert res_0.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][2]["dataEnvio"] == "2025-05-04 08:22:20"
        assert res_0.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 3147.0
        assert res_0.json()["pagination"]["count"] == 10.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 315.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] == 2.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"numeroNISResponsavel\": \"11037169385\", " + \
            " \"nomeMaeEstudante\": \"Ruan Vidal Filho\", " + \
            " \"cpf\": \"83871892513\", " + \
            " \"nome\": \"Hugo Teixeira\", " + \
            " \"sexo\": \"4\", " + \
            " \"numeroNIS\": \"13672073087\", " + \
            " \"rg\": \"ktAATKBkouQD\", " + \
            " \"certidaoNascimento\": \"37320441836613638645234201617484\", " + \
            " \"cnh\": \"56267273661\", " + \
            " \"logradouro\": \"94c8VN6\", " + \
            " \"cep\": \"56816522\", " + \
            " \"uf\": 24, " + \
            " \"inep\": 137, " + \
            " \"dataInicioPeriodoLetivo\": \"2097-08-28\", " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"93487265796\", " + \
            " \"numeroNISResponsavel\": \"15481446328\", " + \
            " \"nomeMaeEstudante\": \"Eric Robertson\", " + \
            " \"cpf\": \"83871892513\", " + \
            " \"dataNascimento\": \"imcqD3znTBns1\", " + \
            " \"orgaoEmissor\": \"drPB-iJ\", " + \
            " \"certidaoNascimento\": \"41065065697840608308353387765433\", " + \
            " \"cnh\": \"101302420\", " + \
            " \"logradouro\": \"Enublxc\", " + \
            " \"numero\": \"_vtDp6\", " + \
            " \"municipio\": 2507507, " + \
            " \"dataInicioMatricula\": \"2099-12-14\", " + \
            " \"matriculaRede\": \"jSowHhs\", " + \
            " \"instituicao\": 199232, " + \
            " \"inep\": 12028223, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"anoMatricula\": 2025 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"36379521750\", " + \
            " \"nomeMaeEstudante\": \"uoUPQKkc8iCGVq2wAS1\", " + \
            " \"cpf\": \"55362196421\", " + \
            " \"nome\": \"Salvador Domingues\", " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"aaron.jose.fonseca.sobrinho@fake.com\", " + \
            " \"telefone\": \"jphqM5V\", " + \
            " \"nomeSocial\": \"h0_8o0rJVSma0Rp\", " + \
            " \"cnh\": \"93517950494\", " + \
            " \"bairro\": \"São Montenegro\", " + \
            " \"cep\": \"72503614\", " + \
            " \"uf\": 33, " + \
            " \"estudantePpl\": 0, " + \
            " \"serieAno\": 58, " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 1 " + \
            " }, " + \
            " { " + \
            " \"nomeMaeEstudante\": \"HgPU7Oefnpe\", " + \
            " \"nome\": \"Aaron Pacheco Sobrinho\", " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"aaron.joaquim.da.cruz@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3 " + \
            " ], " + \
            " \"rg\": \"92825893\", " + \
            " \"orgaoEmissor\": \"SSP-AL\", " + \
            " \"certidaoNascimento\": \"28228050805048807044821304462718\", " + \
            " \"municipio\": 2611606, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"2091-00-30\", " + \
            " \"instituicao\": 135960, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 80, " + \
            " \"estudanteAnoPeriodo\": 42 " + \
            " }, " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Srta. Pérola Carvalheira\", " + \
            " \"nome\": \"ukM576TjHE\", " + \
            " \"dataNascimento\": \"1968-01-09\", " + \
            " \"genero\": 4, " + \
            " \"email\": \"aaron.luciano.sandoval.filho@fake.com\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 6, " + \
            " 913 " + \
            " ], " + \
            " \"logradouro\": \"h9EVBe4IQR1LF LJMzz\", " + \
            " \"cep\": \"S\", " + \
            " \"municipio\": 1100940, " + \
            " \"estudantePpl\": 2, " + \
            " \"matriculaRede\": \"qyWPbnYsup9Y\", " + \
            " \"inep\": 29482291, " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 3, " + \
            " \"estudanteIntegral\": 0 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:25:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_2.json()["data"]) == 10
        assert res_2.json()["data"][0]["dataEnvio"] == "2025-05-04 08:25:23"
        assert res_2.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_2.json()["data"][1]["dataEnvio"] == "2025-05-04 08:24:55"
        assert res_2.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_2.json()["data"][2]["dataEnvio"] == "2025-05-04 08:22:20"
        assert res_2.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 3147.0
        assert res_2.json()["pagination"]["count"] == 10.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 315.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 2 - (422) POST:/v1/profissionais
    # 3 - (200) GET:/v1/estudantes/inep/{inep}
    # Found 2 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_48(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/g0PHc3sgyVS/erros?page=879411623",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: g0PHc3sgyVS"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 346, " + \
            " \"cpf\": \"t_0WvaJeF2j\", " + \
            " \"nomeSocial\": \"YSCspYH2ggH\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 398, " + \
            " 308 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"logradouro\": \"\", " + \
            " \"uf\": 551, " + \
            " \"inep\": \"CuWzV5DWH58TBJt\", " + \
            " \"matriculaRede\": \"63B5bAX\", " + \
            " \"tipoVinculo\": 7, " + \
            " \"dataIngresso\": \"1942-10-18\", " + \
            " \"dataFim\": \"1974-10-24\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_1.status_code == 422
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/QnSgjUfHUS?ano_matricula=642",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 0.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais
    # 2 - (401) POST:/v1/estudantes/lote
    # 3 - (200) GET:/v1/estudantes/{cpfNis}
    # 4 - (422) PATCH:/v1/estudantes/lote
    # 5 - (200) GET:/v1/estudantes/lote
    # Found 10 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_49(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 3
        assert res_0.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][0]["cpf"] == "43839402000"
        assert res_0.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][0]["genero"] == 1.0
        assert res_0.json()["data"][0]["racaCor"] == 2.0
        assert res_0.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][0]["telefone"] is None
        assert res_0.json()["data"][0]["nomeSocial"] is None
        assert res_0.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][0]["bairro"] == "Centro"
        assert res_0.json()["data"][0]["numero"] == "123"
        assert res_0.json()["data"][0]["cep"] == "01001000"
        assert res_0.json()["data"][0]["municipio"] == 2700409.0
        assert res_0.json()["data"][0]["uf"] == 27.0
        assert res_0.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][0]["situacaoAtiva"] == True
        assert res_0.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][0]["dataFim"] is None
        assert res_0.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][0]["matriculaRede"] == "56789"
        assert res_0.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][0]["inep"] == "27014088"
        assert len(res_0.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][1]["cpf"] == "33722248094"
        assert res_0.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][1]["genero"] == 1.0
        assert res_0.json()["data"][1]["racaCor"] == 2.0
        assert res_0.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][1]["telefone"] is None
        assert res_0.json()["data"][1]["nomeSocial"] is None
        assert res_0.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][1]["bairro"] == "Centro"
        assert res_0.json()["data"][1]["numero"] == "123"
        assert res_0.json()["data"][1]["cep"] == "01001000"
        assert res_0.json()["data"][1]["municipio"] == 2700409.0
        assert res_0.json()["data"][1]["uf"] == 27.0
        assert res_0.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][1]["situacaoAtiva"] == True
        assert res_0.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][1]["dataFim"] is None
        assert res_0.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][1]["matriculaRede"] == "56789"
        assert res_0.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][1]["inep"] == "27014088"
        assert len(res_0.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][2]["cpf"] == "31863200037"
        assert res_0.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][2]["genero"] == 1.0
        assert res_0.json()["data"][2]["racaCor"] == 2.0
        assert res_0.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][2]["telefone"] is None
        assert res_0.json()["data"][2]["nomeSocial"] is None
        assert res_0.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][2]["bairro"] == "Centro"
        assert res_0.json()["data"][2]["numero"] == "123"
        assert res_0.json()["data"][2]["cep"] == "01001000"
        assert res_0.json()["data"][2]["municipio"] == 2700409.0
        assert res_0.json()["data"][2]["uf"] == 27.0
        assert res_0.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][2]["situacaoAtiva"] == True
        assert res_0.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][2]["dataFim"] is None
        assert res_0.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][2]["matriculaRede"] == "56789"
        assert res_0.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][2]["inep"] == "27014088"
        assert len(res_0.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["pagination"]["total"] == 3.0
        assert res_0.json()["pagination"]["count"] == 3.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes/lote -> Response status 401 not defined for path '/v1/estudantes/lote'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"16075277820\", " + \
            " \"nomeMaeEstudante\": \"Mariah Tainara Beltrão\", " + \
            " \"cpf\": \"22047813719\", " + \
            " \"nome\": \"sg1X91VF\", " + \
            " \"dataNascimento\": \"gvqk6xc9wi55oWW\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"aaron.pablo.galvao.jr@fake.com\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"numeroNIS\": \"47846810317\", " + \
            " \"cnh\": \"11111111111\", " + \
            " \"logradouro\": \"Rua Avenida Padrão\", " + \
            " \"bairro\": \"São Zaragoça\", " + \
            " \"municipio\": 4314902, " + \
            " \"estudantePpl\": 2, " + \
            " \"dataInicioMatricula\": \"2088-04-09\", " + \
            " \"serieAno\": 27, " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"32215093443\", " + \
            " \"cpf\": \"75275206399\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 1, " + \
            " \"numeroNIS\": \"47846810317\", " + \
            " \"orgaoEmissor\": \"Y8vM58AJX\", " + \
            " \"cnh\": \"01795610220\", " + \
            " \"uf\": 51, " + \
            " \"estudantePpl\": 0, " + \
            " \"serieAno\": 417, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 287, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"\", " + \
            " \"nome\": \"Dra. Roberta Cavalcanti\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"9MyiSJdO\", " + \
            " \"nomeSocial\": \"5SLvmPsctE5\", " + \
            " \"rg\": \"ZYN5IqFhxYXyHWhq\", " + \
            " \"logradouro\": \"\", " + \
            " \"numero\": \"853\", " + \
            " \"cep\": \"34526909\", " + \
            " \"municipio\": 3106200, " + \
            " \"uf\": 11, " + \
            " \"serieAno\": 27, " + \
            " \"matriculaRede\": \"jSowHhs\", " + \
            " \"inep\": 72, " + \
            " \"dataInicioPeriodoLetivo\": \"1970-13-14\", " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2025 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"31408669684\", " + \
            " \"nome\": \"Dra. Mathias Braga\", " + \
            " \"genero\": 4, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"swNBixC\", " + \
            " \"nomeSocial\": \"RsOLwyuuUB3\", " + \
            " \"sexo\": \"1\", " + \
            " \"numeroNIS\": \"80641647113\", " + \
            " \"rg\": \"5665487965973828\", " + \
            " \"orgaoEmissor\": \"SSP-SP\", " + \
            " \"logradouro\": \"Rua Travessa Daniel Martines\", " + \
            " \"bairro\": \"São Matias\", " + \
            " \"cep\": \"29835187\", " + \
            " \"uf\": 15, " + \
            " \"estudantePpl\": 0, " + \
            " \"dataInicioMatricula\": \"2011-10-32\", " + \
            " \"inep\": 41069005, " + \
            " \"dataInicioPeriodoLetivo\": \"1964-02-00\", " + \
            " \"formaOrganizacaoTurma\": 246, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 3 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 401
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/29072517407",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert res_2.json()["data"]["cpf"] == "29072517407"
        assert res_2.json()["data"]["nome"] == "Aaron Adriano Reis"
        assert res_2.json()["data"]["nomeSocial"] is None
        assert res_2.json()["data"]["numeroNIS"] == "01447378412"
        assert res_2.json()["data"]["rg"] == "4202707096173021"
        assert res_2.json()["data"]["orgaoEmissor"] == "SSP-AL"
        assert res_2.json()["data"]["cpfResponsavel"] == "12010474716"
        assert res_2.json()["data"]["nomeMaeEstudante"] == "Jaqueline Carmona Batista Jr."
        assert res_2.json()["data"]["numeroNISResponsavel"] == "88396499957"
        assert res_2.json()["data"]["dataNascimento"] == "2006-07-20"
        assert res_2.json()["data"]["logradouro"] == "Rua R. Anderson Assunção"
        assert res_2.json()["data"]["bairro"] == "São Roque"
        assert res_2.json()["data"]["numero"] == "99"
        assert res_2.json()["data"]["cep"] == "54124789"
        assert res_2.json()["data"]["municipio"] == 2704302.0
        assert res_2.json()["data"]["certidaoNascimento"] == "28420212754886785533318883677481"
        assert res_2.json()["data"]["cnh"] is None
        assert res_2.json()["data"]["uf"] == 27.0
        assert res_2.json()["data"]["racaCor"] == 2.0
        assert len(res_2.json()["data"]["tipoDeficiencia"]) == 0
        assert res_2.json()["data"]["genero"] == 0.0
        assert res_2.json()["data"]["telefone"] is None
        assert res_2.json()["data"]["email"] is None
        assert res_2.json()["data"]["situacaoCadastroValidado"] is None
        assert len(res_2.json()["data"]["matriculas"]) == 1
        assert res_2.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 6933001.0
        assert res_2.json()["data"]["matriculas"][0]["codInstituicao"] == 148482.0
        assert res_2.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_2.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_2.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_2.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_2.json()["data"]["matriculas"][0]["serieAno"] == 45.0
        assert res_2.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_2.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_2.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_2.json()["data"]["matriculas"][0]["inep"] == "33225605"
        assert res_2.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_2.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_2.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_2.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_2.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_2.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_2.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_2.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_2.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_2.json()["data"]["outrasMatriculas"]) == 0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 422
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Não foi possível processar as informações."
        assert res_3.json()["errors"]["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?per_page=15",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_4.json()["data"]) == 15
        assert res_4.json()["data"][0]["dataEnvio"] == "2025-05-04 08:30:57"
        assert res_4.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_4.json()["data"][1]["dataEnvio"] == "2025-05-04 08:30:27"
        assert res_4.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_4.json()["data"][2]["dataEnvio"] == "2025-05-04 08:30:04"
        assert res_4.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_4.json()["pagination"]["total"] == 10543.0
        assert res_4.json()["pagination"]["count"] == 15.0
        assert res_4.json()["pagination"]["per_page"] == 15.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 703.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (404) GET:/v1/estudantes/validacao-cadastro
    # 2 - (200) GET:/v1/profissionais/lote
    # 3 - (404) GET:/v1/profissionais/{cpf}
    # 4 - (200) GET:/v1/estudantes/lote
    # Found 16 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_50(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 404 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "page=292&" + 
                    "cpf=QbzxNC3Gf2NlZjS8",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro inesperado."
        assert res_0.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:32:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:32:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:31:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:31:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:29:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:29:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:27:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:25:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_1.json()["data"]) == 10
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-05-04 08:32:55"
        assert res_1.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-05-04 08:32:25"
        assert res_1.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-05-04 08:31:48"
        assert res_1.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 3154.0
        assert res_1.json()["pagination"]["count"] == 10.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 316.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] == 2.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/o4aZXQW0",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["dataEnvio"] == "2025-05-04 08:33:48"
        assert res_3.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][1]["dataEnvio"] == "2025-05-04 08:33:09"
        assert res_3.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][2]["dataEnvio"] == "2025-05-04 08:33:05"
        assert res_3.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 10547.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 1055.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 2 - (200) GET:/v1/profissionais
    # 3 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 4 - (404) GET:/v1/profissionais/{cpf}
    # 5 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 6 - (200) GET:/v1/profissionais/lote/{id}
    # Found 6 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_51(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/7302007515655337/erros?per_page=113",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 7302007515655337"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=898&" + 
                    "per_page=685",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 3.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 685.0
        assert res_1.json()["pagination"]["current_page"] == 898.0
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] == 897.0
        assert res_1.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/3596768274763285/erros?page=245",
                    headers=headers)
        
        assert res_2.status_code == 400
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "O ID fornecido não é um UUID válido. ID: 3596768274763285"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/fUOgacwklgheF9ou",
                    headers=headers)
        
        assert res_3.status_code == 404
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/j6Suj/erros?" + 
                    "page=962&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_4.status_code == 400
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "O ID fornecido não é um UUID válido. ID: j6Suj"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/0046cde2-bad8-4f3f-b065-6e330592f8d9?" + 
                    "page=208&" + 
                    "incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["status_processamento"] == "Enviado"
        assert res_5.json()["message"] == "Lote recuperado com sucesso. ID: 0046cde2-bad8-4f3f-b065-6e330592f8d9"
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais
    # 2 - (201) POST:/v1/profissionais/lote
    # 3 - (200) GET:/v1/estudantes/lote
    # 4 - (200) GET:/v1/profissionais/inep/{inep}
    # Found 8 potential faults of type-code 200
    # Using 2 examples:
    #   1
    #   2014
    @timeout_decorator.timeout(60)
    def test_52(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=192",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 3.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 192.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] == 191.0
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 765, " + \
            " \"cpf\": \"99379112300\", " + \
            " \"nome\": \"Dustin Carter\", " + \
            " \"dataNascimento\": \"1966-11-02\", " + \
            " \"genero\": 3, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"aaron.meireles.jr@fake.com\", " + \
            " \"sexo\": \"3\", " + \
            " \"bairro\": \"AFTER-TWO\", " + \
            " \"numero\": \"7829\", " + \
            " \"municipio\": 2408102, " + \
            " \"inep\": \"29146631\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 984 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 455, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"ceNc5zi7\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 121, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 730, " + \
            " \"dataFim\": \"1963-09-12\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"25537802651\", " + \
            " \"racaCor\": 3, " + \
            " \"nomeSocial\": \"jQUcBbo7g0e\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 681 " + \
            " ], " + \
            " \"numero\": \"979\", " + \
            " \"cep\": \"98005381\", " + \
            " \"municipio\": 275, " + \
            " \"uf\": 35, " + \
            " \"inep\": 736, " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataFim\": \"1988-07-25\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_2.json()["data"]) == 10
        assert res_2.json()["data"][0]["dataEnvio"] == "2025-05-04 08:27:24"
        assert res_2.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_2.json()["data"][1]["dataEnvio"] == "2025-05-04 08:25:29"
        assert res_2.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_2.json()["data"][2]["dataEnvio"] == "2025-05-04 08:24:38"
        assert res_2.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 10538.0
        assert res_2.json()["pagination"]["count"] == 10.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1054.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/32043635?" + 
                    "page=467&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_3.json()["data"]) == 0
        assert res_3.json()["pagination"]["total"] == 0.0
        assert res_3.json()["pagination"]["count"] == 0.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 467.0
        assert res_3.json()["pagination"]["total_pages"] == 1.0
        assert res_3.json()["pagination"]["links"]["previous"] == 466.0
        assert res_3.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (200) GET:/v1/profissionais
    # 3 - (200) GET:/v1/profissionais/lote
    # 4 - (400) GET:/v1/profissionais/lote/{id}
    # 5 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 6 - (422) POST:/v1/profissionais
    # Found 7 potential faults of type-code 200
    # Using 2 examples:
    #   1
    #   5
    @timeout_decorator.timeout(60)
    def test_53(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"kVJZW3HB\", " + \
            " \"nome\": \"9Gg\", " + \
            " \"email\": \"OixQguQG6wVL61hM\", " + \
            " \"telefone\": \"KaExxl9nDjJ0U\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 108, " + \
            " 777, " + \
            " 384 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"bairro\": \"\", " + \
            " \"numero\": \"g6\", " + \
            " \"cep\": \"YX\", " + \
            " \"inep\": 847, " + \
            " \"cargaHoraria\": 364 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 321647365, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"h2\", " + \
            " \"dataNascimento\": \"Tu0\", " + \
            " \"email\": \"d7_Qek\", " + \
            " \"logradouro\": \"j\", " + \
            " \"bairro\": \"BG18jadwkvjq5y2\", " + \
            " \"inep\": 26, " + \
            " \"matriculaRede\": \"6Fe7QVyb\", " + \
            " \"tipoVinculo\": 531, " + \
            " \"dataFim\": \"2032-13-11\", " + \
            " \"cargaHoraria\": 508 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=221",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 3.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 221.0
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] == 220.0
        assert res_1.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?page=971",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 3146.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 971.0
        assert res_2.json()["pagination"]["total_pages"] == 315.0
        assert res_2.json()["pagination"]["links"]["previous"] == 970.0
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/xq3_ZTHeJ16pq?" + 
                    "page=459&" + 
                    "per_page=482&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_3.status_code == 400
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "O ID fornecido não é um UUID válido. ID: xq3_ZTHeJ16pq"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/T2auH/erros",
                    headers=headers)
        
        assert res_4.status_code == 400
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "O ID fornecido não é um UUID válido. ID: T2auH"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"dataNascimento\": \"kQRu1z743skN20t\", " + \
            " \"genero\": 6, " + \
            " \"telefone\": \"v0OkhdokH8_LxEw\", " + \
            " \"nomeSocial\": \"w2KqcmgaAWX5\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 414, " + \
            " 651, " + \
            " 655, " + \
            " 632, " + \
            " 233 " + \
            " ], " + \
            " \"bairro\": \"2X\", " + \
            " \"numero\": \"hL9C\", " + \
            " \"cep\": \"VUf\", " + \
            " \"municipio\": 638141161, " + \
            " \"uf\": 903, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 504, " + \
            " \"anoInicioFormacaoAcademica\": 718, " + \
            " \"anoConclusaoFormacaoAcademica\": 336 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"MySAc3NzZzzWMK\" " + \
            " } " + \
            " ], " + \
            " \"inep\": 807, " + \
            " \"matriculaRede\": \"a57yQegQhV\", " + \
            " \"tipoVinculo\": 915, " + \
            " \"codigoFuncao\": 385, " + \
            " \"dataFim\": \"1930-07-24\", " + \
            " \"cargaHoraria\": 106 " + \
            " } "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_5.status_code == 422
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes/lote/{id}
    # 2 - (201) POST:/v1/profissionais/lote
    # 3 - (200) GET:/v1/profissionais
    # 4 - (200) GET:/v1/estudantes/validacao-cadastro
    # 5 - (404) GET:/v1/profissionais/{cpf}
    # Found 11 potential faults of type-code 200
    # Using 3 examples:
    #   1
    #   2010
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_54(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/3c7e453c-3f93-46f7-9c76-22ebcc002aeb?page=11",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["status_processamento"] == "Processado com erro"
        assert res_0.json()["message"] == "Lote recuperado com sucesso. ID: 3c7e453c-3f93-46f7-9c76-22ebcc002aeb, para consultar verifique a rota https://api-cmde.api.pedemeia-dev.nees.ufal.br/v1/estudantes/lote/3c7e453c-3f93-46f7-9c76-22ebcc002aeb/erros"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"07113251706\", " + \
            " \"dataNascimento\": \"2010-06-05\", " + \
            " \"racaCor\": 3, " + \
            " \"email\": \"aaron.ferreira@fake.com\", " + \
            " \"logradouro\": \"USCGC Powers\\nFPO AP 57305\", " + \
            " \"bairro\": \"d\", " + \
            " \"numero\": \"8232\", " + \
            " \"municipio\": 1200203, " + \
            " \"uf\": 13, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " } " + \
            " ], " + \
            " \"inep\": 41352610, " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"1993-10-01\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"38485232640\", " + \
            " \"dataNascimento\": \"uHQPDWDHXM9h\", " + \
            " \"genero\": 3, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"CZSMcR4\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"nomeSocial\": \"l5ouyha9rQk\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 3, " + \
            " 1, " + \
            " 10 " + \
            " ], " + \
            " \"logradouro\": \"Rua R. Lara\", " + \
            " \"cep\": \"76661910\", " + \
            " \"inep\": \"29162840\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\" " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 818, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 197 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 139, " + \
            " \"nome\": \"Aaron Montenegro Vieira Filho\", " + \
            " \"dataNascimento\": \"2005-11-20\", " + \
            " \"genero\": 3, " + \
            " \"telefone\": \"qWpOyA\", " + \
            " \"nomeSocial\": \"pCifpRBMCpY\", " + \
            " \"logradouro\": \"Rua Av. Raissa\", " + \
            " \"bairro\": \"São Padrão\", " + \
            " \"numero\": \"w\", " + \
            " \"municipio\": 3106200, " + \
            " \"uf\": 26, " + \
            " \"inep\": \"naZc\", " + \
            " \"tipoVinculo\": 286, " + \
            " \"dataIngresso\": \"1923-02-27\", " + \
            " \"dataFim\": \"2032-12-12\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 3
        assert res_2.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"][0]["cpf"] == "43839402000"
        assert res_2.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_2.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"][0]["genero"] == 1.0
        assert res_2.json()["data"][0]["racaCor"] == 2.0
        assert res_2.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"][0]["telefone"] is None
        assert res_2.json()["data"][0]["nomeSocial"] is None
        assert res_2.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"][0]["bairro"] == "Centro"
        assert res_2.json()["data"][0]["numero"] == "123"
        assert res_2.json()["data"][0]["cep"] == "01001000"
        assert res_2.json()["data"][0]["municipio"] == 2700409.0
        assert res_2.json()["data"][0]["uf"] == 27.0
        assert res_2.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_2.json()["data"][0]["situacaoAtiva"] == True
        assert res_2.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"][0]["dataFim"] is None
        assert res_2.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_2.json()["data"][0]["matriculaRede"] == "56789"
        assert res_2.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_2.json()["data"][0]["inep"] == "27014088"
        assert len(res_2.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"][1]["cpf"] == "33722248094"
        assert res_2.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_2.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"][1]["genero"] == 1.0
        assert res_2.json()["data"][1]["racaCor"] == 2.0
        assert res_2.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"][1]["telefone"] is None
        assert res_2.json()["data"][1]["nomeSocial"] is None
        assert res_2.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"][1]["bairro"] == "Centro"
        assert res_2.json()["data"][1]["numero"] == "123"
        assert res_2.json()["data"][1]["cep"] == "01001000"
        assert res_2.json()["data"][1]["municipio"] == 2700409.0
        assert res_2.json()["data"][1]["uf"] == 27.0
        assert res_2.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_2.json()["data"][1]["situacaoAtiva"] == True
        assert res_2.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"][1]["dataFim"] is None
        assert res_2.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_2.json()["data"][1]["matriculaRede"] == "56789"
        assert res_2.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_2.json()["data"][1]["inep"] == "27014088"
        assert len(res_2.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_2.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_2.json()["data"][2]["cpf"] == "31863200037"
        assert res_2.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_2.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_2.json()["data"][2]["genero"] == 1.0
        assert res_2.json()["data"][2]["racaCor"] == 2.0
        assert res_2.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_2.json()["data"][2]["telefone"] is None
        assert res_2.json()["data"][2]["nomeSocial"] is None
        assert res_2.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_2.json()["data"][2]["bairro"] == "Centro"
        assert res_2.json()["data"][2]["numero"] == "123"
        assert res_2.json()["data"][2]["cep"] == "01001000"
        assert res_2.json()["data"][2]["municipio"] == 2700409.0
        assert res_2.json()["data"][2]["uf"] == 27.0
        assert res_2.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_2.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_2.json()["data"][2]["situacaoAtiva"] == True
        assert res_2.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_2.json()["data"][2]["dataFim"] is None
        assert res_2.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_2.json()["data"][2]["matriculaRede"] == "56789"
        assert res_2.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_2.json()["data"][2]["inep"] == "27014088"
        assert len(res_2.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_2.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_2.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_2.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_2.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_2.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_2.json()["pagination"]["total"] == 3.0
        assert res_2.json()["pagination"]["count"] == 3.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?cpf=46224603359",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        assert len(res_3.json()["data"]) == 1
        assert res_3.json()["data"][0]["cpf"] == "46224603359"
        assert res_3.json()["data"][0]["numeroNIS"] == "06546028458"
        assert res_3.json()["data"][0]["situacaoCadastral"] == "Inexistente"
        assert res_3.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_3.json()["data"][0]["nome"] == "Eloah Negrão"
        assert res_3.json()["data"][0]["nomeValidado"] == False
        assert res_3.json()["data"][0]["dataNascimento"] == "1998-10-05"
        assert res_3.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_3.json()["data"][0]["nomeMaeEstudante"] == "Danilo Conceição"
        assert res_3.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_3.json()["data"][0]["dataValidacaoCadastral"] == "2025-05-01 18:03:37"
        assert res_3.json()["pagination"]["total"] == 1.0
        assert res_3.json()["pagination"]["count"] == 1.0
        assert res_3.json()["pagination"]["per_page"] == 15.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 1.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/37044196802",
                    headers=headers)
        
        assert res_4.status_code == 404
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Nenhum profissional de educação encontrado."
    
    
    # Calls:
    # 1 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 2 - (200) GET:/v1/profissionais
    # 3 - (200) GET:/v1/profissionais/inep/{inep}
    # 4 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 5 - (404) GET:/v1/estudantes/validacao-cadastro
    # Found 7 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_55(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/8IEfLXieS/erros",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 8IEfLXieS"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=254&" + 
                    "per_page=515",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 3.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 515.0
        assert res_1.json()["pagination"]["current_page"] == 254.0
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] == 253.0
        assert res_1.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/33007411?page=2045512253",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 0.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 2.045512253E9
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] == 2.045512252E9
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "page=851&" + 
                    "per_page=374&" + 
                    "cpfAtual=32967416231&" + 
                    "cpfNovo=EbNO6yc13wgz2o",
                    headers=headers)
        
        assert res_3.status_code == 404
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro inesperado."
        assert res_3.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 404 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "page=724&" + 
                    "per_page=740&" + 
                    "cpf=TWXDUBuS7Huvw",
                    headers=headers)
        
        assert res_4.status_code == 404
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Ocorreu um erro inesperado."
        assert res_4.json()["errors"]["message"] == "Nenhum dado encontrado"
    
    
    # Calls:
    # 1 - (200) PATCH:/v1/estudantes/lote
    # 2 - (200) GET:/v1/profissionais/inep/{inep}
    # 3 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 4 - (200) GET:/v1/estudantes
    # 5 - (201) POST:/v1/profissionais/lote
    # Found 5 potential faults of type-code 200
    # Using 4 examples:
    #   1
    #   2014
    #   44
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_56(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_26_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_0.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/04PL2zdWm?page=1984377684",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 0.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 1.984377684E9
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] == 1.984377683E9
        assert res_1.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "page=297&" + 
                    "cpfAtual=c4h4bjN2eY0",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro inesperado."
        assert res_2.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=52&" + 
                    "situacao_matricula=INATIVAS&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["cpf"] == "28881571528"
        assert res_3.json()["data"][0]["nome"] == "Henrique da Madureira"
        assert res_3.json()["data"][0]["nomeSocial"] is None
        assert res_3.json()["data"][0]["numeroNIS"] == "87422846675"
        assert res_3.json()["data"][0]["rg"] == "09008030261465571551"
        assert res_3.json()["data"][0]["orgaoEmissor"] == "zDhj-nT"
        assert res_3.json()["data"][0]["cpfResponsavel"] == "81031307374"
        assert res_3.json()["data"][0]["nomeMaeEstudante"] == "Ana Lívia Santos"
        assert res_3.json()["data"][0]["numeroNISResponsavel"] == "03992573209"
        assert res_3.json()["data"][0]["dataNascimento"] == "1970-05-31"
        assert res_3.json()["data"][0]["logradouro"] == "Viela Enzo Gabriel Martim"
        assert res_3.json()["data"][0]["bairro"] == "Bairro ducimus"
        assert res_3.json()["data"][0]["numero"] == "222"
        assert res_3.json()["data"][0]["cep"] == "36443254"
        assert res_3.json()["data"][0]["municipio"] == 2508901.0
        assert res_3.json()["data"][0]["certidaoNascimento"] == "37320441836613638645234201617484"
        assert res_3.json()["data"][0]["cnh"] == "01795610220"
        assert res_3.json()["data"][0]["uf"] == 13.0
        assert res_3.json()["data"][0]["racaCor"] == 1.0
        assert len(res_3.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][0]["tipoDeficiencia"][0] == 4.0
        assert res_3.json()["data"][0]["tipoDeficiencia"][1] == 6.0
        assert res_3.json()["data"][0]["tipoDeficiencia"][2] == 4.0
        assert res_3.json()["data"][0]["genero"] == 3.0
        assert res_3.json()["data"][0]["telefone"] == "16982231381"
        assert res_3.json()["data"][0]["email"] == "teste@test.com"
        assert res_3.json()["data"][0]["situacaoCadastroValidado"] == 4.0
        assert len(res_3.json()["data"][0]["matriculas"]) == 1
        assert res_3.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 1226795.0
        assert res_3.json()["data"][0]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "1971-01-12"
        assert res_3.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] == "1999-06-22"
        assert res_3.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == False
        assert res_3.json()["data"][0]["matriculas"][0]["serieAno"] == 6.0
        assert res_3.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Fundamental de 8 anos"
        assert res_3.json()["data"][0]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["deletadaEm"] == "2024-05-03 06:30:29"
        assert res_3.json()["data"][0]["matriculas"][0]["inep"] == "27014088"
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][1]["cpf"] == "62526510953"
        assert res_3.json()["data"][1]["nome"] == "Henrique Neves"
        assert res_3.json()["data"][1]["nomeSocial"] is None
        assert res_3.json()["data"][1]["numeroNIS"] == "28673891480"
        assert res_3.json()["data"][1]["rg"] == "82287757567747388548"
        assert res_3.json()["data"][1]["orgaoEmissor"] == "xYHJ-Ht"
        assert res_3.json()["data"][1]["cpfResponsavel"] == "71968382282"
        assert res_3.json()["data"][1]["nomeMaeEstudante"] == "Ayla Arriaga"
        assert res_3.json()["data"][1]["numeroNISResponsavel"] == "47083648668"
        assert res_3.json()["data"][1]["dataNascimento"] == "1994-08-31"
        assert res_3.json()["data"][1]["logradouro"] == "Rodovia Gúbio"
        assert res_3.json()["data"][1]["bairro"] == "Bairro similique"
        assert res_3.json()["data"][1]["numero"] == "226"
        assert res_3.json()["data"][1]["cep"] == "36482571"
        assert res_3.json()["data"][1]["municipio"] == 4104659.0
        assert res_3.json()["data"][1]["certidaoNascimento"] == "86411179346787316742184176550013"
        assert res_3.json()["data"][1]["cnh"] == "81728064741"
        assert res_3.json()["data"][1]["uf"] == 51.0
        assert res_3.json()["data"][1]["racaCor"] == 2.0
        assert len(res_3.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][1]["tipoDeficiencia"][0] == 5.0
        assert res_3.json()["data"][1]["tipoDeficiencia"][1] == 9.0
        assert res_3.json()["data"][1]["tipoDeficiencia"][2] == 10.0
        assert res_3.json()["data"][1]["genero"] == 2.0
        assert res_3.json()["data"][1]["telefone"] is None
        assert res_3.json()["data"][1]["email"] is None
        assert res_3.json()["data"][1]["situacaoCadastroValidado"] == 3.0
        assert len(res_3.json()["data"][1]["matriculas"]) == 1
        assert res_3.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 1226215.0
        assert res_3.json()["data"][1]["matriculas"][0]["codInstituicao"] == 223381.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "1995-09-16"
        assert res_3.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] == "1976-12-02"
        assert res_3.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == False
        assert res_3.json()["data"][1]["matriculas"][0]["serieAno"] == 48.0
        assert res_3.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_3.json()["data"][1]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["deletadaEm"] == "2024-05-02 20:51:52"
        assert res_3.json()["data"][1]["matriculas"][0]["inep"] == "27610099"
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][2]["cpf"] == "18404357129"
        assert res_3.json()["data"][2]["nome"] == "Henry Alves"
        assert res_3.json()["data"][2]["nomeSocial"] is None
        assert res_3.json()["data"][2]["numeroNIS"] == "73379337065"
        assert res_3.json()["data"][2]["rg"] == "24416360416319594906"
        assert res_3.json()["data"][2]["orgaoEmissor"] == "doxy-Mj"
        assert res_3.json()["data"][2]["cpfResponsavel"] == "88993955629"
        assert res_3.json()["data"][2]["nomeMaeEstudante"] == "Sr. Pedro Lucas da Mota"
        assert res_3.json()["data"][2]["numeroNISResponsavel"] == "30014100887"
        assert res_3.json()["data"][2]["dataNascimento"] == "1971-11-29"
        assert res_3.json()["data"][2]["logradouro"] == "Ponte Ana Laura Godins"
        assert res_3.json()["data"][2]["bairro"] == "Bairro ducimus"
        assert res_3.json()["data"][2]["numero"] == "948"
        assert res_3.json()["data"][2]["cep"] == "84096977"
        assert res_3.json()["data"][2]["municipio"] == 3500501.0
        assert res_3.json()["data"][2]["certidaoNascimento"] == "40484866072265430039721219484385"
        assert res_3.json()["data"][2]["cnh"] == "23111417870"
        assert res_3.json()["data"][2]["uf"] == 33.0
        assert res_3.json()["data"][2]["racaCor"] == 1.0
        assert len(res_3.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][2]["tipoDeficiencia"][0] == 5.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][1] == 9.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][2] == 10.0
        assert res_3.json()["data"][2]["genero"] == 1.0
        assert res_3.json()["data"][2]["telefone"] is None
        assert res_3.json()["data"][2]["email"] is None
        assert res_3.json()["data"][2]["situacaoCadastroValidado"] == 4.0
        assert len(res_3.json()["data"][2]["matriculas"]) == 1
        assert res_3.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 1226243.0
        assert res_3.json()["data"][2]["matriculas"][0]["codInstituicao"] == 223381.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "1965-10-24"
        assert res_3.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] == "2000-12-16"
        assert res_3.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == False
        assert res_3.json()["data"][2]["matriculas"][0]["serieAno"] == 36.0
        assert res_3.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio normal/magistério"
        assert res_3.json()["data"][2]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["deletadaEm"] == "2024-05-02 21:06:27"
        assert res_3.json()["data"][2]["matriculas"][0]["inep"] == "27610099"
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 1381.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 52.0
        assert res_3.json()["pagination"]["total_pages"] == 139.0
        assert res_3.json()["pagination"]["links"]["previous"] == 51.0
        assert res_3.json()["pagination"]["links"]["next"] == 53.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"58765339983\", " + \
            " \"nome\": \"Aaron Oliveira\", " + \
            " \"dataNascimento\": \"1990-08-28\", " + \
            " \"genero\": 3, " + \
            " \"telefone\": \"11909420800\", " + \
            " \"nomeSocial\": \"K4M5REPemK60\", " + \
            " \"sexo\": \"4\", " + \
            " \"bairro\": \"São Martines\", " + \
            " \"cep\": \"78486471\", " + \
            " \"municipio\": 1100940, " + \
            " \"inep\": \"1VfEih1\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"RRF5HNXQTHWaAK0\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 725, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 357 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\" " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"G8BMn2\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2062-00-09\", " + \
            " \"dataFim\": \"1974-03-09\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"15071999293\", " + \
            " \"nome\": \"Dra. Mathias Braga\", " + \
            " \"email\": \"aaron.jose.fonseca.sobrinho@fake.com\", " + \
            " \"telefone\": \"44444444444\", " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"Rua Travessa Valdez\", " + \
            " \"numero\": \"942\", " + \
            " \"uf\": 13, " + \
            " \"dataFim\": \"2035-03-05\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nome\": \"Aaron Matos Neto\", " + \
            " \"dataNascimento\": \"caZcK61Ye8Xt\", " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"aaron.pacheco.filho@fake.com\", " + \
            " \"telefone\": \"kC3\", " + \
            " \"sexo\": \"2\", " + \
            " \"logradouro\": \"Rua Rua Stephanie\", " + \
            " \"bairro\": \"São Furtado\", " + \
            " \"numero\": \"9849\", " + \
            " \"inep\": 863, " + \
            " \"codigoFuncao\": 726, " + \
            " \"dataIngresso\": \"1977-04-07\", " + \
            " \"dataFim\": \"2008-04-28\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"58929950620\", " + \
            " \"dataNascimento\": \"2009-07-10\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 295, " + \
            " 3, " + \
            " 10 " + \
            " ], " + \
            " \"logradouro\": \"lz_\", " + \
            " \"numero\": \"1621\", " + \
            " \"cep\": \"64319297\", " + \
            " \"uf\": 42, " + \
            " \"matriculaRede\": \"mtJuQA0IWA\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2065-03-30\", " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"\", " + \
            " \"nome\": \"Aaron Pablo Sepúlveda Jr.\", " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 1, " + \
            " \"telefone\": \"3333333\", " + \
            " \"bairro\": \"\", " + \
            " \"cep\": \"28903332\", " + \
            " \"municipio\": 1100940, " + \
            " \"inep\": 29477735, " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 1 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 201
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Operação realizada com sucesso"
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes
    # 2 - (200) GET:/v1/profissionais/lote
    # Found 21 potential faults of type-code 200
    # Using 1 example:
    #   2024
    @timeout_decorator.timeout(60)
    def test_57(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=523&" + 
                    "per_page=515&" + 
                    "situacao_matricula=INATIVAS&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 1381.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 515.0
        assert res_0.json()["pagination"]["current_page"] == 523.0
        assert res_0.json()["pagination"]["total_pages"] == 3.0
        assert res_0.json()["pagination"]["links"]["previous"] == 522.0
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:11:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:09:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 08:08:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 08:07:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 08:06:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 08:03:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 08:02:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/15/dataEnvio'] String "2025-05-04 08:02:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/16/dataEnvio'] String "2025-05-04 08:01:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/17/dataEnvio'] String "2025-05-04 08:00:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=18",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_1.json()["data"]) == 18
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-05-04 08:22:20"
        assert res_1.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-05-04 08:22:11"
        assert res_1.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-05-04 08:21:07"
        assert res_1.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 15 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 3145.0
        assert res_1.json()["pagination"]["count"] == 18.0
        assert res_1.json()["pagination"]["per_page"] == 18.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 175.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (200) GET:/v1/estudantes/lote
    # 3 - (200) GET:/v1/estudantes/inep/{inep}
    # 4 - (200) GET:/v1/estudantes
    # Found 5 potential faults of type-code 200
    # Using 1 example:
    #   2024
    @timeout_decorator.timeout(60)
    def test_58(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"Ev2dWu\", " + \
            " \"numeroNISResponsavel\": \"12275208509\", " + \
            " \"nome\": \"Bruna Carreira Filho\", " + \
            " \"dataNascimento\": \"1973-06-08\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 3, " + \
            " \"email\": \"elegibel@elegivel.com\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"03799101008\", " + \
            " \"rg\": \"0062919137021699\", " + \
            " \"orgaoEmissor\": \"viC\", " + \
            " \"certidaoNascimento\": \"55697160246104703452357218853897\", " + \
            " \"cnh\": \"101302420\", " + \
            " \"logradouro\": \"m19wsiD6OkzEM1\", " + \
            " \"bairro\": \"São Marques\", " + \
            " \"municipio\": 4314902, " + \
            " \"uf\": 13, " + \
            " \"estudantePpl\": 0, " + \
            " \"dataInicioMatricula\": \"2095-01-13\", " + \
            " \"instituicao\": 28213, " + \
            " \"inep\": 29162840 " + \
            " }, " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Ayla Arriaga\", " + \
            " \"nome\": \"Aaron Adriano Reis\", " + \
            " \"dataNascimento\": \"1969-02-07\", " + \
            " \"email\": \"aaron.icaro.neves@fake.com\", " + \
            " \"nomeSocial\": \"oZymDIPtU\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 2, " + \
            " 1, " + \
            " 2, " + \
            " 1 " + \
            " ], " + \
            " \"numeroNIS\": \"29009531546\", " + \
            " \"rg\": \"a5DbHpceeUhthv\", " + \
            " \"certidaoNascimento\": \"05908385311724052959548360139495\", " + \
            " \"logradouro\": \"USCGC Powers\\nFPO AP 57305\", " + \
            " \"bairro\": \"São Sandoval\", " + \
            " \"numero\": \"9849\", " + \
            " \"municipio\": 1100940, " + \
            " \"uf\": 11, " + \
            " \"estudantePpl\": 0, " + \
            " \"serieAno\": 44, " + \
            " \"instituicao\": 136329, " + \
            " \"dataInicioPeriodoLetivo\": \"2092-02-32\", " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteIntegral\": 1, " + \
            " \"anoMatricula\": 2025 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_1.json()["data"]) == 10
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-05-04 08:33:48"
        assert res_1.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-05-04 08:33:09"
        assert res_1.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-05-04 08:33:05"
        assert res_1.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 10547.0
        assert res_1.json()["pagination"]["count"] == 10.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 1055.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/12033278?" + 
                    "page=330&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 2499.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 330.0
        assert res_2.json()["pagination"]["total_pages"] == 250.0
        assert res_2.json()["pagination"]["links"]["previous"] == 329.0
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=71&" + 
                    "per_page=685&" + 
                    "ano_matricula=2025",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_3.json()["data"]) == 0
        assert res_3.json()["pagination"]["total"] == 235.0
        assert res_3.json()["pagination"]["count"] == 0.0
        assert res_3.json()["pagination"]["per_page"] == 685.0
        assert res_3.json()["pagination"]["current_page"] == 71.0
        assert res_3.json()["pagination"]["total_pages"] == 1.0
        assert res_3.json()["pagination"]["links"]["previous"] == 70.0
        assert res_3.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (422) POST:/v1/profissionais
    # 2 - (200) GET:/v1/profissionais/lote
    # 3 - (422) POST:/v1/profissionais
    # 4 - (201) POST:/v1/profissionais/lote
    # 5 - (422) PATCH:/v1/estudantes/lote
    # 6 - (200) GET:/v1/estudantes/lote
    # 7 - (200) GET:/v1/estudantes/lote/{id}
    # 8 - (200) GET:/v1/profissionais/inep/{inep}
    # Found 19 potential faults of type-code 200
    # Using 5 examples:
    #   1
    #   123456789
    #   2014
    #   5
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_59(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 966, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"dataNascimento\": \"8KE7wkg3\", " + \
            " \"genero\": 8, " + \
            " \"racaCor\": 4, " + \
            " \"tipoDeficiencia\": [ " + \
            " 140 " + \
            " ], " + \
            " \"logradouro\": \"ctDMnvYJ1NxVgQ_R\", " + \
            " \"bairro\": \"JIQOC\", " + \
            " \"numero\": \"C\", " + \
            " \"municipio\": 565, " + \
            " \"uf\": 767, " + \
            " \"formacoesAcademicas\": [], " + \
            " \"codigoFuncao\": 236, " + \
            " \"dataIngresso\": \"1939-13-12\", " + \
            " \"dataFim\": \"2012-05-07\", " + \
            " \"cargaHoraria\": 456 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:31:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:29:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:29:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:27:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:25:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_1.json()["data"]) == 10
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-05-04 08:31:22"
        assert res_1.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-05-04 08:29:15"
        assert res_1.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-05-04 08:29:07"
        assert res_1.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 3151.0
        assert res_1.json()["pagination"]["count"] == 10.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 316.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] == 2.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nome\": \"9jj98AJ\", " + \
            " \"dataNascimento\": \"R2RFQKDbOXICrl\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"G10n29ab\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"logradouro\": \"iB0AjR9PA\", " + \
            " \"bairro\": \"m8qt_gQu\", " + \
            " \"municipio\": 976, " + \
            " \"uf\": 956, " + \
            " \"inep\": 838, " + \
            " \"dataIngresso\": \"2008-11-25\", " + \
            " \"dataFim\": \"2008-10-22\", " + \
            " \"cargaHoraria\": 730 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_2.status_code == 422
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "O campo tipoEnsinoMedio deve ser um número inteiro. (and 2 more errors)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"email\": \"_an\", " + \
            " \"telefone\": \"2P9QBK1b\", " + \
            " \"logradouro\": \"Lv\", " + \
            " \"cep\": \"89swK0d\", " + \
            " \"municipio\": 221, " + \
            " \"uf\": 370, " + \
            " \"inep\": 632, " + \
            " \"formacoesAcademicas\": [], " + \
            " \"codigoFuncao\": 30, " + \
            " \"dataFim\": \"1969-00-12\" " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"_Hmsm7wH\", " + \
            " \"nome\": \"vkealgV\", " + \
            " \"genero\": 6, " + \
            " \"email\": \"bXLgUpJ\", " + \
            " \"telefone\": \"KLa4u1oacmeS3b\", " + \
            " \"nomeSocial\": \"0PWmhqYXv\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 694 " + \
            " ], " + \
            " \"logradouro\": \"u3P8_8vh4U\", " + \
            " \"numero\": \"I48uGh\", " + \
            " \"cep\": \"h\", " + \
            " \"municipio\": 788, " + \
            " \"inep\": \"nBv78RIAYGuB\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 484, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"_fN\", " + \
            " \"anoInicioFormacaoAcademica\": 293, " + \
            " \"anoConclusaoFormacaoAcademica\": 299 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 585, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoConclusaoFormacaoAcademica\": 405 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"zG4\", " + \
            " \"anoInicioFormacaoAcademica\": 179 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 872, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"DCu\" " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"tipoVinculo\": 869, " + \
            " \"codigoFuncao\": 247, " + \
            " \"dataFim\": \"2008-06-15\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 337, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"nome\": \"58\", " + \
            " \"dataNascimento\": \"DAVdzGJEz9ugXjce\", " + \
            " \"genero\": 4, " + \
            " \"email\": \"tobrTuuJdTEcn\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 230 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"logradouro\": \"nsmkOqMBuxlfSw0\", " + \
            " \"bairro\": \"Obj9K2JEwtzx0\", " + \
            " \"municipio\": 390082440, " + \
            " \"inep\": \"\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 773 " + \
            " }, " + \
            " {}, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 708, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"iCMEnM62\", " + \
            " \"anoInicioFormacaoAcademica\": 551, " + \
            " \"anoConclusaoFormacaoAcademica\": 733 " + \
            " } " + \
            " ], " + \
            " \"dataFim\": \"2028-12-26\", " + \
            " \"cargaHoraria\": 965 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 1063801524, " + \
            " \"nome\": \"ljpGR\", " + \
            " \"genero\": 8, " + \
            " \"email\": \"NwsoF1RYo\", " + \
            " \"telefone\": \"pNEWSoVRzj\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 998 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"logradouro\": \"a16\", " + \
            " \"bairro\": \"MQpdoEtLCLP\", " + \
            " \"numero\": \"paGS\", " + \
            " \"cep\": \"RKMfpk4\", " + \
            " \"municipio\": 811, " + \
            " \"uf\": 173, " + \
            " \"inep\": 2075830253, " + \
            " \"matriculaRede\": \"d9DnmWErV\", " + \
            " \"codigoFuncao\": 736, " + \
            " \"dataIngresso\": \"1938-08-00\", " + \
            " \"dataFim\": \"1911-12-14\" " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 535, " + \
            " \"dataNascimento\": \"YMiWABoEnR7yw\", " + \
            " \"racaCor\": 5, " + \
            " \"telefone\": \"J2AKRRu8lLF_cE\", " + \
            " \"nomeSocial\": \"f\", " + \
            " \"sexo\": \"2\", " + \
            " \"bairro\": \"5DkW1sV2FzsmD\", " + \
            " \"municipio\": 931, " + \
            " \"inep\": 370, " + \
            " \"codigoFuncao\": 88 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 201
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 422
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Não foi possível processar as informações."
        assert res_4.json()["errors"]["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?per_page=482",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_5.json()["data"]) == 482
        assert res_5.json()["data"][0]["dataEnvio"] == "2025-05-04 08:30:57"
        assert res_5.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][1]["dataEnvio"] == "2025-05-04 08:30:27"
        assert res_5.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][2]["dataEnvio"] == "2025-05-04 08:30:04"
        assert res_5.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 479 elements. This limit of 3 elements can be increased in the configurations
        assert res_5.json()["pagination"]["total"] == 10543.0
        assert res_5.json()["pagination"]["count"] == 482.0
        assert res_5.json()["pagination"]["per_page"] == 482.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 22.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/93bf449c-b7d4-4d1b-a9b3-e3d15e0d279b",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["status_processamento"] == "Enviado"
        assert res_6.json()["message"] == "Lote recuperado com sucesso. ID: 93bf449c-b7d4-4d1b-a9b3-e3d15e0d279b"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/VZF3oDR",
                    headers=headers)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_7.json()["data"]) == 0
        assert res_7.json()["pagination"]["total"] == 0.0
        assert res_7.json()["pagination"]["count"] == 0.0
        assert res_7.json()["pagination"]["per_page"] == 10.0
        assert res_7.json()["pagination"]["current_page"] == 1.0
        assert res_7.json()["pagination"]["total_pages"] == 1.0
        assert res_7.json()["pagination"]["links"]["previous"] is None
        assert res_7.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes/validacao-cadastro
    # 2 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 3 - (200) GET:/v1/profissionais/inep/{inep}
    # 4 - (200) GET:/v1/profissionais/lote/{id}
    # 5 - (400) GET:/v1/profissionais/lote/{id}/erros
    # Found 23 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_60(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "per_page=15&" + 
                    "cpf=",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        assert len(res_0.json()["data"]) == 15
        assert res_0.json()["data"][0]["cpf"] == "99999701094"
        assert res_0.json()["data"][0]["numeroNIS"] is None
        assert res_0.json()["data"][0]["situacaoCadastral"] == "Autenticada"
        assert res_0.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_0.json()["data"][0]["nome"] == "Bryan  Chen"
        assert res_0.json()["data"][0]["nomeValidado"] == True
        assert res_0.json()["data"][0]["dataNascimento"] == "1956-01-11"
        assert res_0.json()["data"][0]["dataNascimentoValidada"] == True
        assert res_0.json()["data"][0]["nomeMaeEstudante"] == "Mr. Daniel Johnson DVM"
        assert res_0.json()["data"][0]["nomeMaeEstudanteValidado"] == True
        assert res_0.json()["data"][0]["dataValidacaoCadastral"] == "2025-03-11 01:39:26"
        assert res_0.json()["data"][1]["cpf"] == "34535377693"
        assert res_0.json()["data"][1]["numeroNIS"] == "11979328182"
        assert res_0.json()["data"][1]["situacaoCadastral"] == "Não autenticada"
        assert res_0.json()["data"][1]["situacaoCpf"] == "Testando o serviço de validação"
        assert res_0.json()["data"][1]["nome"] == "Trevor Hester"
        assert res_0.json()["data"][1]["nomeValidado"] == True
        assert res_0.json()["data"][1]["dataNascimento"] == "1968-02-26"
        assert res_0.json()["data"][1]["dataNascimentoValidada"] == False
        assert res_0.json()["data"][1]["nomeMaeEstudante"] == "Juan Mccullough"
        assert res_0.json()["data"][1]["nomeMaeEstudanteValidado"] == True
        assert res_0.json()["data"][1]["dataValidacaoCadastral"] == "2023-06-16 00:00:00"
        assert res_0.json()["data"][2]["cpf"] == "14064786602"
        assert res_0.json()["data"][2]["numeroNIS"] == "124112231"
        assert res_0.json()["data"][2]["situacaoCadastral"] == "Não autenticada"
        assert res_0.json()["data"][2]["situacaoCpf"] == "Quando há omissão de DIRPF em um dos últimos 5 exercícios"
        assert res_0.json()["data"][2]["nome"] == "Donald Jackson"
        assert res_0.json()["data"][2]["nomeValidado"] == False
        assert res_0.json()["data"][2]["dataNascimento"] == "1954-08-23"
        assert res_0.json()["data"][2]["dataNascimentoValidada"] == False
        assert res_0.json()["data"][2]["nomeMaeEstudante"] == "Timothy Garcia"
        assert res_0.json()["data"][2]["nomeMaeEstudanteValidado"] == True
        assert res_0.json()["data"][2]["dataValidacaoCadastral"] == "2024-04-23 00:00:00"
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 54714.0
        assert res_0.json()["pagination"]["count"] == 15.0
        assert res_0.json()["pagination"]["per_page"] == 15.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 3648.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/09008030261465571551/erros?per_page=482",
                    headers=headers)
        
        assert res_1.status_code == 400
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "O ID fornecido não é um UUID válido. ID: 09008030261465571551"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/m4DV0PtxnS8U5KhN?per_page=685",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 0.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 685.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/899a86d3-cf73-458a-9ff6-8c786e373ea1?page=942",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["status_processamento"] == "Enviado"
        assert res_3.json()["message"] == "Lote recuperado com sucesso. ID: 899a86d3-cf73-458a-9ff6-8c786e373ea1"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/2657670738300566/erros",
                    headers=headers)
        
        assert res_4.status_code == 400
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "O ID fornecido não é um UUID válido. ID: 2657670738300566"
    
    
    # Calls:
    # 1 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 2 - (404) GET:/v1/estudantes/validacao-cadastro
    # 3 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 4 - (200) GET:/v1/profissionais
    # 5 - (200) GET:/v1/profissionais
    # 6 - (200) PATCH:/v1/estudantes/lote
    # 7 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 8 - (200) GET:/v1/estudantes/lote/{id}
    # 9 - (401) GET:/v1/estudantes/lote
    # Found 16 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_61(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "page=992&" + 
                    "per_page=482&" + 
                    "cpfAtual=02227254270",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro inesperado."
        assert res_0.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 404 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "page=253&" + 
                    "cpf=NwwULcTCO2kj",
                    headers=headers)
        
        assert res_1.status_code == 404
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro inesperado."
        assert res_1.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "page=963&" + 
                    "per_page=374",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro inesperado."
        assert res_2.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=1&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_3.json()["data"]) == 3
        assert res_3.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_3.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_3.json()["data"][0]["cpf"] == "43839402000"
        assert res_3.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_3.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_3.json()["data"][0]["genero"] == 1.0
        assert res_3.json()["data"][0]["racaCor"] == 2.0
        assert res_3.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_3.json()["data"][0]["telefone"] is None
        assert res_3.json()["data"][0]["nomeSocial"] is None
        assert res_3.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_3.json()["data"][0]["bairro"] == "Centro"
        assert res_3.json()["data"][0]["numero"] == "123"
        assert res_3.json()["data"][0]["cep"] == "01001000"
        assert res_3.json()["data"][0]["municipio"] == 2700409.0
        assert res_3.json()["data"][0]["uf"] == 27.0
        assert res_3.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_3.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_3.json()["data"][0]["situacaoAtiva"] == True
        assert res_3.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_3.json()["data"][0]["dataFim"] is None
        assert res_3.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_3.json()["data"][0]["matriculaRede"] == "56789"
        assert res_3.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_3.json()["data"][0]["inep"] == "27014088"
        assert len(res_3.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_3.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_3.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_3.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_3.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_3.json()["data"][1]["cpf"] == "33722248094"
        assert res_3.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_3.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_3.json()["data"][1]["genero"] == 1.0
        assert res_3.json()["data"][1]["racaCor"] == 2.0
        assert res_3.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_3.json()["data"][1]["telefone"] is None
        assert res_3.json()["data"][1]["nomeSocial"] is None
        assert res_3.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_3.json()["data"][1]["bairro"] == "Centro"
        assert res_3.json()["data"][1]["numero"] == "123"
        assert res_3.json()["data"][1]["cep"] == "01001000"
        assert res_3.json()["data"][1]["municipio"] == 2700409.0
        assert res_3.json()["data"][1]["uf"] == 27.0
        assert res_3.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_3.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_3.json()["data"][1]["situacaoAtiva"] == True
        assert res_3.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_3.json()["data"][1]["dataFim"] is None
        assert res_3.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_3.json()["data"][1]["matriculaRede"] == "56789"
        assert res_3.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_3.json()["data"][1]["inep"] == "27014088"
        assert len(res_3.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_3.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_3.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_3.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_3.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_3.json()["data"][2]["cpf"] == "31863200037"
        assert res_3.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_3.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_3.json()["data"][2]["genero"] == 1.0
        assert res_3.json()["data"][2]["racaCor"] == 2.0
        assert res_3.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_3.json()["data"][2]["telefone"] is None
        assert res_3.json()["data"][2]["nomeSocial"] is None
        assert res_3.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_3.json()["data"][2]["bairro"] == "Centro"
        assert res_3.json()["data"][2]["numero"] == "123"
        assert res_3.json()["data"][2]["cep"] == "01001000"
        assert res_3.json()["data"][2]["municipio"] == 2700409.0
        assert res_3.json()["data"][2]["uf"] == 27.0
        assert res_3.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_3.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_3.json()["data"][2]["situacaoAtiva"] == True
        assert res_3.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_3.json()["data"][2]["dataFim"] is None
        assert res_3.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_3.json()["data"][2]["matriculaRede"] == "56789"
        assert res_3.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_3.json()["data"][2]["inep"] == "27014088"
        assert len(res_3.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_3.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_3.json()["pagination"]["total"] == 3.0
        assert res_3.json()["pagination"]["count"] == 3.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 1.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_4.json()["data"]) == 3
        assert res_4.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_4.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_4.json()["data"][0]["cpf"] == "43839402000"
        assert res_4.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_4.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_4.json()["data"][0]["genero"] == 1.0
        assert res_4.json()["data"][0]["racaCor"] == 2.0
        assert res_4.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_4.json()["data"][0]["telefone"] is None
        assert res_4.json()["data"][0]["nomeSocial"] is None
        assert res_4.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_4.json()["data"][0]["bairro"] == "Centro"
        assert res_4.json()["data"][0]["numero"] == "123"
        assert res_4.json()["data"][0]["cep"] == "01001000"
        assert res_4.json()["data"][0]["municipio"] == 2700409.0
        assert res_4.json()["data"][0]["uf"] == 27.0
        assert res_4.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_4.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_4.json()["data"][0]["situacaoAtiva"] == True
        assert res_4.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_4.json()["data"][0]["dataFim"] is None
        assert res_4.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_4.json()["data"][0]["matriculaRede"] == "56789"
        assert res_4.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_4.json()["data"][0]["inep"] == "27014088"
        assert len(res_4.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_4.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_4.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_4.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_4.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_4.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_4.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_4.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_4.json()["data"][1]["cpf"] == "33722248094"
        assert res_4.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_4.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_4.json()["data"][1]["genero"] == 1.0
        assert res_4.json()["data"][1]["racaCor"] == 2.0
        assert res_4.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_4.json()["data"][1]["telefone"] is None
        assert res_4.json()["data"][1]["nomeSocial"] is None
        assert res_4.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_4.json()["data"][1]["bairro"] == "Centro"
        assert res_4.json()["data"][1]["numero"] == "123"
        assert res_4.json()["data"][1]["cep"] == "01001000"
        assert res_4.json()["data"][1]["municipio"] == 2700409.0
        assert res_4.json()["data"][1]["uf"] == 27.0
        assert res_4.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_4.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_4.json()["data"][1]["situacaoAtiva"] == True
        assert res_4.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_4.json()["data"][1]["dataFim"] is None
        assert res_4.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_4.json()["data"][1]["matriculaRede"] == "56789"
        assert res_4.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_4.json()["data"][1]["inep"] == "27014088"
        assert len(res_4.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_4.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_4.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_4.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_4.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_4.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_4.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_4.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_4.json()["data"][2]["cpf"] == "31863200037"
        assert res_4.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_4.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_4.json()["data"][2]["genero"] == 1.0
        assert res_4.json()["data"][2]["racaCor"] == 2.0
        assert res_4.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_4.json()["data"][2]["telefone"] is None
        assert res_4.json()["data"][2]["nomeSocial"] is None
        assert res_4.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_4.json()["data"][2]["bairro"] == "Centro"
        assert res_4.json()["data"][2]["numero"] == "123"
        assert res_4.json()["data"][2]["cep"] == "01001000"
        assert res_4.json()["data"][2]["municipio"] == 2700409.0
        assert res_4.json()["data"][2]["uf"] == 27.0
        assert res_4.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_4.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_4.json()["data"][2]["situacaoAtiva"] == True
        assert res_4.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_4.json()["data"][2]["dataFim"] is None
        assert res_4.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_4.json()["data"][2]["matriculaRede"] == "56789"
        assert res_4.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_4.json()["data"][2]["inep"] == "27014088"
        assert len(res_4.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_4.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_4.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_4.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_4.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_4.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_4.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_4.json()["pagination"]["total"] == 3.0
        assert res_4.json()["pagination"]["count"] == 3.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 1.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_77_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_78_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_79_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_5.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/2529417024003653/erros?" + 
                    "page=334&" + 
                    "per_page=685",
                    headers=headers)
        
        assert res_6.status_code == 400
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "O ID fornecido não é um UUID válido. ID: 2529417024003653"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/62a7dae5-38b1-4d84-ab1d-4c6e6f989b62?page=1",
                    headers=headers)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["status_processamento"] == "Enviado"
        assert res_7.json()["message"] == "Lote recuperado com sucesso. ID: 62a7dae5-38b1-4d84-ab1d-4c6e6f989b62"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Response status 401 not defined for path '/v1/estudantes/lote'.
        headers = {}
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?" + 
                    "page=908&" + 
                    "per_page=482",
                    headers=headers)
        
        assert res_8.status_code == 401
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais/inep/{inep}
    # 2 - (201) POST:/v1/profissionais/lote
    # 3 - (200) GET:/v1/estudantes/validacao-cadastro
    # 4 - (201) POST:/v1/profissionais/lote
    # 5 - (200) GET:/v1/estudantes/inep/{inep}
    # 6 - (200) GET:/v1/estudantes/inep/{inep}
    # 7 - (200) GET:/v1/estudantes/{cpfNis}
    # Found 20 potential faults of type-code 200
    # Using 6 examples:
    #   1
    #   123456789
    #   2010
    #   2024
    #   5
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_62(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/41078489",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 0.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"\", " + \
            " \"nome\": \"PnG_GaMx_rXnku7\", " + \
            " \"dataNascimento\": \"7nb_2Pg1UI\", " + \
            " \"genero\": 6, " + \
            " \"telefone\": \"11917982977\", " + \
            " \"nomeSocial\": \"RsOLwyuuUB3\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 83, " + \
            " 2, " + \
            " 3, " + \
            " 6 " + \
            " ], " + \
            " \"logradouro\": \"Rua Rua Ronaldo das Neves\", " + \
            " \"municipio\": 4104659, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"inep\": 33008892, " + \
            " \"dataIngresso\": \"2025-07-10\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 955, " + \
            " \"cpf\": \"58929950620\", " + \
            " \"nome\": \"Aaron Oliveira Azevedo\", " + \
            " \"dataNascimento\": \"2008-09-29\", " + \
            " \"genero\": 7, " + \
            " \"email\": \"aaron.kauan.cordeiro.neto@fake.com\", " + \
            " \"nomeSocial\": \"RsOLwyuuUB3\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 358 " + \
            " ], " + \
            " \"logradouro\": \"VdyQBTpVqRO0ExHz\", " + \
            " \"numero\": \"220\", " + \
            " \"uf\": 26, " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2043-01-28\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?per_page=10",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        assert len(res_2.json()["data"]) == 10
        assert res_2.json()["data"][0]["cpf"] == "99999701094"
        assert res_2.json()["data"][0]["numeroNIS"] is None
        assert res_2.json()["data"][0]["situacaoCadastral"] == "Autenticada"
        assert res_2.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_2.json()["data"][0]["nome"] == "Bryan  Chen"
        assert res_2.json()["data"][0]["nomeValidado"] == True
        assert res_2.json()["data"][0]["dataNascimento"] == "1956-01-11"
        assert res_2.json()["data"][0]["dataNascimentoValidada"] == True
        assert res_2.json()["data"][0]["nomeMaeEstudante"] == "Mr. Daniel Johnson DVM"
        assert res_2.json()["data"][0]["nomeMaeEstudanteValidado"] == True
        assert res_2.json()["data"][0]["dataValidacaoCadastral"] == "2025-03-11 01:39:26"
        assert res_2.json()["data"][1]["cpf"] == "34535377693"
        assert res_2.json()["data"][1]["numeroNIS"] == "11979328182"
        assert res_2.json()["data"][1]["situacaoCadastral"] == "Não autenticada"
        assert res_2.json()["data"][1]["situacaoCpf"] == "Testando o serviço de validação"
        assert res_2.json()["data"][1]["nome"] == "Trevor Hester"
        assert res_2.json()["data"][1]["nomeValidado"] == True
        assert res_2.json()["data"][1]["dataNascimento"] == "1968-02-26"
        assert res_2.json()["data"][1]["dataNascimentoValidada"] == False
        assert res_2.json()["data"][1]["nomeMaeEstudante"] == "Juan Mccullough"
        assert res_2.json()["data"][1]["nomeMaeEstudanteValidado"] == True
        assert res_2.json()["data"][1]["dataValidacaoCadastral"] == "2023-06-16 00:00:00"
        assert res_2.json()["data"][2]["cpf"] == "14064786602"
        assert res_2.json()["data"][2]["numeroNIS"] == "124112231"
        assert res_2.json()["data"][2]["situacaoCadastral"] == "Não autenticada"
        assert res_2.json()["data"][2]["situacaoCpf"] == "Quando há omissão de DIRPF em um dos últimos 5 exercícios"
        assert res_2.json()["data"][2]["nome"] == "Donald Jackson"
        assert res_2.json()["data"][2]["nomeValidado"] == False
        assert res_2.json()["data"][2]["dataNascimento"] == "1954-08-23"
        assert res_2.json()["data"][2]["dataNascimentoValidada"] == False
        assert res_2.json()["data"][2]["nomeMaeEstudante"] == "Timothy Garcia"
        assert res_2.json()["data"][2]["nomeMaeEstudanteValidado"] == True
        assert res_2.json()["data"][2]["dataValidacaoCadastral"] == "2024-04-23 00:00:00"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 54714.0
        assert res_2.json()["pagination"]["count"] == 10.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 5472.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 0, " + \
            " \"tipoDeficiencia\": [ " + \
            " 464, " + \
            " 5, " + \
            " 6, " + \
            " 4 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"numero\": \"4266\", " + \
            " \"cep\": \"33333333\", " + \
            " \"uf\": 24, " + \
            " \"inep\": 41075412, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 351, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"1917-02-10\", " + \
            " \"dataFim\": \"2078-09-23\" " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"31889975907\", " + \
            " \"genero\": 7, " + \
            " \"telefone\": \"11917982977\", " + \
            " \"nomeSocial\": \"\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 10, " + \
            " 1, " + \
            " 138, " + \
            " 10, " + \
            " 4 " + \
            " ], " + \
            " \"logradouro\": \"Rua Largo Soares\", " + \
            " \"municipio\": -296303478, " + \
            " \"uf\": 35, " + \
            " \"inep\": \"29482291\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 278 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " } " + \
            " ], " + \
            " \"tipoVinculo\": 0, " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 201
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/41061748?" + 
                    "page=480&" + 
                    "per_page=10&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_4.json()["data"]) == 0
        assert res_4.json()["pagination"]["total"] == 2500.0
        assert res_4.json()["pagination"]["count"] == 0.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 480.0
        assert res_4.json()["pagination"]["total_pages"] == 250.0
        assert res_4.json()["pagination"]["links"]["previous"] == 479.0
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/41067428?" + 
                    "per_page=482&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_5.json()["data"]) == 0
        assert res_5.json()["pagination"]["total"] == 0.0
        assert res_5.json()["pagination"]["count"] == 0.0
        assert res_5.json()["pagination"]["per_page"] == 482.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 1.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/59986809525",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert res_6.json()["data"]["cpf"] == "59986809525"
        assert res_6.json()["data"]["nome"] == "Aaron Emanuel Garcia Jr."
        assert res_6.json()["data"]["nomeSocial"] is None
        assert res_6.json()["data"]["numeroNIS"] == "89991914467"
        assert res_6.json()["data"]["rg"] == "3489743586055069"
        assert res_6.json()["data"]["orgaoEmissor"] == "SSP-PE"
        assert res_6.json()["data"]["cpfResponsavel"] == "55053437408"
        assert res_6.json()["data"]["nomeMaeEstudante"] == "Emilly Zaragoça Filho"
        assert res_6.json()["data"]["numeroNISResponsavel"] == "00271957484"
        assert res_6.json()["data"]["dataNascimento"] == "2008-03-23"
        assert res_6.json()["data"]["logradouro"] == "Rua Rua Sebastião"
        assert res_6.json()["data"]["bairro"] == "São Soares"
        assert res_6.json()["data"]["numero"] == "7829"
        assert res_6.json()["data"]["cep"] == "98483504"
        assert res_6.json()["data"]["municipio"] == 2611606.0
        assert res_6.json()["data"]["certidaoNascimento"] == "29657727563356405071523758327047"
        assert res_6.json()["data"]["cnh"] is None
        assert res_6.json()["data"]["uf"] == 26.0
        assert res_6.json()["data"]["racaCor"] == 2.0
        assert len(res_6.json()["data"]["tipoDeficiencia"]) == 0
        assert res_6.json()["data"]["genero"] == 4.0
        assert res_6.json()["data"]["telefone"] is None
        assert res_6.json()["data"]["email"] is None
        assert res_6.json()["data"]["situacaoCadastroValidado"] is None
        assert len(res_6.json()["data"]["matriculas"]) == 1
        assert res_6.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 6352479.0
        assert res_6.json()["data"]["matriculas"][0]["codInstituicao"] == 8361.0
        assert res_6.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_6.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_6.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "2024-07-23"
        assert res_6.json()["data"]["matriculas"][0]["situacaoMatricula"] == False
        assert res_6.json()["data"]["matriculas"][0]["serieAno"] == 45.0
        assert res_6.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_6.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_6.json()["data"]["matriculas"][0]["deletadaEm"] == "2024-12-12 02:26:04"
        assert res_6.json()["data"]["matriculas"][0]["inep"] == "12032115"
        assert res_6.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] == 10.0
        assert res_6.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_6.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_6.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_6.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_6.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_6.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_6.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_6.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_6.json()["data"]["outrasMatriculas"]) == 0
    
    
    # Calls:
    # 1 - (404) GET:/v1/profissionais/{cpf}
    # 2 - (200) GET:/v1/estudantes/inep/{inep}
    # 3 - (422) PATCH:/v1/estudantes/lote
    # 4 - (422) POST:/v1/profissionais
    # 5 - (200) PATCH:/v1/estudantes/lote
    # 6 - (400) GET:/v1/estudantes/lote/{id}
    # 7 - (200) GET:/v1/estudantes
    # 8 - (200) GET:/v1/profissionais/inep/{inep}
    # 9 - (404) GET:/v1/estudantes/{cpfNis}
    # Found 5 potential faults of type-code 200
    # Using 2 examples:
    #   1
    #   2024
    @timeout_decorator.timeout(60)
    def test_63(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/48028238947",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/41095065?" + 
                    "per_page=15&" + 
                    "situacao_matricula=INATIVAS&" + 
                    "ano_matricula=447&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 0.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 15.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 422
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Não foi possível processar as informações."
        assert res_2.json()["errors"]["message"] == "JSON inválido."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"02324064219\", " + \
            " \"nome\": \"XgCfZKYAICkCK\", " + \
            " \"genero\": 1, " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"sexo\": \"5\", " + \
            " \"bairro\": \"São Paz\", " + \
            " \"municipio\": 4314902, " + \
            " \"uf\": 42, " + \
            " \"inep\": \"51038625\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 271 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"G8BMn2\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"codigoFuncao\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_3.status_code == 422
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #2 ($dataNascimento) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_25_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_4.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/Ge5T5x",
                    headers=headers)
        
        assert res_5.status_code == 400
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "O ID fornecido não é um UUID válido. ID: Ge5T5x"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=372&" + 
                    "per_page=15&" + 
                    "situacao_matricula=ATIVAS&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_6.json()["data"]) == 0
        assert res_6.json()["pagination"]["total"] == 17.0
        assert res_6.json()["pagination"]["count"] == 0.0
        assert res_6.json()["pagination"]["per_page"] == 15.0
        assert res_6.json()["pagination"]["current_page"] == 372.0
        assert res_6.json()["pagination"]["total_pages"] == 2.0
        assert res_6.json()["pagination"]["links"]["previous"] == 371.0
        assert res_6.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/29482291",
                    headers=headers)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_7.json()["data"]) == 0
        assert res_7.json()["pagination"]["total"] == 0.0
        assert res_7.json()["pagination"]["count"] == 0.0
        assert res_7.json()["pagination"]["per_page"] == 10.0
        assert res_7.json()["pagination"]["current_page"] == 1.0
        assert res_7.json()["pagination"]["total_pages"] == 1.0
        assert res_7.json()["pagination"]["links"]["previous"] is None
        assert res_7.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/Jn7PFhYapCkgoYu",
                    headers=headers)
        
        assert res_8.status_code == 404
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "Nenhum estudante encontrado."
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais/lote
    # 2 - (200) GET:/v1/estudantes/lote
    # 3 - (422) POST:/v1/profissionais/lote
    # 4 - (400) GET:/v1/profissionais/lote/{id}
    # 5 - (401) GET:/v1/estudantes
    # 6 - (404) GET:/v1/profissionais/{cpf}
    # 7 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 8 - (200) GET:/v1/profissionais/lote
    # 9 - (200) GET:/v1/profissionais
    # Found 22 potential faults of type-code 200
    # Using 1 example:
    #   2024
    @timeout_decorator.timeout(60)
    def test_64(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:11:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:09:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_0.json()["data"]) == 10
        assert res_0.json()["data"][0]["dataEnvio"] == "2025-05-04 08:22:20"
        assert res_0.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][1]["dataEnvio"] == "2025-05-04 08:22:11"
        assert res_0.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][2]["dataEnvio"] == "2025-05-04 08:21:07"
        assert res_0.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 3145.0
        assert res_0.json()["pagination"]["count"] == 10.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 315.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?per_page=482",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_1.json()["data"]) == 482
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-05-04 08:21:56"
        assert res_1.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-05-04 08:20:52"
        assert res_1.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-05-04 08:20:18"
        assert res_1.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 479 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 10534.0
        assert res_1.json()["pagination"]["count"] == 482.0
        assert res_1.json()["pagination"]["per_page"] == 482.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 22.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] == 2.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 422
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/EL3SpCe2R7hhu7P?incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_3.status_code == 400
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "O ID fornecido não é um UUID válido. ID: EL3SpCe2R7hhu7P"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Response status 401 not defined for path '/v1/estudantes'.
        headers = {}
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=257&" + 
                    "per_page=660&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_4.status_code == 401
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Não autorizado"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/C8l8WcZVaqXd",
                    headers=headers)
        
        assert res_5.status_code == 404
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/6/erros",
                    headers=headers)
        
        assert res_6.status_code == 400
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "O ID fornecido não é um UUID válido. ID: 6"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?page=561",
                    headers=headers)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_7.json()["data"]) == 0
        assert res_7.json()["pagination"]["total"] == 3145.0
        assert res_7.json()["pagination"]["count"] == 0.0
        assert res_7.json()["pagination"]["per_page"] == 10.0
        assert res_7.json()["pagination"]["current_page"] == 561.0
        assert res_7.json()["pagination"]["total_pages"] == 315.0
        assert res_7.json()["pagination"]["links"]["previous"] == 560.0
        assert res_7.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=171",
                    headers=headers)
        
        assert res_8.status_code == 200
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == True
        assert res_8.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_8.json()["data"]) == 0
        assert res_8.json()["pagination"]["total"] == 3.0
        assert res_8.json()["pagination"]["count"] == 0.0
        assert res_8.json()["pagination"]["per_page"] == 10.0
        assert res_8.json()["pagination"]["current_page"] == 171.0
        assert res_8.json()["pagination"]["total_pages"] == 1.0
        assert res_8.json()["pagination"]["links"]["previous"] == 170.0
        assert res_8.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (200) GET:/v1/estudantes/inep/{inep}
    # 2 - (200) GET:/v1/estudantes/lote
    # 3 - (200) GET:/v1/estudantes/solicitacoes-alteracoes
    # 4 - (200) GET:/v1/estudantes/validacao-cadastro
    # 5 - (404) GET:/v1/profissionais/{cpf}
    # 6 - (200) GET:/v1/estudantes/lote
    # Found 43 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_65(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/12028223?page=403",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 2500.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 403.0
        assert res_0.json()["pagination"]["total_pages"] == 250.0
        assert res_0.json()["pagination"]["links"]["previous"] == 402.0
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?page=863",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_1.json()["data"]) == 10
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-02-18 18:00:17"
        assert res_1.json()["data"][0]["status_processamento"] == "Processado com erro"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-02-18 18:00:11"
        assert res_1.json()["data"][1]["status_processamento"] == "Processado com erro"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-02-18 17:59:41"
        assert res_1.json()["data"][2]["status_processamento"] == "Processado com erro"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 10546.0
        assert res_1.json()["pagination"]["count"] == 10.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 863.0
        assert res_1.json()["pagination"]["total_pages"] == 1055.0
        assert res_1.json()["pagination"]["links"]["previous"] == 862.0
        assert res_1.json()["pagination"]["links"]["next"] == 864.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?per_page=15",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        assert len(res_2.json()["data"]) == 15
        assert res_2.json()["data"][0]["cpfAtual"] == "13213485179"
        assert res_2.json()["data"][0]["cpfNovo"] == "13213485179"
        assert res_2.json()["data"][0]["situacaoCpf"] is None
        assert res_2.json()["data"][0]["descricaoSituacaoCpf"] is None
        assert res_2.json()["data"][0]["tipoSituacaoCpf"] is None
        assert res_2.json()["data"][0]["nomeAtual"] == "Audrey Roob"
        assert res_2.json()["data"][0]["nomeNovo"] == "nome certo"
        assert res_2.json()["data"][0]["nomeValidado"] is None
        assert res_2.json()["data"][0]["dataNascimentoAtual"] == "2024-12-28"
        assert res_2.json()["data"][0]["dataNascimentoNovo"] == "2024-12-28"
        assert res_2.json()["data"][0]["dataNascimentoValidada"] is None
        assert res_2.json()["data"][0]["nomeMaeEstudanteAtual"] == "Teresa Harris IV"
        assert res_2.json()["data"][0]["nomeMaeEstudanteNovo"] == "Teresa Harris IV"
        assert res_2.json()["data"][0]["nomeMaeEstudanteValidado"] is None
        assert res_2.json()["data"][0]["dataValidacaoCadastral"] is None
        assert res_2.json()["data"][1]["cpfAtual"] == "49255179888"
        assert res_2.json()["data"][1]["cpfNovo"] == "02742633359"
        assert res_2.json()["data"][1]["situacaoCpf"] is None
        assert res_2.json()["data"][1]["descricaoSituacaoCpf"] is None
        assert res_2.json()["data"][1]["tipoSituacaoCpf"] is None
        assert res_2.json()["data"][1]["nomeAtual"] == "111"
        assert res_2.json()["data"][1]["nomeNovo"] == "111"
        assert res_2.json()["data"][1]["nomeValidado"] is None
        assert res_2.json()["data"][1]["dataNascimentoAtual"] == "2024-12-28"
        assert res_2.json()["data"][1]["dataNascimentoNovo"] == "2024-12-28"
        assert res_2.json()["data"][1]["dataNascimentoValidada"] is None
        assert res_2.json()["data"][1]["nomeMaeEstudanteAtual"] == "Valentina Rezende"
        assert res_2.json()["data"][1]["nomeMaeEstudanteNovo"] == "Valentina Rezende"
        assert res_2.json()["data"][1]["nomeMaeEstudanteValidado"] is None
        assert res_2.json()["data"][1]["dataValidacaoCadastral"] is None
        assert res_2.json()["data"][2]["cpfAtual"] == "49255179888"
        assert res_2.json()["data"][2]["cpfNovo"] == "02742633359"
        assert res_2.json()["data"][2]["situacaoCpf"] is None
        assert res_2.json()["data"][2]["descricaoSituacaoCpf"] is None
        assert res_2.json()["data"][2]["tipoSituacaoCpf"] is None
        assert res_2.json()["data"][2]["nomeAtual"] == "111"
        assert res_2.json()["data"][2]["nomeNovo"] == "111"
        assert res_2.json()["data"][2]["nomeValidado"] is None
        assert res_2.json()["data"][2]["dataNascimentoAtual"] == "2024-12-28"
        assert res_2.json()["data"][2]["dataNascimentoNovo"] == "2024-12-28"
        assert res_2.json()["data"][2]["dataNascimentoValidada"] is None
        assert res_2.json()["data"][2]["nomeMaeEstudanteAtual"] == "Valentina Rezende"
        assert res_2.json()["data"][2]["nomeMaeEstudanteNovo"] == "Valentina Rezende"
        assert res_2.json()["data"][2]["nomeMaeEstudanteValidado"] is None
        assert res_2.json()["data"][2]["dataValidacaoCadastral"] is None
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 72.0
        assert res_2.json()["pagination"]["count"] == 15.0
        assert res_2.json()["pagination"]["per_page"] == 15.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 5.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?page=775",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        assert len(res_3.json()["data"]) == 15
        assert res_3.json()["data"][0]["cpf"] == "07569335520"
        assert res_3.json()["data"][0]["numeroNIS"] == "23421269101"
        assert res_3.json()["data"][0]["situacaoCadastral"] == "Não autenticada"
        assert res_3.json()["data"][0]["situacaoCpf"] == "Ato de ofício, no interesse da administração tributária ou determinação judicial. Cada serviço público deverá definir qual situação cadastral será aceita"
        assert res_3.json()["data"][0]["nome"] == "Hugo Fernandes"
        assert res_3.json()["data"][0]["nomeValidado"] == False
        assert res_3.json()["data"][0]["dataNascimento"] == "2005-03-23"
        assert res_3.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_3.json()["data"][0]["nomeMaeEstudante"] == "Ana Sophia Oliveira"
        assert res_3.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_3.json()["data"][0]["dataValidacaoCadastral"] == "2024-10-26 00:00:00"
        assert res_3.json()["data"][1]["cpf"] == "34186723109"
        assert res_3.json()["data"][1]["numeroNIS"] == "88473043664"
        assert res_3.json()["data"][1]["situacaoCadastral"] == "Inexistente"
        assert res_3.json()["data"][1]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_3.json()["data"][1]["nome"] == "Enzo Junqueira"
        assert res_3.json()["data"][1]["nomeValidado"] == False
        assert res_3.json()["data"][1]["dataNascimento"] == "2000-11-09"
        assert res_3.json()["data"][1]["dataNascimentoValidada"] == False
        assert res_3.json()["data"][1]["nomeMaeEstudante"] == "Dra. Márcia Batista"
        assert res_3.json()["data"][1]["nomeMaeEstudanteValidado"] == False
        assert res_3.json()["data"][1]["dataValidacaoCadastral"] == "2025-05-01 20:50:31"
        assert res_3.json()["data"][2]["cpf"] == "87585971150"
        assert res_3.json()["data"][2]["numeroNIS"] == "77752888196"
        assert res_3.json()["data"][2]["situacaoCadastral"] == "Inexistente"
        assert res_3.json()["data"][2]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_3.json()["data"][2]["nome"] == "Ígor Albuquerque"
        assert res_3.json()["data"][2]["nomeValidado"] == False
        assert res_3.json()["data"][2]["dataNascimento"] == "1967-11-10"
        assert res_3.json()["data"][2]["dataNascimentoValidada"] == False
        assert res_3.json()["data"][2]["nomeMaeEstudante"] == "Sra. Enzo Thiago Solimões"
        assert res_3.json()["data"][2]["nomeMaeEstudanteValidado"] == False
        assert res_3.json()["data"][2]["dataValidacaoCadastral"] == "2025-05-01 20:50:44"
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 54714.0
        assert res_3.json()["pagination"]["count"] == 15.0
        assert res_3.json()["pagination"]["per_page"] == 15.0
        assert res_3.json()["pagination"]["current_page"] == 775.0
        assert res_3.json()["pagination"]["total_pages"] == 3648.0
        assert res_3.json()["pagination"]["links"]["previous"] == 774.0
        assert res_3.json()["pagination"]["links"]["next"] == 776.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/90437211746",
                    headers=headers)
        
        assert res_4.status_code == 404
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_5.json()["data"]) == 10
        assert res_5.json()["data"][0]["dataEnvio"] == "2025-05-04 08:33:09"
        assert res_5.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][1]["dataEnvio"] == "2025-05-04 08:33:05"
        assert res_5.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][2]["dataEnvio"] == "2025-05-04 08:32:42"
        assert res_5.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_5.json()["pagination"]["total"] == 10546.0
        assert res_5.json()["pagination"]["count"] == 10.0
        assert res_5.json()["pagination"]["per_page"] == 10.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 1055.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 2 - (200) GET:/v1/profissionais/lote
    # 3 - (404) GET:/v1/profissionais/{cpf}
    # Found 86 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_66(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?cpfAtual=iI",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro inesperado."
        assert res_0.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:25:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 08:11:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 08:09:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 08:08:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 08:07:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 08:06:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/15/dataEnvio'] String "2025-05-04 08:03:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/16/dataEnvio'] String "2025-05-04 08:02:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/17/dataEnvio'] String "2025-05-04 08:02:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/18/dataEnvio'] String "2025-05-04 08:01:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/19/dataEnvio'] String "2025-05-04 08:00:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/20/dataEnvio'] String "2025-05-04 07:58:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/21/dataEnvio'] String "2025-05-04 07:55:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/22/dataEnvio'] String "2025-05-04 07:55:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/23/dataEnvio'] String "2025-05-04 07:55:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/24/dataEnvio'] String "2025-05-04 07:54:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/25/dataEnvio'] String "2025-05-04 07:53:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/26/dataEnvio'] String "2025-05-04 07:53:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/27/dataEnvio'] String "2025-05-04 07:53:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/28/dataEnvio'] String "2025-05-04 07:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/29/dataEnvio'] String "2025-05-04 07:53:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/30/dataEnvio'] String "2025-05-04 07:53:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/31/dataEnvio'] String "2025-05-04 07:53:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/32/dataEnvio'] String "2025-05-04 07:53:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/33/dataEnvio'] String "2025-05-04 07:53:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/34/dataEnvio'] String "2025-05-04 07:53:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/35/dataEnvio'] String "2025-05-04 07:52:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/36/dataEnvio'] String "2025-05-04 07:52:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/37/dataEnvio'] String "2025-05-04 07:52:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/38/dataEnvio'] String "2025-05-04 07:52:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/39/dataEnvio'] String "2025-05-04 07:52:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/40/dataEnvio'] String "2025-05-04 07:52:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/41/dataEnvio'] String "2025-05-04 07:52:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/42/dataEnvio'] String "2025-05-04 07:51:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/43/dataEnvio'] String "2025-05-04 07:51:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/44/dataEnvio'] String "2025-05-04 07:51:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/45/dataEnvio'] String "2025-05-04 07:51:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/46/dataEnvio'] String "2025-05-04 07:51:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/47/dataEnvio'] String "2025-05-04 07:49:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/48/dataEnvio'] String "2025-05-04 07:49:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/49/dataEnvio'] String "2025-05-04 07:48:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/50/dataEnvio'] String "2025-05-04 07:46:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/51/dataEnvio'] String "2025-05-04 07:46:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/52/dataEnvio'] String "2025-05-04 07:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/53/dataEnvio'] String "2025-05-04 07:46:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/54/dataEnvio'] String "2025-05-04 07:44:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/55/dataEnvio'] String "2025-05-04 07:43:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/56/dataEnvio'] String "2025-05-04 07:43:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/57/dataEnvio'] String "2025-05-04 07:43:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/58/dataEnvio'] String "2025-05-04 07:43:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/59/dataEnvio'] String "2025-05-04 07:43:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/60/dataEnvio'] String "2025-05-04 07:43:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/61/dataEnvio'] String "2025-05-04 07:43:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/62/dataEnvio'] String "2025-05-04 07:43:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/63/dataEnvio'] String "2025-05-04 07:42:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/64/dataEnvio'] String "2025-05-04 07:42:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/65/dataEnvio'] String "2025-05-04 07:42:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/66/dataEnvio'] String "2025-05-04 07:42:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/67/dataEnvio'] String "2025-05-04 07:42:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/68/dataEnvio'] String "2025-05-04 07:41:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/69/dataEnvio'] String "2025-05-04 07:39:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/70/dataEnvio'] String "2025-05-04 07:38:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/71/dataEnvio'] String "2025-05-04 07:38:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/72/dataEnvio'] String "2025-05-04 07:37:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/73/dataEnvio'] String "2025-05-04 07:37:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/74/dataEnvio'] String "2025-05-04 07:37:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/75/dataEnvio'] String "2025-05-04 07:37:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/76/dataEnvio'] String "2025-05-04 07:36:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/77/dataEnvio'] String "2025-05-04 07:36:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/78/dataEnvio'] String "2025-05-04 07:36:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/79/dataEnvio'] String "2025-05-04 07:36:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/80/dataEnvio'] String "2025-05-04 07:35:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/81/dataEnvio'] String "2025-05-04 07:35:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/82/dataEnvio'] String "2025-05-04 07:35:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=83",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_1.json()["data"]) == 83
        assert res_1.json()["data"][0]["dataEnvio"] == "2025-05-04 08:25:23"
        assert res_1.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][1]["dataEnvio"] == "2025-05-04 08:24:55"
        assert res_1.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_1.json()["data"][2]["dataEnvio"] == "2025-05-04 08:22:20"
        assert res_1.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 80 elements. This limit of 3 elements can be increased in the configurations
        assert res_1.json()["pagination"]["total"] == 3147.0
        assert res_1.json()["pagination"]["count"] == 83.0
        assert res_1.json()["pagination"]["per_page"] == 83.0
        assert res_1.json()["pagination"]["current_page"] == 1.0
        assert res_1.json()["pagination"]["total_pages"] == 38.0
        assert res_1.json()["pagination"]["links"]["previous"] is None
        assert res_1.json()["pagination"]["links"]["next"] == 2.0
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/BXJXzV",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Nenhum profissional de educação encontrado."
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (200) GET:/v1/estudantes/{cpfNis}
    # 3 - (200) GET:/v1/estudantes/validacao-cadastro
    # 4 - (200) GET:/v1/profissionais/lote
    # 5 - (200) GET:/v1/profissionais/inep/{inep}
    # 6 - (422) POST:/v1/profissionais/lote
    # 7 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 8 - (200) GET:/v1/estudantes/inep/{inep}
    # Found 73 potential faults of type-code 200
    # Using 2 examples:
    #   2014
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_67(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"2XQUq\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 42, " + \
            " \"bairro\": \"blV9mZ937Jy\", " + \
            " \"municipio\": 2507507, " + \
            " \"uf\": 52, " + \
            " \"inep\": 41081013, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 184, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\" " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2072-10-02\", " + \
            " \"cargaHoraria\": 962 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/28847066743",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert res_1.json()["data"]["cpf"] == "28847066743"
        assert res_1.json()["data"]["nome"] == "Dr. Clarice da Silveira"
        assert res_1.json()["data"]["nomeSocial"] is None
        assert res_1.json()["data"]["numeroNIS"] == "37540815522"
        assert res_1.json()["data"]["rg"] == "64406644276257499612"
        assert res_1.json()["data"]["orgaoEmissor"] == "iOJc-tY"
        assert res_1.json()["data"]["cpfResponsavel"] == "40474244271"
        assert res_1.json()["data"]["nomeMaeEstudante"] == "Pedro Tobias Lopes"
        assert res_1.json()["data"]["numeroNISResponsavel"] == "52074067859"
        assert res_1.json()["data"]["dataNascimento"] == "1970-10-17"
        assert res_1.json()["data"]["logradouro"] == "Ponte José Longuinho"
        assert res_1.json()["data"]["bairro"] == "Bairro ex"
        assert res_1.json()["data"]["numero"] == "538"
        assert res_1.json()["data"]["cep"] == "84176622"
        assert res_1.json()["data"]["municipio"] == 2205573.0
        assert res_1.json()["data"]["certidaoNascimento"] == "18822661888356310393534376361528"
        assert res_1.json()["data"]["cnh"] == "37310993695"
        assert res_1.json()["data"]["uf"] == 41.0
        assert res_1.json()["data"]["racaCor"] == 2.0
        assert len(res_1.json()["data"]["tipoDeficiencia"]) == 0
        assert res_1.json()["data"]["genero"] == 1.0
        assert res_1.json()["data"]["telefone"] is None
        assert res_1.json()["data"]["email"] is None
        assert res_1.json()["data"]["situacaoCadastroValidado"] == 4.0
        assert len(res_1.json()["data"]["matriculas"]) == 1
        assert res_1.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1229724.0
        assert res_1.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_1.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "1995-04-08"
        assert res_1.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_1.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "1996-08-19"
        assert res_1.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_1.json()["data"]["matriculas"][0]["serieAno"] == 62.0
        assert res_1.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Profissional/Técnico"
        assert res_1.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_1.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_1.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_1.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_1.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_1.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_1.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_1.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_1.json()["data"]["outrasMatriculas"]) == 0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/15'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/16'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/17'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/18'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/19'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/20'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/21'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/22'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/23'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/24'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/25'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/26'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/27'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/28'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/29'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/30'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/31'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/32'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/33'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/34'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/35'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/36'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/37'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/38'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/39'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/40'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/41'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/42'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/43'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/44'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/45'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/46'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/47'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/48'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/49'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/50'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/51'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "page=539&" + 
                    "per_page=52",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        assert len(res_2.json()["data"]) == 52
        assert res_2.json()["data"][0]["cpf"] == "80688512836"
        assert res_2.json()["data"][0]["numeroNIS"] == "38751352990"
        assert res_2.json()["data"][0]["situacaoCadastral"] == "Inexistente"
        assert res_2.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_2.json()["data"][0]["nome"] == "Ryan do Prado"
        assert res_2.json()["data"][0]["nomeValidado"] == False
        assert res_2.json()["data"][0]["dataNascimento"] == "1980-05-19"
        assert res_2.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_2.json()["data"][0]["nomeMaeEstudante"] == "Vinicius Alves Jr."
        assert res_2.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_2.json()["data"][0]["dataValidacaoCadastral"] == "2025-05-02 01:09:43"
        assert res_2.json()["data"][1]["cpf"] == "12976566011"
        assert res_2.json()["data"][1]["numeroNIS"] == "12507839386"
        assert res_2.json()["data"][1]["situacaoCadastral"] == "Inexistente"
        assert res_2.json()["data"][1]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_2.json()["data"][1]["nome"] == "Allana Batista Jr."
        assert res_2.json()["data"][1]["nomeValidado"] == False
        assert res_2.json()["data"][1]["dataNascimento"] == "1980-10-31"
        assert res_2.json()["data"][1]["dataNascimentoValidada"] == False
        assert res_2.json()["data"][1]["nomeMaeEstudante"] == "Sra. Allana Hermingues"
        assert res_2.json()["data"][1]["nomeMaeEstudanteValidado"] == False
        assert res_2.json()["data"][1]["dataValidacaoCadastral"] == "2025-05-02 01:09:46"
        assert res_2.json()["data"][2]["cpf"] == "29899581429"
        assert res_2.json()["data"][2]["numeroNIS"] == "52936647399"
        assert res_2.json()["data"][2]["situacaoCadastral"] == "Inexistente"
        assert res_2.json()["data"][2]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_2.json()["data"][2]["nome"] == "Luiz Miguel Camacho"
        assert res_2.json()["data"][2]["nomeValidado"] == False
        assert res_2.json()["data"][2]["dataNascimento"] == "1996-08-09"
        assert res_2.json()["data"][2]["dataNascimentoValidada"] == False
        assert res_2.json()["data"][2]["nomeMaeEstudante"] == "Lucas Brites"
        assert res_2.json()["data"][2]["nomeMaeEstudanteValidado"] == False
        assert res_2.json()["data"][2]["dataValidacaoCadastral"] == "2025-05-02 01:29:23"
        # Skipping assertions on the remaining 49 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 54714.0
        assert res_2.json()["pagination"]["count"] == 52.0
        assert res_2.json()["pagination"]["per_page"] == 52.0
        assert res_2.json()["pagination"]["current_page"] == 539.0
        assert res_2.json()["pagination"]["total_pages"] == 1053.0
        assert res_2.json()["pagination"]["links"]["previous"] == 538.0
        assert res_2.json()["pagination"]["links"]["next"] == 540.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:43:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:36:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:35:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:35:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:34:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:32:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:32:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:31:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:31:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:29:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?page=-1838000973",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["dataEnvio"] == "2025-05-04 08:43:26"
        assert res_3.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][1]["dataEnvio"] == "2025-05-04 08:36:51"
        assert res_3.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][2]["dataEnvio"] == "2025-05-04 08:35:36"
        assert res_3.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 3159.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 316.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/YjxTocCgYLb3c",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_4.json()["data"]) == 0
        assert res_4.json()["pagination"]["total"] == 0.0
        assert res_4.json()["pagination"]["count"] == 0.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 1.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 422
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/9827436884696403/erros?per_page=15",
                    headers=headers)
        
        assert res_6.status_code == 400
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "O ID fornecido não é um UUID válido. ID: 9827436884696403"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/41081730?" + 
                    "situacao_matricula=INATIVAS&" + 
                    "ano_matricula=42",
                    headers=headers)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_7.json()["data"]) == 0
        assert res_7.json()["pagination"]["total"] == 0.0
        assert res_7.json()["pagination"]["count"] == 0.0
        assert res_7.json()["pagination"]["per_page"] == 10.0
        assert res_7.json()["pagination"]["current_page"] == 1.0
        assert res_7.json()["pagination"]["total_pages"] == 1.0
        assert res_7.json()["pagination"]["links"]["previous"] is None
        assert res_7.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (200) PATCH:/v1/estudantes/lote
    # 2 - (422) POST:/v1/profissionais
    # 3 - (200) GET:/v1/estudantes/lote
    # 4 - (401) GET:/v1/profissionais/inep/{inep}
    # 5 - (200) GET:/v1/profissionais/lote/{id}
    # 6 - (404) GET:/v1/profissionais/{cpf}
    # 7 - (200) GET:/v1/profissionais/lote
    # 8 - (200) GET:/v1/estudantes/{cpfNis}
    # 9 - (200) GET:/v1/estudantes/{cpfNis}
    # Found 92 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_68(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_49_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_50_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_51_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_52_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_53_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_0.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nome\": \"cgnQMtN9htep16\", " + \
            " \"genero\": 7, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"YipyiZ@example.com\", " + \
            " \"telefone\": \"3333333\", " + \
            " \"sexo\": \"0\", " + \
            " \"bairro\": \"Centro\", " + \
            " \"inep\": 41073649, " + \
            " \"matriculaRede\": \"qyWPbnYsup9Y\", " + \
            " \"codigoFuncao\": 2 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_1.status_code == 422
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #2 ($dataNascimento) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?page=273",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_2.json()["data"]) == 10
        assert res_2.json()["data"][0]["dataEnvio"] == "2025-05-03 03:08:31"
        assert res_2.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_2.json()["data"][1]["dataEnvio"] == "2025-05-03 03:08:20"
        assert res_2.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_2.json()["data"][2]["dataEnvio"] == "2025-05-03 03:07:57"
        assert res_2.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 10554.0
        assert res_2.json()["pagination"]["count"] == 10.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 273.0
        assert res_2.json()["pagination"]["total_pages"] == 1056.0
        assert res_2.json()["pagination"]["links"]["previous"] == 272.0
        assert res_2.json()["pagination"]["links"]["next"] == 274.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> Response status 401 not defined for path '/v1/profissionais/inep/{inep}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/29162840?per_page=740",
                    headers=headers)
        
        assert res_3.status_code == 401
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/dbd00c67-aef2-4e17-b12b-b24484364e02?incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["status_processamento"] == "Enviado"
        assert res_4.json()["message"] == "Lote recuperado com sucesso. ID: dbd00c67-aef2-4e17-b12b-b24484364e02"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/JsQvHJ6",
                    headers=headers)
        
        assert res_5.status_code == 404
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Nenhum profissional de educação encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:36:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:35:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:35:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:34:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:32:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:32:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:31:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:31:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:29:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:29:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 08:27:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 08:25:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/15/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/16/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/17/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/18/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/19/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/20/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/21/dataEnvio'] String "2025-05-04 08:11:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/22/dataEnvio'] String "2025-05-04 08:09:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/23/dataEnvio'] String "2025-05-04 08:08:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/24/dataEnvio'] String "2025-05-04 08:07:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/25/dataEnvio'] String "2025-05-04 08:06:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/26/dataEnvio'] String "2025-05-04 08:03:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/27/dataEnvio'] String "2025-05-04 08:02:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/28/dataEnvio'] String "2025-05-04 08:02:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/29/dataEnvio'] String "2025-05-04 08:01:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/30/dataEnvio'] String "2025-05-04 08:00:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/31/dataEnvio'] String "2025-05-04 07:58:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/32/dataEnvio'] String "2025-05-04 07:55:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/33/dataEnvio'] String "2025-05-04 07:55:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/34/dataEnvio'] String "2025-05-04 07:55:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/35/dataEnvio'] String "2025-05-04 07:54:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/36/dataEnvio'] String "2025-05-04 07:53:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/37/dataEnvio'] String "2025-05-04 07:53:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/38/dataEnvio'] String "2025-05-04 07:53:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/39/dataEnvio'] String "2025-05-04 07:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/40/dataEnvio'] String "2025-05-04 07:53:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/41/dataEnvio'] String "2025-05-04 07:53:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/42/dataEnvio'] String "2025-05-04 07:53:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/43/dataEnvio'] String "2025-05-04 07:53:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/44/dataEnvio'] String "2025-05-04 07:53:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/45/dataEnvio'] String "2025-05-04 07:53:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/46/dataEnvio'] String "2025-05-04 07:52:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/47/dataEnvio'] String "2025-05-04 07:52:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/48/dataEnvio'] String "2025-05-04 07:52:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/49/dataEnvio'] String "2025-05-04 07:52:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/50/dataEnvio'] String "2025-05-04 07:52:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/51/dataEnvio'] String "2025-05-04 07:52:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/52/dataEnvio'] String "2025-05-04 07:52:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/53/dataEnvio'] String "2025-05-04 07:51:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/54/dataEnvio'] String "2025-05-04 07:51:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/55/dataEnvio'] String "2025-05-04 07:51:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/56/dataEnvio'] String "2025-05-04 07:51:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/57/dataEnvio'] String "2025-05-04 07:51:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/58/dataEnvio'] String "2025-05-04 07:49:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/59/dataEnvio'] String "2025-05-04 07:49:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/60/dataEnvio'] String "2025-05-04 07:48:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/61/dataEnvio'] String "2025-05-04 07:46:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/62/dataEnvio'] String "2025-05-04 07:46:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/63/dataEnvio'] String "2025-05-04 07:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/64/dataEnvio'] String "2025-05-04 07:46:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/65/dataEnvio'] String "2025-05-04 07:44:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/66/dataEnvio'] String "2025-05-04 07:43:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/67/dataEnvio'] String "2025-05-04 07:43:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/68/dataEnvio'] String "2025-05-04 07:43:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/69/dataEnvio'] String "2025-05-04 07:43:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/70/dataEnvio'] String "2025-05-04 07:43:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/71/dataEnvio'] String "2025-05-04 07:43:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/72/dataEnvio'] String "2025-05-04 07:43:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/73/dataEnvio'] String "2025-05-04 07:43:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/74/dataEnvio'] String "2025-05-04 07:42:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/75/dataEnvio'] String "2025-05-04 07:42:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/76/dataEnvio'] String "2025-05-04 07:42:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/77/dataEnvio'] String "2025-05-04 07:42:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/78/dataEnvio'] String "2025-05-04 07:42:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/79/dataEnvio'] String "2025-05-04 07:41:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/80/dataEnvio'] String "2025-05-04 07:39:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/81/dataEnvio'] String "2025-05-04 07:38:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/82/dataEnvio'] String "2025-05-04 07:38:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=83",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_6.json()["data"]) == 83
        assert res_6.json()["data"][0]["dataEnvio"] == "2025-05-04 08:36:51"
        assert res_6.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][1]["dataEnvio"] == "2025-05-04 08:35:36"
        assert res_6.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][2]["dataEnvio"] == "2025-05-04 08:35:02"
        assert res_6.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 80 elements. This limit of 3 elements can be increased in the configurations
        assert res_6.json()["pagination"]["total"] == 3158.0
        assert res_6.json()["pagination"]["count"] == 83.0
        assert res_6.json()["pagination"]["per_page"] == 83.0
        assert res_6.json()["pagination"]["current_page"] == 1.0
        assert res_6.json()["pagination"]["total_pages"] == 39.0
        assert res_6.json()["pagination"]["links"]["previous"] is None
        assert res_6.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/52652547496",
                    headers=headers)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Dados obtidos com sucesso."
        assert res_7.json()["data"]["cpf"] == "52652547496"
        assert res_7.json()["data"]["nome"] == "Fabrícia Alves Neto"
        assert res_7.json()["data"]["nomeSocial"] is None
        assert res_7.json()["data"]["numeroNIS"] == "91158714563"
        assert res_7.json()["data"]["rg"] == "76417758995855008937"
        assert res_7.json()["data"]["orgaoEmissor"] == "pLwZ-ag"
        assert res_7.json()["data"]["cpfResponsavel"] == "96290664028"
        assert res_7.json()["data"]["nomeMaeEstudante"] == "Gúbio Barreira"
        assert res_7.json()["data"]["numeroNISResponsavel"] == "11037169385"
        assert res_7.json()["data"]["dataNascimento"] == "1982-07-25"
        assert res_7.json()["data"]["logradouro"] == "Marginal Kaique Teles"
        assert res_7.json()["data"]["bairro"] == "Bairro voluptas"
        assert res_7.json()["data"]["numero"] == "62"
        assert res_7.json()["data"]["cep"] == "75240937"
        assert res_7.json()["data"]["municipio"] == 3109253.0
        assert res_7.json()["data"]["certidaoNascimento"] == "36726692674052270335358056094731"
        assert res_7.json()["data"]["cnh"] == "82201822914"
        assert res_7.json()["data"]["uf"] == 25.0
        assert res_7.json()["data"]["racaCor"] == 2.0
        assert len(res_7.json()["data"]["tipoDeficiencia"]) == 3
        assert res_7.json()["data"]["tipoDeficiencia"][0] == 5.0
        assert res_7.json()["data"]["tipoDeficiencia"][1] == 9.0
        assert res_7.json()["data"]["tipoDeficiencia"][2] == 10.0
        assert res_7.json()["data"]["genero"] == 2.0
        assert res_7.json()["data"]["telefone"] is None
        assert res_7.json()["data"]["email"] is None
        assert res_7.json()["data"]["situacaoCadastroValidado"] == 4.0
        assert len(res_7.json()["data"]["matriculas"]) == 1
        assert res_7.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 1390169.0
        assert res_7.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_7.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2004-11-15"
        assert res_7.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_7.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "2003-09-14"
        assert res_7.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_7.json()["data"]["matriculas"][0]["serieAno"] == 13.0
        assert res_7.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Fundamental de 8 anos"
        assert res_7.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_7.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_7.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_7.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_7.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_7.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_7.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_7.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_7.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_7.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_7.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_7.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_7.json()["data"]["outrasMatriculas"]) == 0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/71900567423",
                    headers=headers)
        
        assert res_8.status_code == 200
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == True
        assert res_8.json()["message"] == "Dados obtidos com sucesso."
        assert res_8.json()["data"]["cpf"] == "71900567423"
        assert res_8.json()["data"]["nome"] == "Clarice Nogueira"
        assert res_8.json()["data"]["nomeSocial"] is None
        assert res_8.json()["data"]["numeroNIS"] is None
        assert res_8.json()["data"]["rg"] == "72048165X"
        assert res_8.json()["data"]["orgaoEmissor"] == "SEDS"
        assert res_8.json()["data"]["cpfResponsavel"] == "12111123521"
        assert res_8.json()["data"]["nomeMaeEstudante"] == "Laura Araújo"
        assert res_8.json()["data"]["numeroNISResponsavel"] == "71900567423"
        assert res_8.json()["data"]["dataNascimento"] == "1927-08-03"
        assert res_8.json()["data"]["logradouro"] == "USCGC Powers\nFPO AP 57305"
        assert res_8.json()["data"]["bairro"] == "Vila Independencia 3ª Seção"
        assert res_8.json()["data"]["numero"] == "220"
        assert res_8.json()["data"]["cep"] == "93255945"
        assert res_8.json()["data"]["municipio"] == 2704302.0
        assert res_8.json()["data"]["certidaoNascimento"] == "2005060"
        assert res_8.json()["data"]["cnh"] is None
        assert res_8.json()["data"]["uf"] == 27.0
        assert res_8.json()["data"]["racaCor"] == 3.0
        assert len(res_8.json()["data"]["tipoDeficiencia"]) == 3
        assert res_8.json()["data"]["tipoDeficiencia"][0] == 5.0
        assert res_8.json()["data"]["tipoDeficiencia"][1] == 9.0
        assert res_8.json()["data"]["tipoDeficiencia"][2] == 10.0
        assert res_8.json()["data"]["genero"] == 3.0
        assert res_8.json()["data"]["telefone"] is None
        assert res_8.json()["data"]["email"] == "eduardacostela@example.org"
        assert res_8.json()["data"]["situacaoCadastroValidado"] == 3.0
        assert len(res_8.json()["data"]["matriculas"]) == 1
        assert res_8.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 111503.0
        assert res_8.json()["data"]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_8.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2024-03-03"
        assert res_8.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_8.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] == "2023-10-25"
        assert res_8.json()["data"]["matriculas"][0]["situacaoMatricula"] == False
        assert res_8.json()["data"]["matriculas"][0]["serieAno"] == 2.0
        assert res_8.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação Infantil"
        assert res_8.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_8.json()["data"]["matriculas"][0]["deletadaEm"] == "2024-09-25 16:12:13"
        assert res_8.json()["data"]["matriculas"][0]["inep"] == "27014088"
        assert res_8.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] == 10.0
        assert res_8.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_8.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_8.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_8.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_8.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_8.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_8.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_8.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_8.json()["data"]["outrasMatriculas"]) == 0
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais/lote
    # 2 - (200) GET:/v1/profissionais
    # 3 - (201) POST:/v1/profissionais/lote
    # Found 487 potential faults of type-code 200
    # Using 3 examples:
    #   1
    #   44
    #   5
    @timeout_decorator.timeout(60)
    def test_69(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 08:24:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 08:22:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 08:22:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 08:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 08:20:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 08:20:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 08:20:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 08:12:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 08:11:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 08:11:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 08:09:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 08:08:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 08:07:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 08:06:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 08:03:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/15/dataEnvio'] String "2025-05-04 08:02:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/16/dataEnvio'] String "2025-05-04 08:02:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/17/dataEnvio'] String "2025-05-04 08:01:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/18/dataEnvio'] String "2025-05-04 08:00:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/19/dataEnvio'] String "2025-05-04 07:58:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/20/dataEnvio'] String "2025-05-04 07:55:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/21/dataEnvio'] String "2025-05-04 07:55:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/22/dataEnvio'] String "2025-05-04 07:55:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/23/dataEnvio'] String "2025-05-04 07:54:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/24/dataEnvio'] String "2025-05-04 07:53:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/25/dataEnvio'] String "2025-05-04 07:53:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/26/dataEnvio'] String "2025-05-04 07:53:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/27/dataEnvio'] String "2025-05-04 07:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/28/dataEnvio'] String "2025-05-04 07:53:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/29/dataEnvio'] String "2025-05-04 07:53:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/30/dataEnvio'] String "2025-05-04 07:53:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/31/dataEnvio'] String "2025-05-04 07:53:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/32/dataEnvio'] String "2025-05-04 07:53:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/33/dataEnvio'] String "2025-05-04 07:53:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/34/dataEnvio'] String "2025-05-04 07:52:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/35/dataEnvio'] String "2025-05-04 07:52:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/36/dataEnvio'] String "2025-05-04 07:52:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/37/dataEnvio'] String "2025-05-04 07:52:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/38/dataEnvio'] String "2025-05-04 07:52:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/39/dataEnvio'] String "2025-05-04 07:52:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/40/dataEnvio'] String "2025-05-04 07:52:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/41/dataEnvio'] String "2025-05-04 07:51:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/42/dataEnvio'] String "2025-05-04 07:51:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/43/dataEnvio'] String "2025-05-04 07:51:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/44/dataEnvio'] String "2025-05-04 07:51:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/45/dataEnvio'] String "2025-05-04 07:51:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/46/dataEnvio'] String "2025-05-04 07:49:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/47/dataEnvio'] String "2025-05-04 07:49:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/48/dataEnvio'] String "2025-05-04 07:48:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/49/dataEnvio'] String "2025-05-04 07:46:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/50/dataEnvio'] String "2025-05-04 07:46:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/51/dataEnvio'] String "2025-05-04 07:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/52/dataEnvio'] String "2025-05-04 07:46:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/53/dataEnvio'] String "2025-05-04 07:44:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/54/dataEnvio'] String "2025-05-04 07:43:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/55/dataEnvio'] String "2025-05-04 07:43:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/56/dataEnvio'] String "2025-05-04 07:43:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/57/dataEnvio'] String "2025-05-04 07:43:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/58/dataEnvio'] String "2025-05-04 07:43:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/59/dataEnvio'] String "2025-05-04 07:43:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/60/dataEnvio'] String "2025-05-04 07:43:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/61/dataEnvio'] String "2025-05-04 07:43:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/62/dataEnvio'] String "2025-05-04 07:42:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/63/dataEnvio'] String "2025-05-04 07:42:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/64/dataEnvio'] String "2025-05-04 07:42:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/65/dataEnvio'] String "2025-05-04 07:42:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/66/dataEnvio'] String "2025-05-04 07:42:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/67/dataEnvio'] String "2025-05-04 07:41:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/68/dataEnvio'] String "2025-05-04 07:39:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/69/dataEnvio'] String "2025-05-04 07:38:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/70/dataEnvio'] String "2025-05-04 07:38:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/71/dataEnvio'] String "2025-05-04 07:37:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/72/dataEnvio'] String "2025-05-04 07:37:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/73/dataEnvio'] String "2025-05-04 07:37:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/74/dataEnvio'] String "2025-05-04 07:37:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/75/dataEnvio'] String "2025-05-04 07:36:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/76/dataEnvio'] String "2025-05-04 07:36:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/77/dataEnvio'] String "2025-05-04 07:36:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/78/dataEnvio'] String "2025-05-04 07:36:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/79/dataEnvio'] String "2025-05-04 07:35:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/80/dataEnvio'] String "2025-05-04 07:35:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/81/dataEnvio'] String "2025-05-04 07:35:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/82/dataEnvio'] String "2025-05-04 07:34:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/83/dataEnvio'] String "2025-05-04 07:33:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/84/dataEnvio'] String "2025-05-04 07:33:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/85/dataEnvio'] String "2025-05-04 07:33:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/86/dataEnvio'] String "2025-05-04 07:33:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/87/dataEnvio'] String "2025-05-04 07:33:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/88/dataEnvio'] String "2025-05-04 07:33:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/89/dataEnvio'] String "2025-05-04 07:33:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/90/dataEnvio'] String "2025-05-04 07:33:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/91/dataEnvio'] String "2025-05-04 07:33:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/92/dataEnvio'] String "2025-05-04 07:33:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/93/dataEnvio'] String "2025-05-04 07:33:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/94/dataEnvio'] String "2025-05-04 07:32:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/95/dataEnvio'] String "2025-05-04 07:31:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/96/dataEnvio'] String "2025-05-04 07:31:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/97/dataEnvio'] String "2025-05-04 07:31:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/98/dataEnvio'] String "2025-05-04 07:31:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/99/dataEnvio'] String "2025-05-04 07:30:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/100/dataEnvio'] String "2025-05-04 07:29:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/101/dataEnvio'] String "2025-05-04 07:26:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/102/dataEnvio'] String "2025-05-04 07:25:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/103/dataEnvio'] String "2025-05-04 07:25:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/104/dataEnvio'] String "2025-05-04 07:25:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/105/dataEnvio'] String "2025-05-04 07:24:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/106/dataEnvio'] String "2025-05-04 07:24:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/107/dataEnvio'] String "2025-05-04 07:24:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/108/dataEnvio'] String "2025-05-04 07:24:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/109/dataEnvio'] String "2025-05-04 07:24:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/110/dataEnvio'] String "2025-05-04 07:24:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/111/dataEnvio'] String "2025-05-04 07:23:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/112/dataEnvio'] String "2025-05-04 07:23:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/113/dataEnvio'] String "2025-05-04 07:23:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/114/dataEnvio'] String "2025-05-04 07:19:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/115/dataEnvio'] String "2025-05-04 07:19:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/116/dataEnvio'] String "2025-05-04 07:17:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/117/dataEnvio'] String "2025-05-04 07:16:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/118/dataEnvio'] String "2025-05-04 07:16:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/119/dataEnvio'] String "2025-05-04 07:15:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/120/dataEnvio'] String "2025-05-04 07:15:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/121/dataEnvio'] String "2025-05-04 07:15:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/122/dataEnvio'] String "2025-05-04 07:15:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/123/dataEnvio'] String "2025-05-04 07:14:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/124/dataEnvio'] String "2025-05-04 07:14:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/125/dataEnvio'] String "2025-05-04 07:13:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/126/dataEnvio'] String "2025-05-04 07:12:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/127/dataEnvio'] String "2025-05-04 07:09:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/128/dataEnvio'] String "2025-05-04 07:06:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/129/dataEnvio'] String "2025-05-04 07:03:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/130/dataEnvio'] String "2025-05-04 07:02:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/131/dataEnvio'] String "2025-05-04 07:02:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/132/dataEnvio'] String "2025-05-04 07:01:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/133/dataEnvio'] String "2025-05-04 07:00:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/134/dataEnvio'] String "2025-05-04 06:59:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/135/dataEnvio'] String "2025-05-04 06:59:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/136/dataEnvio'] String "2025-05-04 06:57:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/137/dataEnvio'] String "2025-05-04 06:57:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/138/dataEnvio'] String "2025-05-04 06:54:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/139/dataEnvio'] String "2025-05-04 06:53:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/140/dataEnvio'] String "2025-05-04 06:52:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/141/dataEnvio'] String "2025-05-04 06:49:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/142/dataEnvio'] String "2025-05-04 06:46:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/143/dataEnvio'] String "2025-05-04 06:44:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/144/dataEnvio'] String "2025-05-04 06:44:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/145/dataEnvio'] String "2025-05-04 06:44:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/146/dataEnvio'] String "2025-05-04 06:43:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/147/dataEnvio'] String "2025-05-04 06:43:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/148/dataEnvio'] String "2025-05-04 06:37:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/149/dataEnvio'] String "2025-05-04 06:37:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/150/dataEnvio'] String "2025-05-04 06:36:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/151/dataEnvio'] String "2025-05-04 06:35:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/152/dataEnvio'] String "2025-05-04 06:31:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/153/dataEnvio'] String "2025-05-04 06:29:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/154/dataEnvio'] String "2025-05-04 06:29:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/155/dataEnvio'] String "2025-05-04 06:29:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/156/dataEnvio'] String "2025-05-04 06:28:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/157/dataEnvio'] String "2025-05-04 06:27:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/158/dataEnvio'] String "2025-05-04 06:26:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/159/dataEnvio'] String "2025-05-04 06:25:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/160/dataEnvio'] String "2025-05-04 06:25:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/161/dataEnvio'] String "2025-05-04 06:25:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/162/dataEnvio'] String "2025-05-04 06:23:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/163/dataEnvio'] String "2025-05-04 06:21:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/164/dataEnvio'] String "2025-05-04 06:20:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/165/dataEnvio'] String "2025-05-04 06:20:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/166/dataEnvio'] String "2025-05-04 06:18:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/167/dataEnvio'] String "2025-05-04 06:17:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/168/dataEnvio'] String "2025-05-04 06:17:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/169/dataEnvio'] String "2025-05-04 06:13:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/170/dataEnvio'] String "2025-05-04 06:12:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/171/dataEnvio'] String "2025-05-04 06:12:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/172/dataEnvio'] String "2025-05-04 06:09:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/173/dataEnvio'] String "2025-05-04 06:07:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/174/dataEnvio'] String "2025-05-04 06:02:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/175/dataEnvio'] String "2025-05-04 05:54:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/176/dataEnvio'] String "2025-05-04 05:51:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/177/dataEnvio'] String "2025-05-04 05:51:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/178/dataEnvio'] String "2025-05-04 05:50:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/179/dataEnvio'] String "2025-05-04 05:48:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/180/dataEnvio'] String "2025-05-04 05:46:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/181/dataEnvio'] String "2025-05-04 05:45:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/182/dataEnvio'] String "2025-05-04 05:44:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/183/dataEnvio'] String "2025-05-04 05:43:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/184/dataEnvio'] String "2025-05-04 05:42:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/185/dataEnvio'] String "2025-05-04 05:42:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/186/dataEnvio'] String "2025-05-04 05:42:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/187/dataEnvio'] String "2025-05-04 05:40:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/188/dataEnvio'] String "2025-05-04 05:39:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/189/dataEnvio'] String "2025-05-04 05:39:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/190/dataEnvio'] String "2025-05-04 05:37:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/191/dataEnvio'] String "2025-05-04 05:36:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/192/dataEnvio'] String "2025-05-04 05:34:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/193/dataEnvio'] String "2025-05-04 05:33:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/194/dataEnvio'] String "2025-05-04 05:33:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/195/dataEnvio'] String "2025-05-04 05:32:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/196/dataEnvio'] String "2025-05-04 05:32:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/197/dataEnvio'] String "2025-05-04 05:32:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/198/dataEnvio'] String "2025-05-04 05:32:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/199/dataEnvio'] String "2025-05-04 05:32:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/200/dataEnvio'] String "2025-05-04 05:32:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/201/dataEnvio'] String "2025-05-04 05:32:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/202/dataEnvio'] String "2025-05-04 05:32:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/203/dataEnvio'] String "2025-05-04 05:32:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/204/dataEnvio'] String "2025-05-04 05:32:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/205/dataEnvio'] String "2025-05-04 05:32:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/206/dataEnvio'] String "2025-05-04 05:32:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/207/dataEnvio'] String "2025-05-04 05:32:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/208/dataEnvio'] String "2025-05-04 05:32:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/209/dataEnvio'] String "2025-05-04 05:31:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/210/dataEnvio'] String "2025-05-04 05:31:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/211/dataEnvio'] String "2025-05-04 05:31:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/212/dataEnvio'] String "2025-05-04 05:31:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/213/dataEnvio'] String "2025-05-04 05:30:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/214/dataEnvio'] String "2025-05-04 05:30:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/215/dataEnvio'] String "2025-05-04 05:30:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/216/dataEnvio'] String "2025-05-04 05:30:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/217/dataEnvio'] String "2025-05-04 05:30:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/218/dataEnvio'] String "2025-05-04 05:30:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/219/dataEnvio'] String "2025-05-04 05:30:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/220/dataEnvio'] String "2025-05-04 05:30:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/221/dataEnvio'] String "2025-05-04 05:29:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/222/dataEnvio'] String "2025-05-04 05:29:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/223/dataEnvio'] String "2025-05-04 05:29:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/224/dataEnvio'] String "2025-05-04 05:29:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/225/dataEnvio'] String "2025-05-04 05:28:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/226/dataEnvio'] String "2025-05-04 05:27:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/227/dataEnvio'] String "2025-05-04 05:26:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/228/dataEnvio'] String "2025-05-04 05:26:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/229/dataEnvio'] String "2025-05-04 05:26:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/230/dataEnvio'] String "2025-05-04 05:26:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/231/dataEnvio'] String "2025-05-04 05:26:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/232/dataEnvio'] String "2025-05-04 05:26:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/233/dataEnvio'] String "2025-05-04 05:26:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/234/dataEnvio'] String "2025-05-04 05:26:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/235/dataEnvio'] String "2025-05-04 05:26:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/236/dataEnvio'] String "2025-05-04 05:24:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/237/dataEnvio'] String "2025-05-04 05:21:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/238/dataEnvio'] String "2025-05-04 05:20:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/239/dataEnvio'] String "2025-05-04 05:20:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/240/dataEnvio'] String "2025-05-04 05:20:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/241/dataEnvio'] String "2025-05-04 05:20:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/242/dataEnvio'] String "2025-05-04 05:20:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/243/dataEnvio'] String "2025-05-04 05:20:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/244/dataEnvio'] String "2025-05-04 05:20:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/245/dataEnvio'] String "2025-05-04 05:19:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/246/dataEnvio'] String "2025-05-04 05:19:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/247/dataEnvio'] String "2025-05-04 05:19:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/248/dataEnvio'] String "2025-05-04 05:19:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/249/dataEnvio'] String "2025-05-04 05:19:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/250/dataEnvio'] String "2025-05-04 05:19:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/251/dataEnvio'] String "2025-05-04 05:19:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/252/dataEnvio'] String "2025-05-04 05:19:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/253/dataEnvio'] String "2025-05-04 05:19:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/254/dataEnvio'] String "2025-05-04 05:18:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/255/dataEnvio'] String "2025-05-04 05:18:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/256/dataEnvio'] String "2025-05-04 05:18:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/257/dataEnvio'] String "2025-05-04 05:18:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/258/dataEnvio'] String "2025-05-04 05:18:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/259/dataEnvio'] String "2025-05-04 05:18:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/260/dataEnvio'] String "2025-05-04 05:18:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/261/dataEnvio'] String "2025-05-04 05:17:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/262/dataEnvio'] String "2025-05-04 05:17:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/263/dataEnvio'] String "2025-05-04 05:17:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/264/dataEnvio'] String "2025-05-04 05:16:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/265/dataEnvio'] String "2025-05-04 05:16:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/266/dataEnvio'] String "2025-05-04 05:15:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/267/dataEnvio'] String "2025-05-04 05:15:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/268/dataEnvio'] String "2025-05-04 05:15:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/269/dataEnvio'] String "2025-05-04 05:15:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/270/dataEnvio'] String "2025-05-04 05:15:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/271/dataEnvio'] String "2025-05-04 05:15:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/272/dataEnvio'] String "2025-05-04 05:15:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/273/dataEnvio'] String "2025-05-04 05:15:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/274/dataEnvio'] String "2025-05-04 05:15:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/275/dataEnvio'] String "2025-05-04 05:15:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/276/dataEnvio'] String "2025-05-04 05:14:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/277/dataEnvio'] String "2025-05-04 05:14:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/278/dataEnvio'] String "2025-05-04 05:14:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/279/dataEnvio'] String "2025-05-04 05:14:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/280/dataEnvio'] String "2025-05-04 05:13:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/281/dataEnvio'] String "2025-05-04 05:12:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/282/dataEnvio'] String "2025-05-04 05:11:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/283/dataEnvio'] String "2025-05-04 05:11:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/284/dataEnvio'] String "2025-05-04 05:11:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/285/dataEnvio'] String "2025-05-04 05:11:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/286/dataEnvio'] String "2025-05-04 05:11:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/287/dataEnvio'] String "2025-05-04 05:10:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/288/dataEnvio'] String "2025-05-04 05:10:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/289/dataEnvio'] String "2025-05-04 05:10:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/290/dataEnvio'] String "2025-05-04 05:10:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/291/dataEnvio'] String "2025-05-04 05:10:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/292/dataEnvio'] String "2025-05-04 05:10:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/293/dataEnvio'] String "2025-05-04 05:10:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/294/dataEnvio'] String "2025-05-04 05:09:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/295/dataEnvio'] String "2025-05-04 05:09:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/296/dataEnvio'] String "2025-05-04 05:09:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/297/dataEnvio'] String "2025-05-04 05:09:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/298/dataEnvio'] String "2025-05-04 05:08:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/299/dataEnvio'] String "2025-05-04 05:08:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/300/dataEnvio'] String "2025-05-04 05:06:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/301/dataEnvio'] String "2025-05-04 05:06:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/302/dataEnvio'] String "2025-05-04 05:06:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/303/dataEnvio'] String "2025-05-04 05:05:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/304/dataEnvio'] String "2025-05-04 05:05:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/305/dataEnvio'] String "2025-05-04 05:05:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/306/dataEnvio'] String "2025-05-04 05:05:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/307/dataEnvio'] String "2025-05-04 05:04:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/308/dataEnvio'] String "2025-05-04 05:04:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/309/dataEnvio'] String "2025-05-04 05:04:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/310/dataEnvio'] String "2025-05-04 05:03:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/311/dataEnvio'] String "2025-05-04 05:02:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/312/dataEnvio'] String "2025-05-04 05:02:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/313/dataEnvio'] String "2025-05-04 05:02:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/314/dataEnvio'] String "2025-05-04 05:02:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/315/dataEnvio'] String "2025-05-04 05:02:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/316/dataEnvio'] String "2025-05-04 05:01:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/317/dataEnvio'] String "2025-05-04 05:00:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/318/dataEnvio'] String "2025-05-04 05:00:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/319/dataEnvio'] String "2025-05-04 04:59:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/320/dataEnvio'] String "2025-05-04 04:59:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/321/dataEnvio'] String "2025-05-04 04:58:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/322/dataEnvio'] String "2025-05-04 04:58:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/323/dataEnvio'] String "2025-05-04 04:58:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/324/dataEnvio'] String "2025-05-04 04:58:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/325/dataEnvio'] String "2025-05-04 04:57:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/326/dataEnvio'] String "2025-05-04 04:56:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/327/dataEnvio'] String "2025-05-04 04:56:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/328/dataEnvio'] String "2025-05-04 04:55:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/329/dataEnvio'] String "2025-05-04 04:54:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/330/dataEnvio'] String "2025-05-04 04:54:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/331/dataEnvio'] String "2025-05-04 04:54:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/332/dataEnvio'] String "2025-05-04 04:54:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/333/dataEnvio'] String "2025-05-04 04:54:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/334/dataEnvio'] String "2025-05-04 04:54:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/335/dataEnvio'] String "2025-05-04 04:54:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/336/dataEnvio'] String "2025-05-04 04:53:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/337/dataEnvio'] String "2025-05-04 04:53:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/338/dataEnvio'] String "2025-05-04 04:52:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/339/dataEnvio'] String "2025-05-04 04:50:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/340/dataEnvio'] String "2025-05-04 04:49:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/341/dataEnvio'] String "2025-05-04 04:48:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/342/dataEnvio'] String "2025-05-04 04:46:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/343/dataEnvio'] String "2025-05-04 04:45:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/344/dataEnvio'] String "2025-05-04 04:45:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/345/dataEnvio'] String "2025-05-04 04:41:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/346/dataEnvio'] String "2025-05-04 04:40:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/347/dataEnvio'] String "2025-05-04 04:38:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/348/dataEnvio'] String "2025-05-04 04:33:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/349/dataEnvio'] String "2025-05-04 04:33:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/350/dataEnvio'] String "2025-05-04 04:29:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/351/dataEnvio'] String "2025-05-04 04:28:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/352/dataEnvio'] String "2025-05-04 04:27:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/353/dataEnvio'] String "2025-05-04 04:26:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/354/dataEnvio'] String "2025-05-04 04:24:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/355/dataEnvio'] String "2025-05-04 04:23:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/356/dataEnvio'] String "2025-05-04 04:21:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/357/dataEnvio'] String "2025-05-04 04:21:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/358/dataEnvio'] String "2025-05-04 04:19:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/359/dataEnvio'] String "2025-05-04 04:18:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/360/dataEnvio'] String "2025-05-04 04:18:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/361/dataEnvio'] String "2025-05-04 04:13:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/362/dataEnvio'] String "2025-05-04 04:12:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/363/dataEnvio'] String "2025-05-04 04:11:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/364/dataEnvio'] String "2025-05-04 04:10:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/365/dataEnvio'] String "2025-05-04 04:08:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/366/dataEnvio'] String "2025-05-04 04:06:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/367/dataEnvio'] String "2025-05-04 04:05:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/368/dataEnvio'] String "2025-05-04 04:04:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/369/dataEnvio'] String "2025-05-04 03:59:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/370/dataEnvio'] String "2025-05-04 03:57:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/371/dataEnvio'] String "2025-05-04 03:54:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/372/dataEnvio'] String "2025-05-04 03:52:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/373/dataEnvio'] String "2025-05-04 03:49:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/374/dataEnvio'] String "2025-05-04 03:47:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/375/dataEnvio'] String "2025-05-04 03:45:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/376/dataEnvio'] String "2025-05-04 03:42:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/377/dataEnvio'] String "2025-05-04 03:40:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/378/dataEnvio'] String "2025-05-04 03:36:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/379/dataEnvio'] String "2025-05-04 03:34:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/380/dataEnvio'] String "2025-05-04 03:33:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/381/dataEnvio'] String "2025-05-04 03:32:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/382/dataEnvio'] String "2025-05-04 03:31:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/383/dataEnvio'] String "2025-05-04 03:31:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/384/dataEnvio'] String "2025-05-04 03:30:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/385/dataEnvio'] String "2025-05-04 03:29:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/386/dataEnvio'] String "2025-05-04 03:28:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/387/dataEnvio'] String "2025-05-04 03:27:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/388/dataEnvio'] String "2025-05-04 03:23:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/389/dataEnvio'] String "2025-05-04 03:23:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/390/dataEnvio'] String "2025-05-04 03:20:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/391/dataEnvio'] String "2025-05-04 03:16:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/392/dataEnvio'] String "2025-05-04 03:14:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/393/dataEnvio'] String "2025-05-04 03:13:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/394/dataEnvio'] String "2025-05-04 03:11:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/395/dataEnvio'] String "2025-05-04 03:08:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/396/dataEnvio'] String "2025-05-04 03:07:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/397/dataEnvio'] String "2025-05-04 03:07:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/398/dataEnvio'] String "2025-05-04 03:07:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/399/dataEnvio'] String "2025-05-04 03:07:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/400/dataEnvio'] String "2025-05-04 03:07:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/401/dataEnvio'] String "2025-05-04 03:07:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/402/dataEnvio'] String "2025-05-04 03:07:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/403/dataEnvio'] String "2025-05-04 03:07:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/404/dataEnvio'] String "2025-05-04 03:06:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/405/dataEnvio'] String "2025-05-04 03:06:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/406/dataEnvio'] String "2025-05-04 03:06:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/407/dataEnvio'] String "2025-05-04 03:05:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/408/dataEnvio'] String "2025-05-04 03:05:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/409/dataEnvio'] String "2025-05-04 03:05:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/410/dataEnvio'] String "2025-05-04 03:05:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/411/dataEnvio'] String "2025-05-04 03:05:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/412/dataEnvio'] String "2025-05-04 03:04:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/413/dataEnvio'] String "2025-05-04 03:04:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/414/dataEnvio'] String "2025-05-04 03:04:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/415/dataEnvio'] String "2025-05-04 03:04:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/416/dataEnvio'] String "2025-05-04 03:04:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/417/dataEnvio'] String "2025-05-04 03:04:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/418/dataEnvio'] String "2025-05-04 03:04:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/419/dataEnvio'] String "2025-05-04 03:04:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/420/dataEnvio'] String "2025-05-04 03:04:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/421/dataEnvio'] String "2025-05-04 03:04:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/422/dataEnvio'] String "2025-05-04 03:04:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/423/dataEnvio'] String "2025-05-04 03:02:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/424/dataEnvio'] String "2025-05-04 03:02:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/425/dataEnvio'] String "2025-05-04 03:02:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/426/dataEnvio'] String "2025-05-04 03:02:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/427/dataEnvio'] String "2025-05-04 03:02:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/428/dataEnvio'] String "2025-05-04 03:00:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/429/dataEnvio'] String "2025-05-04 03:00:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/430/dataEnvio'] String "2025-05-04 03:00:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/431/dataEnvio'] String "2025-05-04 03:00:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/432/dataEnvio'] String "2025-05-04 03:00:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/433/dataEnvio'] String "2025-05-04 03:00:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/434/dataEnvio'] String "2025-05-04 03:00:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/435/dataEnvio'] String "2025-05-04 03:00:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/436/dataEnvio'] String "2025-05-04 03:00:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/437/dataEnvio'] String "2025-05-04 02:59:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/438/dataEnvio'] String "2025-05-04 02:59:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/439/dataEnvio'] String "2025-05-04 02:59:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/440/dataEnvio'] String "2025-05-04 02:59:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/441/dataEnvio'] String "2025-05-04 02:57:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/442/dataEnvio'] String "2025-05-04 02:56:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/443/dataEnvio'] String "2025-05-04 02:56:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/444/dataEnvio'] String "2025-05-04 02:55:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/445/dataEnvio'] String "2025-05-04 02:54:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/446/dataEnvio'] String "2025-05-04 02:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/447/dataEnvio'] String "2025-05-04 02:52:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/448/dataEnvio'] String "2025-05-04 02:52:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/449/dataEnvio'] String "2025-05-04 02:51:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/450/dataEnvio'] String "2025-05-04 02:51:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/451/dataEnvio'] String "2025-05-04 02:50:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/452/dataEnvio'] String "2025-05-04 02:50:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/453/dataEnvio'] String "2025-05-04 02:50:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/454/dataEnvio'] String "2025-05-04 02:50:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/455/dataEnvio'] String "2025-05-04 02:50:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/456/dataEnvio'] String "2025-05-04 02:50:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/457/dataEnvio'] String "2025-05-04 02:48:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/458/dataEnvio'] String "2025-05-04 02:47:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/459/dataEnvio'] String "2025-05-04 02:47:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/460/dataEnvio'] String "2025-05-04 02:47:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/461/dataEnvio'] String "2025-05-04 02:47:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/462/dataEnvio'] String "2025-05-04 02:47:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/463/dataEnvio'] String "2025-05-04 02:47:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/464/dataEnvio'] String "2025-05-04 02:47:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/465/dataEnvio'] String "2025-05-04 02:47:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/466/dataEnvio'] String "2025-05-04 02:46:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/467/dataEnvio'] String "2025-05-04 02:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/468/dataEnvio'] String "2025-05-04 02:46:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/469/dataEnvio'] String "2025-05-04 02:46:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/470/dataEnvio'] String "2025-05-04 02:46:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/471/dataEnvio'] String "2025-05-04 02:46:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/472/dataEnvio'] String "2025-05-04 02:46:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/473/dataEnvio'] String "2025-05-04 02:45:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/474/dataEnvio'] String "2025-05-04 02:45:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/475/dataEnvio'] String "2025-05-04 02:45:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/476/dataEnvio'] String "2025-05-04 02:45:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/477/dataEnvio'] String "2025-05-04 02:45:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/478/dataEnvio'] String "2025-05-04 02:45:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/479/dataEnvio'] String "2025-05-04 02:45:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/480/dataEnvio'] String "2025-05-04 02:45:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/481/dataEnvio'] String "2025-05-04 02:45:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=482",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_0.json()["data"]) == 482
        assert res_0.json()["data"][0]["dataEnvio"] == "2025-05-04 08:24:55"
        assert res_0.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][1]["dataEnvio"] == "2025-05-04 08:22:20"
        assert res_0.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][2]["dataEnvio"] == "2025-05-04 08:22:11"
        assert res_0.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 479 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 3146.0
        assert res_0.json()["pagination"]["count"] == 482.0
        assert res_0.json()["pagination"]["per_page"] == 482.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 7.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=452&" + 
                    "per_page=15",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 3.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 15.0
        assert res_1.json()["pagination"]["current_page"] == 452.0
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] == 451.0
        assert res_1.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"64160795692\", " + \
            " \"dataNascimento\": \"2010-11-16\", " + \
            " \"genero\": 6, " + \
            " \"sexo\": \"3\", " + \
            " \"logradouro\": \"Rua Rua Janaina\", " + \
            " \"bairro\": \"\", " + \
            " \"cep\": \"49915804\", " + \
            " \"municipio\": 3304557, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"j82_A7K1Jhms6e\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 991 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"inep\": 41352610, " + \
            " \"matriculaRede\": \"oG\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2041-10-21\" " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"99999701094\", " + \
            " \"racaCor\": 2, " + \
            " \"telefone\": \"44444444444\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"numero\": \"94\", " + \
            " \"municipio\": 1302603, " + \
            " \"uf\": 31, " + \
            " \"inep\": 29478367, " + \
            " \"dataIngresso\": \"1944-08-11\", " + \
            " \"dataFim\": \"2040-01-08\", " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"43959960352\", " + \
            " \"nome\": \"7nCcq XDiMfCbaJ0cFs\", " + \
            " \"dataNascimento\": \"1968-01-09\", " + \
            " \"racaCor\": 3, " + \
            " \"telefone\": \"11933018135\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 888 " + \
            " ], " + \
            " \"logradouro\": \"Rua Av. Abgail Martines\", " + \
            " \"bairro\": \"São Flores\", " + \
            " \"numero\": \"526\", " + \
            " \"cep\": \"81968585\", " + \
            " \"municipio\": 1501105, " + \
            " \"inep\": 12032115, " + \
            " \"codigoFuncao\": 1 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"16540528175\", " + \
            " \"racaCor\": 4, " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"bairro\": \"São Dominato\", " + \
            " \"uf\": 24, " + \
            " \"dataFim\": \"2064-02-25\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"71900567423\", " + \
            " \"dataNascimento\": \"1U\", " + \
            " \"genero\": 1, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"oIJEU\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"logradouro\": \"Rua Av. Faro\", " + \
            " \"bairro\": \"São Batista\", " + \
            " \"cep\": \"20352801\", " + \
            " \"inep\": 29193656, " + \
            " \"codigoFuncao\": 169, " + \
            " \"dataIngresso\": \"2042-10-21\", " + \
            " \"cargaHoraria\": 44 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 201
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (404) GET:/v1/estudantes/{cpfNis}
    # 3 - (201) POST:/v1/profissionais/lote
    # Found 2 potential faults of type-code 200
    # Using 4 examples:
    #   1
    #   123456789
    #   44
    #   5
    @timeout_decorator.timeout(60)
    def test_70(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"nome\": \"\", " + \
            " \"genero\": 42, " + \
            " \"email\": \"aaron.jonas.azevedo@fake.com\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"logradouro\": \"Rua Rua Guerra\", " + \
            " \"numero\": \"dxC\", " + \
            " \"cep\": \"44101582\", " + \
            " \"uf\": 31, " + \
            " \"inep\": 41064887, " + \
            " \"tipoVinculo\": 1, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"1945-12-17\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/j6oRZPksZAG0vd8",
                    headers=headers)
        
        assert res_1.status_code == 404
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Nenhum estudante encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"racaCor\": 42, " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"bairro\": \"\", " + \
            " \"numero\": \"979\", " + \
            " \"cep\": \"yt0\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 762, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"e2XouiaD2aNA 8\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"telefone\": \"11909420800\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"4\", " + \
            " \"logradouro\": \"01PKhhqGroyvggLAFUEoOHr3Q0KI\", " + \
            " \"bairro\": \"q8DIspl4PtBg\", " + \
            " \"uf\": 31, " + \
            " \"inep\": 41063503, " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"tipoVinculo\": 997, " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"34189851736\", " + \
            " \"dataNascimento\": \"2009-07-17\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"aaron.jorge.azevedo@fake.com\", " + \
            " \"telefone\": \"11909420800\", " + \
            " \"nomeSocial\": \"1RkXWEaRB_L\", " + \
            " \"sexo\": \"2\", " + \
            " \"bairro\": \"14UvdteMhSO626\", " + \
            " \"cep\": \"72503614\", " + \
            " \"inep\": 12033278, " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2037-01-12\", " + \
            " \"dataFim\": \"2015-04-21\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 343, " + \
            " \"genero\": 5, " + \
            " \"telefone\": \"11917982977\", " + \
            " \"numero\": \"1\", " + \
            " \"cep\": \"73675172\", " + \
            " \"uf\": 26, " + \
            " \"inep\": \"tp_ApE\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"dataIngresso\": \"2032-00-15\" " + \
            " }, " + \
            " { " + \
            " \"dataNascimento\": \"2005-03-12\", " + \
            " \"email\": \"aaron.henrique.cruz.sobrinho@fake.com\", " + \
            " \"nomeSocial\": \"pCifpRBMCpY\", " + \
            " \"sexo\": \"4\", " + \
            " \"logradouro\": \"mR\", " + \
            " \"bairro\": \"São Cordeiro\", " + \
            " \"municipio\": 3109253, " + \
            " \"inep\": 342, " + \
            " \"dataIngresso\": \"2052-03-06\", " + \
            " \"dataFim\": \"2061-11-02\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 201
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
    
    
    # Calls:
    # (400) GET:/v1/estudantes/lote/{id}/erros
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_71(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/1273711321822891/erros?page=819",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 1273711321822891"
    
    
    # Calls:
    # (400) GET:/v1/estudantes/lote/{id}/erros
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_72(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/7116453608582555/erros?" + 
                    "page=139&" + 
                    "per_page=740",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 7116453608582555"
    
    
    # Calls:
    # 1 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 2 - (400) GET:/v1/estudantes/lote/{id}
    # Found 2 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_73(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/U/erros?page=468",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: U"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/iFqw4g5Wsj_C4B?" + 
                    "page=218&" + 
                    "per_page=740&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_1.status_code == 400
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "O ID fornecido não é um UUID válido. ID: iFqw4g5Wsj_C4B"
    
    
    # Calls:
    # (401) POST:/v1/profissionais/lote
    # Found 1 potential fault of type-code 200
    # Using 1 example:
    #   44
    @timeout_decorator.timeout(60)
    def test_74(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Response status 401 not defined for path '/v1/profissionais/lote'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"telefone\": \"16982231381\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 800 " + \
            " ], " + \
            " \"sexo\": \"0\", " + \
            " \"bairro\": \"São de Freitas\", " + \
            " \"inep\": 27, " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"cargaHoraria\": 44 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # 1 - (401) GET:/v1/estudantes/{cpfNis}
    # 2 - (401) POST:/v1/estudantes
    # Found 2 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_75(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Response status 401 not defined for path '/v1/estudantes/{cpfNis}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/82329860545",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 401 not defined for path '/v1/estudantes'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"v0qUI_CzLTF\", " + \
            " \"cpf\": \"v9Yn4\", " + \
            " \"dataNascimento\": \"2007-08-10\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"aaron.pedro.chaves@fake.com\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 128, " + \
            " 6, " + \
            " 2 " + \
            " ], " + \
            " \"rg\": \"1316319834491102\", " + \
            " \"orgaoEmissor\": \"SSP-RJ\", " + \
            " \"certidaoNascimento\": \"5Kc7gThHyX\", " + \
            " \"cnh\": \"38455030313\", " + \
            " \"logradouro\": \"Rua Travessa Laiane\", " + \
            " \"bairro\": \"onjNxqU\", " + \
            " \"cep\": \"56302557\", " + \
            " \"uf\": 33, " + \
            " \"instituicao\": 55014, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 401
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não autorizado"


if __name__ == '__main__':
    unittest.main()
