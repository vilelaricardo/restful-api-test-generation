#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2025-05-04T06:08:42.630Z[Etc/UTC]
#  
#  The generated test suite contains 76 tests
#  
#  Covered targets: 815
#  
#  Used time: 0h 42m 28s
#  
#  Needed budget for current results: 96%
#  
#  This file contains test cases that are likely to indicate faults.
class EvoMaster_faults_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:8000"
    
    
    
    
    
    
    
    
    
    
    # Calls:
    # (500) POST:/v1/estudantes/lote
    # Found 2 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_0_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes/lote
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["errors"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "JSON inválido."
    
    
    # Calls:
    # (500) POST:/v1/estudantes
    # Found 2 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_1_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"oyTF3cF\", " + \
            " \"numeroNISResponsavel\": \"U_7F1U80\", " + \
            " \"cpf\": \"amGF\", " + \
            " \"dataNascimento\": \"Qw\", " + \
            " \"racaCor\": 3, " + \
            " \"tipoDeficiencia\": [ " + \
            " 743, " + \
            " 731, " + \
            " 951, " + \
            " 695 " + \
            " ], " + \
            " \"numeroNIS\": \"Jhk\", " + \
            " \"rg\": \"pLmF8Co\", " + \
            " \"orgaoEmissor\": \"MXM\", " + \
            " \"bairro\": \"\", " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"1980-02-19\", " + \
            " \"instituicao\": 543, " + \
            " \"inep\": 280, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 638 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório. (and 2 more errors)"
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (500) GET:/v1/profissionais/lote/{id}
    # Found 1 potential fault of type-code 100
    @timeout_decorator.timeout(60)
    def test_2_with500(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Sr. Marcos da Cunha\", " + \
            " \"nome\": \"Sílvia Conceição\", " + \
            " \"dataNascimento\": \"Tlv\", " + \
            " \"genero\": 5, " + \
            " \"telefone\": \"a2BSSDUl10UA52Lv\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 413, " + \
            " 334 " + \
            " ], " + \
            " \"numeroNIS\": \"57072878394\", " + \
            " \"orgaoEmissor\": \"xvrubyOG03\", " + \
            " \"logradouro\": \"hThZg\", " + \
            " \"numero\": \"869517\", " + \
            " \"municipio\": 426, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"1929-03-31\", " + \
            " \"matriculaRede\": \"K9e5wYDNQQKnoI\", " + \
            " \"inep\": 837, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 331, " + \
            " \"estudanteIntegral\": 1 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"wndIgv2_oqk\", " + \
            " \"numeroNISResponsavel\": \"29884811526\", " + \
            " \"cpf\": \"KLBV\", " + \
            " \"dataNascimento\": \"1980-05-20\", " + \
            " \"genero\": 3, " + \
            " \"email\": \"wzgZkRi\", " + \
            " \"nomeSocial\": \"Antonia Gonçalves\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 363 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"rg\": \"NOt9xxz\", " + \
            " \"cnh\": \"30123255732\", " + \
            " \"logradouro\": \"sOLtVY9xN\", " + \
            " \"numero\": \"485850\", " + \
            " \"municipio\": 286, " + \
            " \"uf\": 687, " + \
            " \"inep\": 134, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 845, " + \
            " \"anoMatricula\": 326 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"26421984720\", " + \
            " \"nomeMaeEstudante\": \"Joaquim Aparício Filho\", " + \
            " \"cpf\": \"57472863661\", " + \
            " \"dataNascimento\": \"1991-01-14\", " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"z5_X\", " + \
            " \"telefone\": \"2X_qSy\", " + \
            " \"sexo\": \"5\", " + \
            " \"numeroNIS\": \"48859874305\", " + \
            " \"rg\": \"LJW9\", " + \
            " \"orgaoEmissor\": \"CMoI\", " + \
            " \"certidaoNascimento\": \"mgNkXbLaK5d\", " + \
            " \"cnh\": \"60141141220\", " + \
            " \"municipio\": 121, " + \
            " \"uf\": 554, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 688, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": -249614471 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/4943a247-5683-4c48-be99-dc257825b3c2?page=389",
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 4943a247-5683-4c48-be99-dc257825b3c2 Nenhum lote correspondente foi encontrado."
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (500) GET:/v1/estudantes/lote/{id}/erros
    # Found 1 potential fault of type-code 100
    # Using 1 example:
    #   2025
    @timeout_decorator.timeout(60)
    def test_3_with500(self):
        
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"85157612117\", " + \
            " \"nomeMaeEstudante\": \"Milena Solimões\", " + \
            " \"cpf\": \"85157612117\", " + \
            " \"nome\": \"Ofélia da Aldeia Filho\", " + \
            " \"dataNascimento\": \"1971-02-10\", " + \
            " \"genero\": 6, " + \
            " \"email\": \"y9\", " + \
            " \"telefone\": \"WM4GLgtvzu\", " + \
            " \"nomeSocial\": \"Sílvia Conceição\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 885, " + \
            " 588, " + \
            " 510 " + \
            " ], " + \
            " \"orgaoEmissor\": \"VJqTcDhA\", " + \
            " \"cnh\": \"26421984720\", " + \
            " \"bairro\": \"jmaXFZAqUP0x\", " + \
            " \"numero\": \"413077\", " + \
            " \"uf\": 1506679145, " + \
            " \"estudantePpl\": 42, " + \
            " \"matriculaRede\": \"HgoGzri2GrC1Ab\", " + \
            " \"instituicao\": 206, " + \
            " \"inep\": 452, " + \
            " \"dataInicioPeriodoLetivo\": \"1970-01-29\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 118, " + \
            " \"anoMatricula\": 2025 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"01506679145\", " + \
            " \"numeroNISResponsavel\": \"02278686729\", " + \
            " \"cpf\": \"73843367671\", " + \
            " \"dataNascimento\": \"1995-03-26\", " + \
            " \"genero\": 42, " + \
            " \"email\": \"Jka\", " + \
            " \"telefone\": \"FBwjdSABKsgto9\", " + \
            " \"nomeSocial\": \"Suélen Ribeiro\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 180, " + \
            " 183, " + \
            " 1520220487, " + \
            " 423 " + \
            " ], " + \
            " \"certidaoNascimento\": \"ZuSRsz6XdDyoJW9_\", " + \
            " \"bairro\": \"O\", " + \
            " \"cep\": \"51057543\", " + \
            " \"dataInicioMatricula\": \"2056-01-19\", " + \
            " \"serieAno\": 222, " + \
            " \"formaOrganizacaoTurma\": 981, " + \
            " \"estudanteAnoPeriodo\": 2 " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"51057543608\", " + \
            " \"genero\": 6, " + \
            " \"email\": \"s\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"2\", " + \
            " \"orgaoEmissor\": \"7KPjZCM3U\", " + \
            " \"cnh\": \"60141141220\", " + \
            " \"logradouro\": \"WGHmYsSGAWai\", " + \
            " \"bairro\": \"3vzX\", " + \
            " \"cep\": \"33353159\", " + \
            " \"municipio\": 69, " + \
            " \"uf\": 641, " + \
            " \"estudantePpl\": 2, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 304, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"anoMatricula\": 443 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"30123255732\", " + \
            " \"numeroNISResponsavel\": \"RNC3Tvj\", " + \
            " \"nomeMaeEstudante\": \"Sr. Marcos da Cunha\", " + \
            " \"genero\": 0, " + \
            " \"telefone\": \"TBG4P_C3HaG04\", " + \
            " \"nomeSocial\": \"Yuri Barbosa\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 945, " + \
            " 213, " + \
            " 550 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"numeroNIS\": \"02278686729\", " + \
            " \"certidaoNascimento\": \"KvvymlBI2ji\", " + \
            " \"cnh\": \"91972685694\", " + \
            " \"logradouro\": \"_wPopvGTiKLT\", " + \
            " \"municipio\": 896, " + \
            " \"estudantePpl\": 1, " + \
            " \"dataInicioMatricula\": \"2014-06-14\", " + \
            " \"serieAno\": 607, " + \
            " \"matriculaRede\": \"FwFh6eq75\", " + \
            " \"inep\": 93, " + \
            " \"dataInicioPeriodoLetivo\": \"1966-00-24\", " + \
            " \"formaOrganizacaoTurma\": 30, " + \
            " \"anoMatricula\": 910 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        location_lote = "/v1/estudantes/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/lote/{id}/erros
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/estudantes/lote/w5wPKuFZ7/erros?page=895&per_page=10")),
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível obter detalhamento do lote."
        assert res_1.json()["errors"]["message"] == "Lote com status de envio"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (500) GET:/v1/profissionais/lote/{id}/erros
    # Found 2 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_4_with500(self):
        
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 470, " + \
            " \"cpf\": \"01506679145\", " + \
            " \"dataNascimento\": \"1974-02-28\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"aaron.afonso.galvao.jr@fake.com\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"bairro\": \"São Alcantara\", " + \
            " \"numero\": \"YZjdl\", " + \
            " \"cep\": \"\", " + \
            " \"uf\": 27, " + \
            " \"matriculaRede\": \"e2XouiaD2aNA 8\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 496, " + \
            " \"dataNascimento\": \"2000-07-27\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 1, " + \
            " \"tipoDeficiencia\": [ " + \
            " 2 " + \
            " ], " + \
            " \"municipio\": 3304557, " + \
            " \"codigoFuncao\": 716, " + \
            " \"dataIngresso\": \"2014-12-22\", " + \
            " \"dataFim\": \"2082-09-00\", " + \
            " \"cargaHoraria\": 302 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        location_lote = "/v1/profissionais/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}/erros
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/profissionais/lote/53669048/erros?per_page=967")),
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível obter detalhamento do lote."
        assert res_1.json()["errors"]["message"] == "Lote com status de envio"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (500) GET:/v1/profissionais/lote/{id}/erros
    # Found 2 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   1
    @timeout_decorator.timeout(60)
    def test_5_with500(self):
        
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 398, " + \
            " \"cpf\": \"60141141220\", " + \
            " \"email\": \"JHugrShqyuvSH\", " + \
            " \"nomeSocial\": \"I22OSM\", " + \
            " \"sexo\": \"0\", " + \
            " \"logradouro\": \"QfuB\", " + \
            " \"numero\": \"7Q\", " + \
            " \"cep\": \"\", " + \
            " \"uf\": 321, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 699, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"j\", " + \
            " \"anoConclusaoFormacaoAcademica\": 262 " + \
            " }, " + \
            " {} " + \
            " ], " + \
            " \"tipoVinculo\": 838, " + \
            " \"codigoFuncao\": 938328634, " + \
            " \"dataIngresso\": \"1956-04-06\", " + \
            " \"cargaHoraria\": 753 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        location_lote = "/v1/profissionais/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}/erros
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/profissionais/lote/V9W67f/erros?page=481")),
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível obter detalhamento do lote."
        assert res_1.json()["errors"]["message"] == "Lote com status de envio"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (500) GET:/v1/profissionais/lote/{id}/erros
    # Found 2 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   1
    @timeout_decorator.timeout(60)
    def test_6_with500(self):
        
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 69, " + \
            " \"nome\": \"Aaron Agostinho Soares Filho\", " + \
            " \"telefone\": \"5haRjZeh5BC\", " + \
            " \"nomeSocial\": \"K4M5REPemK60\", " + \
            " \"cep\": \"63150991\", " + \
            " \"uf\": 24, " + \
            " \"inep\": 12033278, " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 418 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"dataNascimento\": \"bVb\", " + \
            " \"email\": \"eCxsD4zh4i@example.com\", " + \
            " \"nomeSocial\": \"60Kfw\", " + \
            " \"sexo\": \"1\", " + \
            " \"logradouro\": \"prlTxMyYBEVcAo6j\", " + \
            " \"municipio\": 2611606, " + \
            " \"tipoVinculo\": 1, " + \
            " \"dataFim\": \"2056-02-28\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        location_lote = "/v1/profissionais/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}/erros
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/profissionais/lote/4202707096173021/erros?page=120&per_page=10")),
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível obter detalhamento do lote."
        assert res_1.json()["errors"]["message"] == "Lote com status de envio"
    
    
    # Calls:
    # (500) GET:/v1/estudantes
    # Found 1 potential fault of type-code 100
    # Using 1 example:
    #   2024
    @timeout_decorator.timeout(60)
    def test_7_with500(self):
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=497&" + 
                    "per_page=904&" + 
                    "situacao_matricula=ATIVAS&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro inesperado."
        assert res_0.json()["errors"]["message"] == "O campo situacao_final é inválido."
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (500) GET:/v1/profissionais/lote/{id}/erros
    # Found 2 potential faults. Type-codes: 100, 200
    # Using 3 examples:
    #   1
    #   2014
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_8_with500(self):
        
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nome\": \"4e\", " + \
            " \"dataNascimento\": \"1991-01-14\", " + \
            " \"racaCor\": 1, " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 461, " + \
            " 1 " + \
            " ], " + \
            " \"logradouro\": \"hDzQEF8\", " + \
            " \"bairro\": \"São Oliveira\", " + \
            " \"numero\": \"o\", " + \
            " \"municipio\": 3304557, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 434, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\" " + \
            " } " + \
            " ], " + \
            " \"inep\": 29191840, " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2080-12-03\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 286, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"UcCWru5\", " + \
            " \"telefone\": \"u23KDk6h6gCSOuSD\", " + \
            " \"nomeSocial\": \"Sfb2JNEw38xLnHir0\", " + \
            " \"logradouro\": \"yJjQ5scv9D\", " + \
            " \"bairro\": \"São Espinoza\", " + \
            " \"municipio\": 2704302, " + \
            " \"inep\": 32053819, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 324, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\" " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 641, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"tipoVinculo\": 594, " + \
            " \"dataIngresso\": \"2080-13-17\", " + \
            " \"dataFim\": \"2038-01-27\" " + \
            " }, " + \
            " { " + \
            " \"nome\": \"Alan Rodrigues\", " + \
            " \"racaCor\": 1, " + \
            " \"nomeSocial\": \"K4M5REPemK60\", " + \
            " \"sexo\": \"1\", " + \
            " \"logradouro\": \"Rua R. Samanta\", " + \
            " \"bairro\": \"G5tQ1ZJN0\", " + \
            " \"cep\": \"25573863\", " + \
            " \"municipio\": 491, " + \
            " \"uf\": 27, " + \
            " \"inep\": \"29482291\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 1984800928, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"5TE6umKh1JfmA\", " + \
            " \"codigoFuncao\": 462, " + \
            " \"dataIngresso\": \"2013-11-07\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 863, " + \
            " \"nome\": \"Aaron Aaron Rezende\", " + \
            " \"dataNascimento\": \"1995-03-26\", " + \
            " \"telefone\": \"11903903990\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"numero\": \"E\", " + \
            " \"cep\": \"93255945\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"anoConclusaoFormacaoAcademica\": 420 " + \
            " } " + \
            " ], " + \
            " \"inep\": 12033316, " + \
            " \"matriculaRede\": \"pdkxLFRWoC\", " + \
            " \"dataIngresso\": \"1919-02-32\", " + \
            " \"dataFim\": \"2076-02-07\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        location_lote = "/v1/profissionais/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}/erros
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/profissionais/lote/Du/erros?page=21&per_page=10")),
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível obter detalhamento do lote."
        assert res_1.json()["errors"]["message"] == "Lote com status de envio"
    
    
    # Calls:
    # 1 - (400) GET:/v1/profissionais/lote/{id}
    # 2 - (500) GET:/v1/estudantes/inep/{inep}
    # Found 2 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_9_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/ZKAypsO1txo",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: ZKAypsO1txo"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/inep/{inep}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/12005037?" + 
                    "page=38&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível obter os estudantes."
        assert res_1.json()["errors"]["message"] == "O campo ano_matricula é obrigatório quando o campo situacao_final é informado."
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (500) GET:/v1/estudantes
    # Found 5 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   2025
    @timeout_decorator.timeout(60)
    def test_10_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"52008260631\", " + \
            " \"email\": \"AFTER-TWO@AFTER-TWO.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 661, " + \
            " 461, " + \
            " 3 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"rg\": \"5779726455607912\", " + \
            " \"certidaoNascimento\": \"49091143927815557323807480759279\", " + \
            " \"cnh\": \"3333333\", " + \
            " \"logradouro\": \"Rua Avenida Emília Bittencourt\", " + \
            " \"bairro\": \"\", " + \
            " \"numero\": \"123\", " + \
            " \"cep\": \"37070132\", " + \
            " \"matriculaRede\": \"7\", " + \
            " \"formaOrganizacaoTurma\": 212, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"Sra. Mia Santos Filho\", " + \
            " \"cpf\": \"60459717103\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 5, " + \
            " \"telefone\": \"11969630845\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 2, " + \
            " 3 " + \
            " ], " + \
            " \"orgaoEmissor\": \"SSP\", " + \
            " \"certidaoNascimento\": \"80766554428713205431346610401411\", " + \
            " \"cnh\": \"3333333\", " + \
            " \"logradouro\": \"Rua Travessa Lovato\", " + \
            " \"cep\": \"88278021\", " + \
            " \"uf\": 13, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"2026-02-32\", " + \
            " \"serieAno\": 120, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"anoMatricula\": 2025 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nome é obrigatório. (and 1 more error)"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "situacao_matricula=ATIVAS&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro inesperado."
        assert res_2.json()["errors"]["message"] == "O campo ano_matricula é obrigatório quando o campo situacao_final é informado."
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (500) POST:/v1/estudantes
    # 4 - (500) GET:/v1/estudantes
    # Found 7 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_11_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"genero\": 7, " + \
            " \"email\": \"VehAEbrkbm1l\", " + \
            " \"telefone\": \"3333333\", " + \
            " \"nomeSocial\": \"nfppbN8zMjdV\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 855 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"orgaoEmissor\": \"y6C\", " + \
            " \"bairro\": \"São Estrada\", " + \
            " \"cep\": \"60149506\", " + \
            " \"municipio\": 2704302, " + \
            " \"estudantePpl\": 1, " + \
            " \"serieAno\": 15, " + \
            " \"instituicao\": 8361 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"z\", " + \
            " \"cpf\": \"87207460759\", " + \
            " \"genero\": 7, " + \
            " \"telefone\": \"hMAXEk5YbLoz8b\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"2\", " + \
            " \"certidaoNascimento\": \"50828227591666644181705205110821\", " + \
            " \"cnh\": \"01354673004\", " + \
            " \"logradouro\": \"rWjgYPU1P8\", " + \
            " \"bairro\": \"\", " + \
            " \"estudantePpl\": 2, " + \
            " \"dataInicioMatricula\": \"2091-06-17\", " + \
            " \"instituicao\": 6, " + \
            " \"inep\": 12033278, " + \
            " \"dataInicioPeriodoLetivo\": \"2069-10-08\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"AI03K88Py\", " + \
            " \"numeroNISResponsavel\": \"42415568710\", " + \
            " \"cpf\": \"stJHH6A\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 0, " + \
            " \"email\": \"terminei@de.testar\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 10, " + \
            " 9, " + \
            " 767, " + \
            " 5, " + \
            " 233 " + \
            " ], " + \
            " \"numeroNIS\": \"23237617829\", " + \
            " \"rg\": \"1694695459984332\", " + \
            " \"orgaoEmissor\": \"BkUoCGI4\", " + \
            " \"certidaoNascimento\": \"41463844385316817215434443111491\", " + \
            " \"cnh\": \"3333333\", " + \
            " \"logradouro\": \"Rua Largo Aaron\", " + \
            " \"numero\": \"7\", " + \
            " \"dataInicioMatricula\": \"1975-12-14\", " + \
            " \"serieAno\": 26, " + \
            " \"matriculaRede\": \"XAAc13c\", " + \
            " \"instituicao\": 185730, " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 669, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 42 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=81&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "ano_matricula=637",
                    headers=headers)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro."
        assert res_3.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (500) POST:/v1/estudantes
    # 4 - (500) POST:/v1/estudantes
    # 5 - (500) POST:/v1/estudantes
    # 6 - (500) POST:/v1/estudantes
    # 7 - (500) GET:/v1/estudantes
    # Found 13 potential faults. Type-codes: 100, 200
    # Using 3 examples:
    #   2024
    #   2025
    #   25
    @timeout_decorator.timeout(60)
    def test_12_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"59231438603\", " + \
            " \"numeroNISResponsavel\": \"88396499957\", " + \
            " \"dataNascimento\": \"2001-02-02\", " + \
            " \"genero\": 7, " + \
            " \"sexo\": \"5\", " + \
            " \"rg\": \"3858201516232197\", " + \
            " \"cnh\": \"01354673004\", " + \
            " \"bairro\": \"São Fonseca\", " + \
            " \"numero\": \"\", " + \
            " \"cep\": \"57018780\", " + \
            " \"municipio\": 1100940, " + \
            " \"estudantePpl\": 42, " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"inep\": 29481643, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"52008260631\", " + \
            " \"numeroNISResponsavel\": \"95229634989\", " + \
            " \"nomeMaeEstudante\": \"q5g6id4TRiWYl3YGHHw9\", " + \
            " \"nome\": \"Aaron Adriano Reis\", " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"AFTER-TWO@AFTER-TWO.com\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"numeroNIS\": \"80914269107\", " + \
            " \"orgaoEmissor\": \"i4tf\", " + \
            " \"certidaoNascimento\": \"3679215604607\", " + \
            " \"logradouro\": \"Rua teste\", " + \
            " \"bairro\": \"\", " + \
            " \"municipio\": 883, " + \
            " \"uf\": 11, " + \
            " \"estudantePpl\": 42, " + \
            " \"serieAno\": 343, " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"dataInicioPeriodoLetivo\": \"1986-00-26\", " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo dataNascimento é obrigatório. (and 1 more error)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpf\": \"f\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 3, " + \
            " 3 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"34442480673\", " + \
            " \"rg\": \"21577661\", " + \
            " \"orgaoEmissor\": \"frCZ\", " + \
            " \"certidaoNascimento\": \"Xo4SZt\", " + \
            " \"numero\": \"02\", " + \
            " \"uf\": 42, " + \
            " \"estudantePpl\": 42, " + \
            " \"serieAno\": 25, " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"instituicao\": 185680, " + \
            " \"inep\": 29481643, " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 313, " + \
            " \"estudanteIntegral\": 1, " + \
            " \"anoMatricula\": 603 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"4qOG0XpCluHF3F5\", " + \
            " \"cpf\": \"Q_9d\", " + \
            " \"nome\": \"Cvy\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"AFTER-TWO@AFTER-TWO.com\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"numeroNIS\": \"55646097716\", " + \
            " \"rg\": \"IbFFfS6rVWEkSD\", " + \
            " \"logradouro\": \"Rua Avenida Emília Bittencourt\", " + \
            " \"bairro\": \"São Fonseca\", " + \
            " \"cep\": \"45527537\", " + \
            " \"uf\": 11, " + \
            " \"dataInicioMatricula\": \"1996-12-32\", " + \
            " \"serieAno\": 25, " + \
            " \"dataInicioPeriodoLetivo\": \"2007-01-14\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 2 " + \
            " } "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro."
        assert res_3.json()["errors"]["message"] == "O campo dataNascimento é obrigatório. (and 1 more error)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"\", " + \
            " \"dataNascimento\": \"2010-08-22\", " + \
            " \"genero\": 8, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"AFTER-TWO@AFTER-TWO.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 599, " + \
            " 483, " + \
            " 2, " + \
            " 1, " + \
            " 1 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"rg\": \"3246839593356301\", " + \
            " \"certidaoNascimento\": \"33333333\", " + \
            " \"numero\": \"78990\", " + \
            " \"cep\": \"JHn\", " + \
            " \"municipio\": 570, " + \
            " \"uf\": 13, " + \
            " \"dataInicioMatricula\": \"2081-10-25\", " + \
            " \"inep\": 33225605, " + \
            " \"dataInicioPeriodoLetivo\": \"2041-13-19\", " + \
            " \"formaOrganizacaoTurma\": 693, " + \
            " \"estudanteAnoPeriodo\": 3, " + \
            " \"anoMatricula\": 2025 " + \
            " } "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_4.status_code == 500
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Ocorreu um erro."
        assert res_4.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"97357749177\", " + \
            " \"cpf\": \"fZ4F\", " + \
            " \"nome\": \"Fabiano Grotas Filho\", " + \
            " \"dataNascimento\": \"MU1FhSe0g0\", " + \
            " \"racaCor\": 4, " + \
            " \"telefone\": \"11969630845\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 720 " + \
            " ], " + \
            " \"orgaoEmissor\": \"SSP\", " + \
            " \"cnh\": \"56267273661\", " + \
            " \"logradouro\": \"Rua Largo Luciano Molina\", " + \
            " \"bairro\": \"São Barreto\", " + \
            " \"numero\": \"41\", " + \
            " \"municipio\": 1302603, " + \
            " \"uf\": 33, " + \
            " \"serieAno\": 25, " + \
            " \"inep\": 29182034, " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteAnoPeriodo\": 42 " + \
            " } "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Ocorreu um erro."
        assert res_5.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=1&" + 
                    "per_page=15&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_6.status_code == 500
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Ocorreu um erro."
        assert res_6.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (500) POST:/v1/estudantes
    # 4 - (500) POST:/v1/estudantes
    # 5 - (200) GET:/v1/estudantes
    # Found 9 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_13_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"Srta. Bruna Galvão Jr.\", " + \
            " \"cpf\": \"74280749914\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"aaron.benjamin.avila@fake.com\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"numeroNIS\": \"21656315566\", " + \
            " \"cep\": \"93567408\", " + \
            " \"uf\": 24, " + \
            " \"matriculaRede\": \"AhMTo\", " + \
            " \"instituicao\": 101002, " + \
            " \"dataInicioPeriodoLetivo\": \"1960-02-16\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 2, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 42 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nome é obrigatório. (and 1 more error)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"55236802302\", " + \
            " \"cpf\": \"12161330500\", " + \
            " \"telefone\": \"11988260647\", " + \
            " \"nomeSocial\": \"crclt7i\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 3, " + \
            " 10 " + \
            " ], " + \
            " \"numero\": \"9174\", " + \
            " \"cep\": \"99634541\", " + \
            " \"uf\": 338, " + \
            " \"estudantePpl\": 2, " + \
            " \"dataInicioMatricula\": \"2045-05-26\", " + \
            " \"instituicao\": 199580, " + \
            " \"formaOrganizacaoTurma\": 4, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 3 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"Srta. Ayla Ortiz Uchoa\", " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"aaron.barreto.medina.neto@fake.com\", " + \
            " \"nomeSocial\": \"vYHSe9eaiB\", " + \
            " \"certidaoNascimento\": \"99599932149779333946909489193276\", " + \
            " \"cnh\": \"66973837108\", " + \
            " \"bairro\": \"São Beltrão\", " + \
            " \"cep\": \"69314136\", " + \
            " \"municipio\": 846, " + \
            " \"dataInicioMatricula\": \"1919-06-19\", " + \
            " \"matriculaRede\": \"jfklz\", " + \
            " \"instituicao\": 740, " + \
            " \"inep\": 29482950, " + \
            " \"formaOrganizacaoTurma\": 2, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 1, " + \
            " \"estudanteIntegral\": 42 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"Srta. Amanda Toledo Bezerra\", " + \
            " \"dataNascimento\": \"eb9XxkN80u2\", " + \
            " \"genero\": 3, " + \
            " \"racaCor\": 0, " + \
            " \"email\": \"andre.batista.jr@fake.com\", " + \
            " \"telefone\": \"66He5\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"numeroNIS\": \"99816655692\", " + \
            " \"certidaoNascimento\": \"32059946964320192315316999338270\", " + \
            " \"cnh\": \"84566125764\", " + \
            " \"logradouro\": \"Rua Largo César Camacho\", " + \
            " \"bairro\": \"São Soares\", " + \
            " \"numero\": \"90\", " + \
            " \"municipio\": 1100940, " + \
            " \"uf\": 62, " + \
            " \"serieAno\": 73, " + \
            " \"matriculaRede\": \"teste2\", " + \
            " \"instituicao\": 94363, " + \
            " \"inep\": 33230811, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 0 " + \
            " } "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro."
        assert res_3.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?per_page=222",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_4.json()["data"]) == 222
        assert res_4.json()["data"][0]["cpf"] == "49255179888"
        assert res_4.json()["data"][0]["nome"] == "111"
        assert res_4.json()["data"][0]["nomeSocial"] == "test"
        assert res_4.json()["data"][0]["numeroNIS"] is None
        assert res_4.json()["data"][0]["rg"] == "22307981"
        assert res_4.json()["data"][0]["orgaoEmissor"] == "SSP"
        assert res_4.json()["data"][0]["cpfResponsavel"] == "48405399283"
        assert res_4.json()["data"][0]["nomeMaeEstudante"] == "Valentina Rezende"
        assert res_4.json()["data"][0]["numeroNISResponsavel"] == "64668522654"
        assert res_4.json()["data"][0]["dataNascimento"] == "2024-12-28"
        assert res_4.json()["data"][0]["logradouro"] == "Rua teste"
        assert res_4.json()["data"][0]["bairro"] == "Santa Lucia"
        assert res_4.json()["data"][0]["numero"] == "220"
        assert res_4.json()["data"][0]["cep"] == "57018780"
        assert res_4.json()["data"][0]["municipio"] == 1100940.0
        assert res_4.json()["data"][0]["certidaoNascimento"] == "33333333"
        assert res_4.json()["data"][0]["cnh"] == "3333333"
        assert res_4.json()["data"][0]["uf"] == 11.0
        assert res_4.json()["data"][0]["racaCor"] == 3.0
        assert len(res_4.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_4.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_4.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_4.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert res_4.json()["data"][0]["genero"] == 3.0
        assert res_4.json()["data"][0]["telefone"] == "3333333"
        assert res_4.json()["data"][0]["email"] == "AFTER-TWO@AFTER-TWO.com"
        assert res_4.json()["data"][0]["situacaoCadastroValidado"] == 3.0
        assert len(res_4.json()["data"][0]["matriculas"]) == 1
        assert res_4.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 1733024.0
        assert res_4.json()["data"][0]["matriculas"][0]["codInstituicao"] == 7259.0
        assert res_4.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-09-28"
        assert res_4.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_4.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == True
        assert res_4.json()["data"][0]["matriculas"][0]["serieAno"] == 74.0
        assert res_4.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Formação inicial continuada ou qualificação profissional (FIC)"
        assert res_4.json()["data"][0]["matriculas"][0]["matriculaRede"] == "Teste Ricardo"
        assert res_4.json()["data"][0]["matriculas"][0]["deletadaEm"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["inep"] == "12005037"
        assert res_4.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-09-28"
        assert res_4.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_4.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 0.0
        assert res_4.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_4.json()["data"][0]["matriculas"][0]["estudanteIntegral"] == True
        assert res_4.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] == "2024-09-27 00:00:00"
        assert res_4.json()["data"][0]["matriculas"][0]["anoMatricula"] == 2024.0
        assert len(res_4.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_4.json()["data"][1]["cpf"] == "67089268578"
        assert res_4.json()["data"][1]["nome"] == "6cc97vMeCP9KgSI"
        assert res_4.json()["data"][1]["nomeSocial"] == "rRAEEBPUPdYf"
        assert res_4.json()["data"][1]["numeroNIS"] == "30183310316"
        assert res_4.json()["data"][1]["rg"] == "53669048"
        assert res_4.json()["data"][1]["orgaoEmissor"] == "i4tf"
        assert res_4.json()["data"][1]["cpfResponsavel"] == "52008260631"
        assert res_4.json()["data"][1]["nomeMaeEstudante"] == "7aTq92Zi"
        assert res_4.json()["data"][1]["numeroNISResponsavel"] == "11273745692"
        assert res_4.json()["data"][1]["dataNascimento"] == "2008-10-29"
        assert res_4.json()["data"][1]["logradouro"] == "rWjgYPU1P8"
        assert res_4.json()["data"][1]["bairro"] == "G5tQ1ZJN0"
        assert res_4.json()["data"][1]["numero"] == "55"
        assert res_4.json()["data"][1]["cep"] == "19141821"
        assert res_4.json()["data"][1]["municipio"] == 4200705.0
        assert res_4.json()["data"][1]["certidaoNascimento"] == "373271505447"
        assert res_4.json()["data"][1]["cnh"] == "56267273661"
        assert res_4.json()["data"][1]["uf"] == 42.0
        assert res_4.json()["data"][1]["racaCor"] == 0.0
        assert len(res_4.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_4.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_4.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_4.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert res_4.json()["data"][1]["genero"] == 4.0
        assert res_4.json()["data"][1]["telefone"] == "11969630845"
        assert res_4.json()["data"][1]["email"] == "RTT0VngF3Deo0O@example.com"
        assert res_4.json()["data"][1]["situacaoCadastroValidado"] == 4.0
        assert len(res_4.json()["data"][1]["matriculas"]) == 1
        assert res_4.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 1.020298E7
        assert res_4.json()["data"][1]["matriculas"][0]["codInstituicao"] == 81776.0
        assert res_4.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-02-19"
        assert res_4.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_4.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == True
        assert res_4.json()["data"][1]["matriculas"][0]["serieAno"] == 71.0
        assert res_4.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_4.json()["data"][1]["matriculas"][0]["matriculaRede"] == "jvjvjv1"
        assert res_4.json()["data"][1]["matriculas"][0]["deletadaEm"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["inep"] == "26540720"
        assert res_4.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-01-29"
        assert res_4.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_4.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 3.0
        assert res_4.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] == 3.0
        assert res_4.json()["data"][1]["matriculas"][0]["estudanteIntegral"] == True
        assert res_4.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["anoMatricula"] == 2024.0
        assert len(res_4.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_4.json()["data"][2]["cpf"] == "81601036620"
        assert res_4.json()["data"][2]["nome"] == "7nCcq XDiMfCbaJ0cFs"
        assert res_4.json()["data"][2]["nomeSocial"] == "YXWGpw"
        assert res_4.json()["data"][2]["numeroNIS"] == "34442480673"
        assert res_4.json()["data"][2]["rg"] == "21577661"
        assert res_4.json()["data"][2]["orgaoEmissor"] == "vC2a0H9Lv4"
        assert res_4.json()["data"][2]["cpfResponsavel"] == "85307915250"
        assert res_4.json()["data"][2]["nomeMaeEstudante"] == "uoUPQKkc8iCGVq2wAS1"
        assert res_4.json()["data"][2]["numeroNISResponsavel"] == "27296692788"
        assert res_4.json()["data"][2]["dataNascimento"] == "1998-08-08"
        assert res_4.json()["data"][2]["logradouro"] == "01PKhhqGroyvggLAFUEoOHr3Q0KI"
        assert res_4.json()["data"][2]["bairro"] == "nL4bOxhpEiU2PjnP"
        assert res_4.json()["data"][2]["numero"] == "02"
        assert res_4.json()["data"][2]["cep"] == "76984525"
        assert res_4.json()["data"][2]["municipio"] == 4200705.0
        assert res_4.json()["data"][2]["certidaoNascimento"] == "3679215604607"
        assert res_4.json()["data"][2]["cnh"] == "02342004738"
        assert res_4.json()["data"][2]["uf"] == 42.0
        assert res_4.json()["data"][2]["racaCor"] == 2.0
        assert len(res_4.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_4.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_4.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_4.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert res_4.json()["data"][2]["genero"] == 3.0
        assert res_4.json()["data"][2]["telefone"] == "11949911257"
        assert res_4.json()["data"][2]["email"] == "4mphnZDvXrC@example.com"
        assert res_4.json()["data"][2]["situacaoCadastroValidado"] == 4.0
        assert len(res_4.json()["data"][2]["matriculas"]) == 1
        assert res_4.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 1.0202989E7
        assert res_4.json()["data"][2]["matriculas"][0]["codInstituicao"] == 81776.0
        assert res_4.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "2024-11-01"
        assert res_4.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_4.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == True
        assert res_4.json()["data"][2]["matriculas"][0]["serieAno"] == 58.0
        assert res_4.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_4.json()["data"][2]["matriculas"][0]["matriculaRede"] == "e2XouiaD2aNA 8"
        assert res_4.json()["data"][2]["matriculas"][0]["deletadaEm"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["inep"] == "26540720"
        assert res_4.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-10-22"
        assert res_4.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] == 6.0
        assert res_4.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 4.0
        assert res_4.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["estudanteIntegral"] == False
        assert res_4.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_4.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 219 elements. This limit of 3 elements can be increased in the configurations
        assert res_4.json()["pagination"]["total"] == 598780.0
        assert res_4.json()["pagination"]["count"] == 222.0
        assert res_4.json()["pagination"]["per_page"] == 222.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 2698.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (500) POST:/v1/estudantes
    # 4 - (500) POST:/v1/estudantes
    # 5 - (500) POST:/v1/estudantes
    # 6 - (500) POST:/v1/estudantes
    # 7 - (200) GET:/v1/estudantes
    # Found 13 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   2025
    @timeout_decorator.timeout(60)
    def test_14_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"59647637071\", " + \
            " \"numeroNISResponsavel\": \"10643274356\", " + \
            " \"nomeMaeEstudante\": \"Kamila Rios Neto\", " + \
            " \"nome\": \"Antonia Gonçalves\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"aaron.kevin.da.silva@fake.com\", " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"21230531329\", " + \
            " \"rg\": \"9434085160630916\", " + \
            " \"certidaoNascimento\": \"66109443507122216832358962413397\", " + \
            " \"logradouro\": \"\", " + \
            " \"bairro\": \"São Arruda\", " + \
            " \"numero\": \"VfH\", " + \
            " \"municipio\": 3106200, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"2034-06-24\", " + \
            " \"serieAno\": 26, " + \
            " \"matriculaRede\": \"56789\", " + \
            " \"instituicao\": 135379, " + \
            " \"inep\": 29482291, " + \
            " \"dataInicioPeriodoLetivo\": \"2064-12-23\", " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"anoMatricula\": 637 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo dataNascimento é obrigatório. (and 1 more error)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"Mia Camacho\", " + \
            " \"cpf\": \"00462603318\", " + \
            " \"dataNascimento\": \"2005-05-06\", " + \
            " \"racaCor\": 0, " + \
            " \"telefone\": \"11901377051\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"5\", " + \
            " \"orgaoEmissor\": \"SSP-AL\", " + \
            " \"certidaoNascimento\": \"05480540666936434\", " + \
            " \"bairro\": \"BAx2_p_i65pH\", " + \
            " \"numero\": \"1482\", " + \
            " \"cep\": \"HC96\", " + \
            " \"municipio\": 3106200, " + \
            " \"uf\": 43, " + \
            " \"formaOrganizacaoTurma\": 963, " + \
            " \"estudanteAnoPeriodo\": 42 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nome é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"41539462064\", " + \
            " \"nomeMaeEstudante\": \"nMtDa0unZw2\", " + \
            " \"dataNascimento\": \"2007-12-01\", " + \
            " \"genero\": 2, " + \
            " \"email\": \"aaron.abreu.davila@fake.com\", " + \
            " \"telefone\": \"Bgv\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 795, " + \
            " 10 " + \
            " ], " + \
            " \"bairro\": \"São Arruda\", " + \
            " \"cep\": \"37042434\", " + \
            " \"uf\": 26, " + \
            " \"estudantePpl\": 42, " + \
            " \"inep\": 29482291, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2025 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo nome é obrigatório. (and 1 more error)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"44111475173\", " + \
            " \"cpf\": \"YeNvj19\", " + \
            " \"email\": \"\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"numeroNIS\": \"40576659635\", " + \
            " \"orgaoEmissor\": \"nW29o\", " + \
            " \"certidaoNascimento\": \"55321604245337510754278648232198\", " + \
            " \"dataInicioMatricula\": \"2025-00-27\", " + \
            " \"serieAno\": 9, " + \
            " \"instituicao\": 188082, " + \
            " \"inep\": 29481643, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 977, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 2025 " + \
            " } "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro."
        assert res_3.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"56701383254\", " + \
            " \"cpf\": \"60459717103\", " + \
            " \"nome\": \"8YqMGG4HduxmkR\", " + \
            " \"telefone\": \"j3_Qw7\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 182, " + \
            " 9 " + \
            " ], " + \
            " \"numeroNIS\": \"87323936984\", " + \
            " \"logradouro\": \"Rua Avenida Tábata\", " + \
            " \"cep\": \"mGMylSGu\", " + \
            " \"municipio\": 4314902, " + \
            " \"uf\": 612, " + \
            " \"serieAno\": 74, " + \
            " \"formaOrganizacaoTurma\": 5, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 834 " + \
            " } "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_4.status_code == 500
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Ocorreu um erro."
        assert res_4.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"41539462064\", " + \
            " \"numeroNISResponsavel\": \"09620817147\", " + \
            " \"nomeMaeEstudante\": \"Luiz Felipe Negrão\", " + \
            " \"cpf\": \"31863200037\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"aaron.kauan.marinho.jr@fake.com\", " + \
            " \"telefone\": \"11903903990\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 450, " + \
            " 1, " + \
            " 9, " + \
            " 9 " + \
            " ], " + \
            " \"numeroNIS\": \"\", " + \
            " \"rg\": \"0431088888158908\", " + \
            " \"certidaoNascimento\": \"97209159941680121275852495089394\", " + \
            " \"logradouro\": \"Rua Largo Ávila\", " + \
            " \"municipio\": 3550308, " + \
            " \"estudantePpl\": 0, " + \
            " \"matriculaRede\": \"atualizacao5\", " + \
            " \"instituicao\": 105789, " + \
            " \"dataInicioPeriodoLetivo\": \"1907-05-04\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 1, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 971 " + \
            " } "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Ocorreu um erro."
        assert res_5.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?per_page=10",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_6.json()["data"]) == 10
        assert res_6.json()["data"][0]["cpf"] == "49255179888"
        assert res_6.json()["data"][0]["nome"] == "111"
        assert res_6.json()["data"][0]["nomeSocial"] == "test"
        assert res_6.json()["data"][0]["numeroNIS"] is None
        assert res_6.json()["data"][0]["rg"] == "22307981"
        assert res_6.json()["data"][0]["orgaoEmissor"] == "SSP"
        assert res_6.json()["data"][0]["cpfResponsavel"] == "48405399283"
        assert res_6.json()["data"][0]["nomeMaeEstudante"] == "Valentina Rezende"
        assert res_6.json()["data"][0]["numeroNISResponsavel"] == "64668522654"
        assert res_6.json()["data"][0]["dataNascimento"] == "2024-12-28"
        assert res_6.json()["data"][0]["logradouro"] == "Rua teste"
        assert res_6.json()["data"][0]["bairro"] == "Santa Lucia"
        assert res_6.json()["data"][0]["numero"] == "220"
        assert res_6.json()["data"][0]["cep"] == "57018780"
        assert res_6.json()["data"][0]["municipio"] == 1100940.0
        assert res_6.json()["data"][0]["certidaoNascimento"] == "33333333"
        assert res_6.json()["data"][0]["cnh"] == "3333333"
        assert res_6.json()["data"][0]["uf"] == 11.0
        assert res_6.json()["data"][0]["racaCor"] == 3.0
        assert len(res_6.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_6.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_6.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert res_6.json()["data"][0]["genero"] == 3.0
        assert res_6.json()["data"][0]["telefone"] == "3333333"
        assert res_6.json()["data"][0]["email"] == "AFTER-TWO@AFTER-TWO.com"
        assert res_6.json()["data"][0]["situacaoCadastroValidado"] == 3.0
        assert len(res_6.json()["data"][0]["matriculas"]) == 1
        assert res_6.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 1733024.0
        assert res_6.json()["data"][0]["matriculas"][0]["codInstituicao"] == 7259.0
        assert res_6.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-09-28"
        assert res_6.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_6.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_6.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == True
        assert res_6.json()["data"][0]["matriculas"][0]["serieAno"] == 74.0
        assert res_6.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Formação inicial continuada ou qualificação profissional (FIC)"
        assert res_6.json()["data"][0]["matriculas"][0]["matriculaRede"] == "Teste Ricardo"
        assert res_6.json()["data"][0]["matriculas"][0]["deletadaEm"] is None
        assert res_6.json()["data"][0]["matriculas"][0]["inep"] == "12005037"
        assert res_6.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_6.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_6.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-09-28"
        assert res_6.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_6.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 0.0
        assert res_6.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_6.json()["data"][0]["matriculas"][0]["estudanteIntegral"] == True
        assert res_6.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] == "2024-09-27 00:00:00"
        assert res_6.json()["data"][0]["matriculas"][0]["anoMatricula"] == 2024.0
        assert len(res_6.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_6.json()["data"][1]["cpf"] == "67089268578"
        assert res_6.json()["data"][1]["nome"] == "6cc97vMeCP9KgSI"
        assert res_6.json()["data"][1]["nomeSocial"] == "rRAEEBPUPdYf"
        assert res_6.json()["data"][1]["numeroNIS"] == "30183310316"
        assert res_6.json()["data"][1]["rg"] == "53669048"
        assert res_6.json()["data"][1]["orgaoEmissor"] == "i4tf"
        assert res_6.json()["data"][1]["cpfResponsavel"] == "52008260631"
        assert res_6.json()["data"][1]["nomeMaeEstudante"] == "7aTq92Zi"
        assert res_6.json()["data"][1]["numeroNISResponsavel"] == "11273745692"
        assert res_6.json()["data"][1]["dataNascimento"] == "2008-10-29"
        assert res_6.json()["data"][1]["logradouro"] == "rWjgYPU1P8"
        assert res_6.json()["data"][1]["bairro"] == "G5tQ1ZJN0"
        assert res_6.json()["data"][1]["numero"] == "55"
        assert res_6.json()["data"][1]["cep"] == "19141821"
        assert res_6.json()["data"][1]["municipio"] == 4200705.0
        assert res_6.json()["data"][1]["certidaoNascimento"] == "373271505447"
        assert res_6.json()["data"][1]["cnh"] == "56267273661"
        assert res_6.json()["data"][1]["uf"] == 42.0
        assert res_6.json()["data"][1]["racaCor"] == 0.0
        assert len(res_6.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_6.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_6.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert res_6.json()["data"][1]["genero"] == 4.0
        assert res_6.json()["data"][1]["telefone"] == "11969630845"
        assert res_6.json()["data"][1]["email"] == "RTT0VngF3Deo0O@example.com"
        assert res_6.json()["data"][1]["situacaoCadastroValidado"] == 4.0
        assert len(res_6.json()["data"][1]["matriculas"]) == 1
        assert res_6.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 1.020298E7
        assert res_6.json()["data"][1]["matriculas"][0]["codInstituicao"] == 81776.0
        assert res_6.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-02-19"
        assert res_6.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_6.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_6.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == True
        assert res_6.json()["data"][1]["matriculas"][0]["serieAno"] == 71.0
        assert res_6.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_6.json()["data"][1]["matriculas"][0]["matriculaRede"] == "jvjvjv1"
        assert res_6.json()["data"][1]["matriculas"][0]["deletadaEm"] is None
        assert res_6.json()["data"][1]["matriculas"][0]["inep"] == "26540720"
        assert res_6.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_6.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_6.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-01-29"
        assert res_6.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_6.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 3.0
        assert res_6.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] == 3.0
        assert res_6.json()["data"][1]["matriculas"][0]["estudanteIntegral"] == True
        assert res_6.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_6.json()["data"][1]["matriculas"][0]["anoMatricula"] == 2024.0
        assert len(res_6.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_6.json()["data"][2]["cpf"] == "81601036620"
        assert res_6.json()["data"][2]["nome"] == "7nCcq XDiMfCbaJ0cFs"
        assert res_6.json()["data"][2]["nomeSocial"] == "YXWGpw"
        assert res_6.json()["data"][2]["numeroNIS"] == "34442480673"
        assert res_6.json()["data"][2]["rg"] == "21577661"
        assert res_6.json()["data"][2]["orgaoEmissor"] == "vC2a0H9Lv4"
        assert res_6.json()["data"][2]["cpfResponsavel"] == "85307915250"
        assert res_6.json()["data"][2]["nomeMaeEstudante"] == "uoUPQKkc8iCGVq2wAS1"
        assert res_6.json()["data"][2]["numeroNISResponsavel"] == "27296692788"
        assert res_6.json()["data"][2]["dataNascimento"] == "1998-08-08"
        assert res_6.json()["data"][2]["logradouro"] == "01PKhhqGroyvggLAFUEoOHr3Q0KI"
        assert res_6.json()["data"][2]["bairro"] == "nL4bOxhpEiU2PjnP"
        assert res_6.json()["data"][2]["numero"] == "02"
        assert res_6.json()["data"][2]["cep"] == "76984525"
        assert res_6.json()["data"][2]["municipio"] == 4200705.0
        assert res_6.json()["data"][2]["certidaoNascimento"] == "3679215604607"
        assert res_6.json()["data"][2]["cnh"] == "02342004738"
        assert res_6.json()["data"][2]["uf"] == 42.0
        assert res_6.json()["data"][2]["racaCor"] == 2.0
        assert len(res_6.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_6.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_6.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert res_6.json()["data"][2]["genero"] == 3.0
        assert res_6.json()["data"][2]["telefone"] == "11949911257"
        assert res_6.json()["data"][2]["email"] == "4mphnZDvXrC@example.com"
        assert res_6.json()["data"][2]["situacaoCadastroValidado"] == 4.0
        assert len(res_6.json()["data"][2]["matriculas"]) == 1
        assert res_6.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 1.0202989E7
        assert res_6.json()["data"][2]["matriculas"][0]["codInstituicao"] == 81776.0
        assert res_6.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "2024-11-01"
        assert res_6.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_6.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_6.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == True
        assert res_6.json()["data"][2]["matriculas"][0]["serieAno"] == 58.0
        assert res_6.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_6.json()["data"][2]["matriculas"][0]["matriculaRede"] == "e2XouiaD2aNA 8"
        assert res_6.json()["data"][2]["matriculas"][0]["deletadaEm"] is None
        assert res_6.json()["data"][2]["matriculas"][0]["inep"] == "26540720"
        assert res_6.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_6.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_6.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-10-22"
        assert res_6.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] == 6.0
        assert res_6.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 4.0
        assert res_6.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_6.json()["data"][2]["matriculas"][0]["estudanteIntegral"] == False
        assert res_6.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_6.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_6.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_6.json()["pagination"]["total"] == 598780.0
        assert res_6.json()["pagination"]["count"] == 10.0
        assert res_6.json()["pagination"]["per_page"] == 10.0
        assert res_6.json()["pagination"]["current_page"] == 1.0
        assert res_6.json()["pagination"]["total_pages"] == 59878.0
        assert res_6.json()["pagination"]["links"]["previous"] is None
        assert res_6.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (500) POST:/v1/estudantes
    # 4 - (200) GET:/v1/estudantes
    # Found 7 potential faults. Type-codes: 100, 200
    # Using 2 examples:
    #   2024
    #   25
    @timeout_decorator.timeout(60)
    def test_15_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"50004661830\", " + \
            " \"nomeMaeEstudante\": \"tABvDf\", " + \
            " \"cpf\": \"51057543608\", " + \
            " \"nome\": \"II6X1L7\", " + \
            " \"telefone\": \"11907631504\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 9 " + \
            " ], " + \
            " \"orgaoEmissor\": \"SSP-AM\", " + \
            " \"certidaoNascimento\": \"38407792995990011875610016163981\", " + \
            " \"cep\": \"07842567\", " + \
            " \"uf\": 33, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"2087-06-08\", " + \
            " \"serieAno\": 74, " + \
            " \"matriculaRede\": \"9ouve\", " + \
            " \"instituicao\": 28150, " + \
            " \"dataInicioPeriodoLetivo\": \"2037-08-20\", " + \
            " \"formaOrganizacaoTurma\": 887, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo dataNascimento é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"54185666101\", " + \
            " \"numeroNISResponsavel\": \"79959791064\", " + \
            " \"nomeMaeEstudante\": \"Sra. Eunice Pena\", " + \
            " \"genero\": 0, " + \
            " \"telefone\": \"thwsG\", " + \
            " \"nomeSocial\": \"Sfb2JNEw38xLnHir0\", " + \
            " \"sexo\": \"5\", " + \
            " \"numeroNIS\": \"48859874305\", " + \
            " \"certidaoNascimento\": \"3679215604607\", " + \
            " \"logradouro\": \"Rua Avenida Sophia Camacho\", " + \
            " \"estudantePpl\": 2, " + \
            " \"instituicao\": 106411, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"anoMatricula\": 738 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nome é obrigatório. (and 1 more error)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"41673544262\", " + \
            " \"nomeMaeEstudante\": \"e0NXXX_T5dsYy\", " + \
            " \"cpf\": \"67089268578\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"anderson.bittencourt.filho@fake.com\", " + \
            " \"nomeSocial\": \"60Kfw\", " + \
            " \"sexo\": \"1\", " + \
            " \"orgaoEmissor\": \"SSP-AL\", " + \
            " \"certidaoNascimento\": \"41463844385316817215434443111491\", " + \
            " \"cnh\": \"nfjHj\", " + \
            " \"logradouro\": \"Rua Largo Ávila\", " + \
            " \"numero\": \"1\", " + \
            " \"uf\": 24, " + \
            " \"serieAno\": 25, " + \
            " \"matriculaRede\": \"wIjceE63I0uZef\", " + \
            " \"instituicao\": 547, " + \
            " \"inep\": 33126224, " + \
            " \"estudanteAnoPeriodo\": 3, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo nome é obrigatório. (and 1 more error)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "situacao_matricula=INATIVAS&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["cpf"] == "49255179888"
        assert res_3.json()["data"][0]["nome"] == "111"
        assert res_3.json()["data"][0]["nomeSocial"] == "test"
        assert res_3.json()["data"][0]["numeroNIS"] is None
        assert res_3.json()["data"][0]["rg"] == "22307981"
        assert res_3.json()["data"][0]["orgaoEmissor"] == "SSP"
        assert res_3.json()["data"][0]["cpfResponsavel"] == "48405399283"
        assert res_3.json()["data"][0]["nomeMaeEstudante"] == "Valentina Rezende"
        assert res_3.json()["data"][0]["numeroNISResponsavel"] == "64668522654"
        assert res_3.json()["data"][0]["dataNascimento"] == "2024-12-28"
        assert res_3.json()["data"][0]["logradouro"] == "Rua teste"
        assert res_3.json()["data"][0]["bairro"] == "Santa Lucia"
        assert res_3.json()["data"][0]["numero"] == "220"
        assert res_3.json()["data"][0]["cep"] == "57018780"
        assert res_3.json()["data"][0]["municipio"] == 1100940.0
        assert res_3.json()["data"][0]["certidaoNascimento"] == "33333333"
        assert res_3.json()["data"][0]["cnh"] == "3333333"
        assert res_3.json()["data"][0]["uf"] == 11.0
        assert res_3.json()["data"][0]["racaCor"] == 3.0
        assert len(res_3.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_3.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_3.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert res_3.json()["data"][0]["genero"] == 3.0
        assert res_3.json()["data"][0]["telefone"] == "3333333"
        assert res_3.json()["data"][0]["email"] == "AFTER-TWO@AFTER-TWO.com"
        assert res_3.json()["data"][0]["situacaoCadastroValidado"] == 3.0
        assert len(res_3.json()["data"][0]["matriculas"]) == 3
        assert res_3.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 1729515.0
        assert res_3.json()["data"][0]["matriculas"][0]["codInstituicao"] == 7259.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2027-06-28"
        assert res_3.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] == "2024-07-23"
        assert res_3.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == False
        assert res_3.json()["data"][0]["matriculas"][0]["serieAno"] == 26.0
        assert res_3.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_3.json()["data"][0]["matriculas"][0]["matriculaRede"] == "atualizacao5"
        assert res_3.json()["data"][0]["matriculas"][0]["deletadaEm"] == "2025-01-11 17:20:17"
        assert res_3.json()["data"][0]["matriculas"][0]["inep"] == "12005037"
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] == 13.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] == "2024-07-23"
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2023-12-28"
        assert res_3.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_3.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 4.0
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteIntegral"] == True
        assert res_3.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["anoMatricula"] is None
        assert res_3.json()["data"][0]["matriculas"][1]["codigoMatriculaSgp"] == 1733020.0
        assert res_3.json()["data"][0]["matriculas"][1]["codInstituicao"] == 7259.0
        assert res_3.json()["data"][0]["matriculas"][1]["dataInicioMatricula"] == "2027-06-28"
        assert res_3.json()["data"][0]["matriculas"][1]["estudantePpl"] == 0.0
        assert res_3.json()["data"][0]["matriculas"][1]["dataFimOuAprovacao"] is None
        assert res_3.json()["data"][0]["matriculas"][1]["situacaoMatricula"] == False
        assert res_3.json()["data"][0]["matriculas"][1]["serieAno"] == 27.0
        assert res_3.json()["data"][0]["matriculas"][1]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_3.json()["data"][0]["matriculas"][1]["matriculaRede"] == "atualizacao4"
        assert res_3.json()["data"][0]["matriculas"][1]["deletadaEm"] == "2024-09-04 20:05:55"
        assert res_3.json()["data"][0]["matriculas"][1]["inep"] == "12005037"
        assert res_3.json()["data"][0]["matriculas"][1]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][0]["matriculas"][1]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][0]["matriculas"][1]["dataInicioPeriodoLetivo"] == "2023-12-28"
        assert res_3.json()["data"][0]["matriculas"][1]["formaOrganizacaoTurma"] == 1.0
        assert res_3.json()["data"][0]["matriculas"][1]["turmaOrganizacaoQuantidadeTotal"] == 4.0
        assert res_3.json()["data"][0]["matriculas"][1]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][0]["matriculas"][1]["estudanteIntegral"] == True
        assert res_3.json()["data"][0]["matriculas"][1]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][0]["matriculas"][1]["anoMatricula"] is None
        assert res_3.json()["data"][0]["matriculas"][2]["codigoMatriculaSgp"] == 1733021.0
        assert res_3.json()["data"][0]["matriculas"][2]["codInstituicao"] == 7259.0
        assert res_3.json()["data"][0]["matriculas"][2]["dataInicioMatricula"] == "2027-06-28"
        assert res_3.json()["data"][0]["matriculas"][2]["estudantePpl"] == 0.0
        assert res_3.json()["data"][0]["matriculas"][2]["dataFimOuAprovacao"] is None
        assert res_3.json()["data"][0]["matriculas"][2]["situacaoMatricula"] == False
        assert res_3.json()["data"][0]["matriculas"][2]["serieAno"] == 28.0
        assert res_3.json()["data"][0]["matriculas"][2]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_3.json()["data"][0]["matriculas"][2]["matriculaRede"] == "atualizacao4"
        assert res_3.json()["data"][0]["matriculas"][2]["deletadaEm"] == "2024-09-04 20:05:55"
        assert res_3.json()["data"][0]["matriculas"][2]["inep"] == "12005037"
        assert res_3.json()["data"][0]["matriculas"][2]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][0]["matriculas"][2]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][0]["matriculas"][2]["dataInicioPeriodoLetivo"] == "2023-12-28"
        assert res_3.json()["data"][0]["matriculas"][2]["formaOrganizacaoTurma"] == 1.0
        assert res_3.json()["data"][0]["matriculas"][2]["turmaOrganizacaoQuantidadeTotal"] == 4.0
        assert res_3.json()["data"][0]["matriculas"][2]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][0]["matriculas"][2]["estudanteIntegral"] == True
        assert res_3.json()["data"][0]["matriculas"][2]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][0]["matriculas"][2]["anoMatricula"] is None
        assert len(res_3.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][1]["cpf"] == "96196409000"
        assert res_3.json()["data"][1]["nome"] == "111"
        assert res_3.json()["data"][1]["nomeSocial"] is None
        assert res_3.json()["data"][1]["numeroNIS"] is None
        assert res_3.json()["data"][1]["rg"] == "22307981"
        assert res_3.json()["data"][1]["orgaoEmissor"] == "SSP"
        assert res_3.json()["data"][1]["cpfResponsavel"] == "48405399283"
        assert res_3.json()["data"][1]["nomeMaeEstudante"] == "Valentina Rezende"
        assert res_3.json()["data"][1]["numeroNISResponsavel"] == "64668522654"
        assert res_3.json()["data"][1]["dataNascimento"] == "2024-12-28"
        assert res_3.json()["data"][1]["logradouro"] == "Teste Logradouro"
        assert res_3.json()["data"][1]["bairro"] == "Teste Bairro"
        assert res_3.json()["data"][1]["numero"] == "333"
        assert res_3.json()["data"][1]["cep"] == "33333333"
        assert res_3.json()["data"][1]["municipio"] == 1100940.0
        assert res_3.json()["data"][1]["certidaoNascimento"] == "33333333"
        assert res_3.json()["data"][1]["cnh"] == "3333333"
        assert res_3.json()["data"][1]["uf"] == 11.0
        assert res_3.json()["data"][1]["racaCor"] == 3.0
        assert len(res_3.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_3.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_3.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert res_3.json()["data"][1]["genero"] == 3.0
        assert res_3.json()["data"][1]["telefone"] == "3333333"
        assert res_3.json()["data"][1]["email"] == "AFTER-TWO@AFTER-TWO.com"
        assert res_3.json()["data"][1]["situacaoCadastroValidado"] == 4.0
        assert len(res_3.json()["data"][1]["matriculas"]) == 1
        assert res_3.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 1729590.0
        assert res_3.json()["data"][1]["matriculas"][0]["codInstituicao"] == 7259.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2027-06-28"
        assert res_3.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] == "2024-11-08"
        assert res_3.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == False
        assert res_3.json()["data"][1]["matriculas"][0]["serieAno"] == 6.0
        assert res_3.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Fundamental de 8 anos"
        assert res_3.json()["data"][1]["matriculas"][0]["matriculaRede"] == "teste2"
        assert res_3.json()["data"][1]["matriculas"][0]["deletadaEm"] == "2024-11-21 11:00:14"
        assert res_3.json()["data"][1]["matriculas"][0]["inep"] == "12005037"
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] == 1.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2023-12-28"
        assert res_3.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_3.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 4.0
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteIntegral"] == True
        assert res_3.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][2]["cpf"] == "13514206074"
        assert res_3.json()["data"][2]["nome"] == "111"
        assert res_3.json()["data"][2]["nomeSocial"] is None
        assert res_3.json()["data"][2]["numeroNIS"] is None
        assert res_3.json()["data"][2]["rg"] == "22307981"
        assert res_3.json()["data"][2]["orgaoEmissor"] == "SSP"
        assert res_3.json()["data"][2]["cpfResponsavel"] == "48405399283"
        assert res_3.json()["data"][2]["nomeMaeEstudante"] == "Valentina Rezende"
        assert res_3.json()["data"][2]["numeroNISResponsavel"] == "64668522654"
        assert res_3.json()["data"][2]["dataNascimento"] == "2024-12-28"
        assert res_3.json()["data"][2]["logradouro"] == "Teste Logradouro"
        assert res_3.json()["data"][2]["bairro"] == "Teste Bairro"
        assert res_3.json()["data"][2]["numero"] == "333"
        assert res_3.json()["data"][2]["cep"] == "33333333"
        assert res_3.json()["data"][2]["municipio"] == 1100940.0
        assert res_3.json()["data"][2]["certidaoNascimento"] == "33333333"
        assert res_3.json()["data"][2]["cnh"] == "3333333"
        assert res_3.json()["data"][2]["uf"] == 11.0
        assert res_3.json()["data"][2]["racaCor"] == 3.0
        assert len(res_3.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert res_3.json()["data"][2]["genero"] == 3.0
        assert res_3.json()["data"][2]["telefone"] == "3333333"
        assert res_3.json()["data"][2]["email"] == "AFTER-TWO@AFTER-TWO.com"
        assert res_3.json()["data"][2]["situacaoCadastroValidado"] == 4.0
        assert len(res_3.json()["data"][2]["matriculas"]) == 1
        assert res_3.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 1729591.0
        assert res_3.json()["data"][2]["matriculas"][0]["codInstituicao"] == 7259.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "2027-06-28"
        assert res_3.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] == "2024-08-28"
        assert res_3.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == False
        assert res_3.json()["data"][2]["matriculas"][0]["serieAno"] == 6.0
        assert res_3.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Fundamental de 8 anos"
        assert res_3.json()["data"][2]["matriculas"][0]["matriculaRede"] == "7"
        assert res_3.json()["data"][2]["matriculas"][0]["deletadaEm"] == "2024-08-28 18:48:30"
        assert res_3.json()["data"][2]["matriculas"][0]["inep"] == "12005037"
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] == 1.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2023-12-28"
        assert res_3.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_3.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 4.0
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteIntegral"] == True
        assert res_3.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 1381.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 139.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (200) GET:/v1/estudantes
    # Found 5 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   25
    @timeout_decorator.timeout(60)
    def test_16_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"vD\", " + \
            " \"cpf\": \"F9\", " + \
            " \"nome\": \"Srta. Danilo Fernandes\", " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 2, " + \
            " \"nomeSocial\": \"m7ec_OlQnGEW1MHI\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 3 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"rg\": \"2647527928235000\", " + \
            " \"orgaoEmissor\": \"SSP-RJ\", " + \
            " \"certidaoNascimento\": \"1LjIwj0tcP7\", " + \
            " \"bairro\": \"São Mendonça\", " + \
            " \"cep\": \"01001000\", " + \
            " \"municipio\": 2408102, " + \
            " \"estudantePpl\": 1, " + \
            " \"dataInicioMatricula\": \"2055-13-10\", " + \
            " \"serieAno\": 25, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"03790968978\", " + \
            " \"numeroNISResponsavel\": \"88396499957\", " + \
            " \"nomeMaeEstudante\": \"Pedro Miguel de Lara\", " + \
            " \"racaCor\": 1, " + \
            " \"nomeSocial\": \"test\", " + \
            " \"sexo\": \"0\", " + \
            " \"orgaoEmissor\": \"SSP-AM\", " + \
            " \"cnh\": \"3333333\", " + \
            " \"numero\": \"220\", " + \
            " \"cep\": \"34886009\", " + \
            " \"municipio\": 1100940, " + \
            " \"uf\": 27, " + \
            " \"estudantePpl\": 0, " + \
            " \"dataInicioMatricula\": \"2059-09-13\", " + \
            " \"instituicao\": 8199, " + \
            " \"formaOrganizacaoTurma\": 70, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 2050582494, " + \
            " \"estudanteAnoPeriodo\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=24&" + 
                    "per_page=15&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 15
        assert res_2.json()["data"][0]["cpf"] == "07246333592"
        assert res_2.json()["data"][0]["nome"] == "Aaron Júlio Zambrano"
        assert res_2.json()["data"][0]["nomeSocial"] is None
        assert res_2.json()["data"][0]["numeroNIS"] == "83590641835"
        assert res_2.json()["data"][0]["rg"] == "4759683944256848"
        assert res_2.json()["data"][0]["orgaoEmissor"] == "SSP-RJ"
        assert res_2.json()["data"][0]["cpfResponsavel"] == "11957246243"
        assert res_2.json()["data"][0]["nomeMaeEstudante"] == "Mia Camacho"
        assert res_2.json()["data"][0]["numeroNISResponsavel"] == "11625341622"
        assert res_2.json()["data"][0]["dataNascimento"] == "2009-01-17"
        assert res_2.json()["data"][0]["logradouro"] == "Rua R. Lilian"
        assert res_2.json()["data"][0]["bairro"] == "São Beltrão"
        assert res_2.json()["data"][0]["numero"] == "545"
        assert res_2.json()["data"][0]["cep"] == "40702669"
        assert res_2.json()["data"][0]["municipio"] == 3304557.0
        assert res_2.json()["data"][0]["certidaoNascimento"] == "60149466002906853055798681744217"
        assert res_2.json()["data"][0]["cnh"] is None
        assert res_2.json()["data"][0]["uf"] == 33.0
        assert res_2.json()["data"][0]["racaCor"] == 0.0
        assert len(res_2.json()["data"][0]["tipoDeficiencia"]) == 0
        assert res_2.json()["data"][0]["genero"] == 4.0
        assert res_2.json()["data"][0]["telefone"] is None
        assert res_2.json()["data"][0]["email"] is None
        assert res_2.json()["data"][0]["situacaoCadastroValidado"] is None
        assert len(res_2.json()["data"][0]["matriculas"]) == 1
        assert res_2.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 2209046.0
        assert res_2.json()["data"][0]["matriculas"][0]["codInstituicao"] == 186425.0
        assert res_2.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_2.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_2.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == True
        assert res_2.json()["data"][0]["matriculas"][0]["serieAno"] == 25.0
        assert res_2.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_2.json()["data"][0]["matriculas"][0]["matriculaRede"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["deletadaEm"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["inep"] == "41102878"
        assert res_2.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["estudanteIntegral"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["anoMatricula"] is None
        assert len(res_2.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_2.json()["data"][1]["cpf"] == "67333511456"
        assert res_2.json()["data"][1]["nome"] == "Aaron Kauan Cordeiro Neto"
        assert res_2.json()["data"][1]["nomeSocial"] is None
        assert res_2.json()["data"][1]["numeroNIS"] == "29930170294"
        assert res_2.json()["data"][1]["rg"] == "0599475991915060"
        assert res_2.json()["data"][1]["orgaoEmissor"] == "SSP-RJ"
        assert res_2.json()["data"][1]["cpfResponsavel"] == "43658423587"
        assert res_2.json()["data"][1]["nomeMaeEstudante"] == "Srta. Betina Quintana Sobrinho"
        assert res_2.json()["data"][1]["numeroNISResponsavel"] == "31831415134"
        assert res_2.json()["data"][1]["dataNascimento"] == "2006-08-07"
        assert res_2.json()["data"][1]["logradouro"] == "Rua Rua Maldonado"
        assert res_2.json()["data"][1]["bairro"] == "São Cordeiro"
        assert res_2.json()["data"][1]["numero"] == "2"
        assert res_2.json()["data"][1]["cep"] == "87287887"
        assert res_2.json()["data"][1]["municipio"] == 3304557.0
        assert res_2.json()["data"][1]["certidaoNascimento"] == "28393678507650229274655691565506"
        assert res_2.json()["data"][1]["cnh"] is None
        assert res_2.json()["data"][1]["uf"] == 33.0
        assert res_2.json()["data"][1]["racaCor"] == 4.0
        assert len(res_2.json()["data"][1]["tipoDeficiencia"]) == 0
        assert res_2.json()["data"][1]["genero"] == 1.0
        assert res_2.json()["data"][1]["telefone"] is None
        assert res_2.json()["data"][1]["email"] == "aaron.kauan.cordeiro.neto@fake.com"
        assert res_2.json()["data"][1]["situacaoCadastroValidado"] is None
        assert len(res_2.json()["data"][1]["matriculas"]) == 1
        assert res_2.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 7850425.0
        assert res_2.json()["data"][1]["matriculas"][0]["codInstituicao"] == 55360.0
        assert res_2.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_2.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_2.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == True
        assert res_2.json()["data"][1]["matriculas"][0]["serieAno"] == 27.0
        assert res_2.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_2.json()["data"][1]["matriculas"][0]["matriculaRede"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["deletadaEm"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["inep"] == "23144025"
        assert res_2.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["estudanteIntegral"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["anoMatricula"] is None
        assert len(res_2.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_2.json()["data"][2]["cpf"] == "79542938403"
        assert res_2.json()["data"][2]["nome"] == "Aaron Kauan Marinho Jr."
        assert res_2.json()["data"][2]["nomeSocial"] is None
        assert res_2.json()["data"][2]["numeroNIS"] == "17928698135"
        assert res_2.json()["data"][2]["rg"] == "8608306338263751"
        assert res_2.json()["data"][2]["orgaoEmissor"] == "SSP-AM"
        assert res_2.json()["data"][2]["cpfResponsavel"] == "44511236909"
        assert res_2.json()["data"][2]["nomeMaeEstudante"] == "Sra. Melinda Danielle Sepúlveda"
        assert res_2.json()["data"][2]["numeroNISResponsavel"] == "60543577078"
        assert res_2.json()["data"][2]["dataNascimento"] == "2009-12-24"
        assert res_2.json()["data"][2]["logradouro"] == "Rua Avenida Tábata"
        assert res_2.json()["data"][2]["bairro"] == "São Ortega"
        assert res_2.json()["data"][2]["numero"] == "75104"
        assert res_2.json()["data"][2]["cep"] == "87826405"
        assert res_2.json()["data"][2]["municipio"] == 1302603.0
        assert res_2.json()["data"][2]["certidaoNascimento"] == "91739957847214281867819915107970"
        assert res_2.json()["data"][2]["cnh"] is None
        assert res_2.json()["data"][2]["uf"] == 13.0
        assert res_2.json()["data"][2]["racaCor"] == 0.0
        assert len(res_2.json()["data"][2]["tipoDeficiencia"]) == 0
        assert res_2.json()["data"][2]["genero"] == 0.0
        assert res_2.json()["data"][2]["telefone"] is None
        assert res_2.json()["data"][2]["email"] == "aaron.kauan.marinho.jr@fake.com"
        assert res_2.json()["data"][2]["situacaoCadastroValidado"] is None
        assert len(res_2.json()["data"][2]["matriculas"]) == 1
        assert res_2.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 1.0126294E7
        assert res_2.json()["data"][2]["matriculas"][0]["codInstituicao"] == 28150.0
        assert res_2.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_2.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_2.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == True
        assert res_2.json()["data"][2]["matriculas"][0]["serieAno"] == 45.0
        assert res_2.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_2.json()["data"][2]["matriculas"][0]["matriculaRede"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["deletadaEm"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["inep"] == "16004183"
        assert res_2.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_2.json()["data"][2]["matriculas"][0]["estudanteIntegral"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_2.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 598560.0
        assert res_2.json()["pagination"]["count"] == 15.0
        assert res_2.json()["pagination"]["per_page"] == 15.0
        assert res_2.json()["pagination"]["current_page"] == 24.0
        assert res_2.json()["pagination"]["total_pages"] == 39904.0
        assert res_2.json()["pagination"]["links"]["previous"] == 23.0
        assert res_2.json()["pagination"]["links"]["next"] == 25.0
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (200) GET:/v1/estudantes
    # Found 5 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_17_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"7aTq92Zi\", " + \
            " \"cpf\": \"57472863661\", " + \
            " \"dataNascimento\": \"1980-05-20\", " + \
            " \"genero\": 8, " + \
            " \"racaCor\": 3, " + \
            " \"sexo\": \"3\", " + \
            " \"rg\": \"7720871072392495\", " + \
            " \"orgaoEmissor\": \"qh7K\", " + \
            " \"cnh\": \"0B06hGtz\", " + \
            " \"logradouro\": \"Rua Largo Christopher\", " + \
            " \"bairro\": \"São Matias\", " + \
            " \"numero\": \"8N\", " + \
            " \"municipio\": 2704302, " + \
            " \"estudantePpl\": 0, " + \
            " \"serieAno\": 58, " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"instituicao\": 55360, " + \
            " \"inep\": 42023513, " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 1, " + \
            " \"anoMatricula\": 253 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nome é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"54185666101\", " + \
            " \"nomeMaeEstudante\": \"Valentina Rezende\", " + \
            " \"cpf\": \"91972685694\", " + \
            " \"nome\": \"Alan Rodrigues Filho\", " + \
            " \"email\": \"aaron.leal.bonilha.jr@fake.com\", " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"sexo\": \"1\", " + \
            " \"numeroNIS\": \"10895955609\", " + \
            " \"rg\": \"7720871072392495\", " + \
            " \"logradouro\": \"SdCV1QGCzElf4BX\", " + \
            " \"bairro\": \"j\", " + \
            " \"cep\": \"15015010\", " + \
            " \"municipio\": 4200705, " + \
            " \"estudantePpl\": 1, " + \
            " \"dataInicioMatricula\": \"2097-03-16\", " + \
            " \"serieAno\": 44, " + \
            " \"matriculaRede\": \"56789\", " + \
            " \"instituicao\": 133842, " + \
            " \"inep\": 41141288, " + \
            " \"dataInicioPeriodoLetivo\": \"2081-02-20\", " + \
            " \"formaOrganizacaoTurma\": 836, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 0 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo dataNascimento é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=81&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_2.json()["data"]) == 17
        assert res_2.json()["data"][0]["cpf"] == "86141562434"
        assert res_2.json()["data"][0]["nome"] == "Aaron Cruz Alcantara Neto"
        assert res_2.json()["data"][0]["nomeSocial"] is None
        assert res_2.json()["data"][0]["numeroNIS"] == "87732598473"
        assert res_2.json()["data"][0]["rg"] == "6666978857527129"
        assert res_2.json()["data"][0]["orgaoEmissor"] == "SSP-AM"
        assert res_2.json()["data"][0]["cpfResponsavel"] == "38033844191"
        assert res_2.json()["data"][0]["nomeMaeEstudante"] == "Srta. Valentina Souza"
        assert res_2.json()["data"][0]["numeroNISResponsavel"] == "86354613348"
        assert res_2.json()["data"][0]["dataNascimento"] == "2006-03-10"
        assert res_2.json()["data"][0]["logradouro"] == "Rua Travessa Duarte"
        assert res_2.json()["data"][0]["bairro"] == "São Perez"
        assert res_2.json()["data"][0]["numero"] == "67745"
        assert res_2.json()["data"][0]["cep"] == "37921122"
        assert res_2.json()["data"][0]["municipio"] == 1302603.0
        assert res_2.json()["data"][0]["certidaoNascimento"] == "97058493590404594010206740494975"
        assert res_2.json()["data"][0]["cnh"] is None
        assert res_2.json()["data"][0]["uf"] == 13.0
        assert res_2.json()["data"][0]["racaCor"] == 1.0
        assert len(res_2.json()["data"][0]["tipoDeficiencia"]) == 0
        assert res_2.json()["data"][0]["genero"] == 1.0
        assert res_2.json()["data"][0]["telefone"] is None
        assert res_2.json()["data"][0]["email"] is None
        assert res_2.json()["data"][0]["situacaoCadastroValidado"] is None
        assert len(res_2.json()["data"][0]["matriculas"]) == 1
        assert res_2.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 3342819.0
        assert res_2.json()["data"][0]["matriculas"][0]["codInstituicao"] == 8440.0
        assert res_2.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_2.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_2.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] == "2024-07-23"
        assert res_2.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == False
        assert res_2.json()["data"][0]["matriculas"][0]["serieAno"] == 25.0
        assert res_2.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_2.json()["data"][0]["matriculas"][0]["matriculaRede"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["deletadaEm"] == "2024-12-04 08:06:31"
        assert res_2.json()["data"][0]["matriculas"][0]["inep"] == "12033278"
        assert res_2.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] == 10.0
        assert res_2.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["estudanteIntegral"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_2.json()["data"][0]["matriculas"][0]["anoMatricula"] is None
        assert len(res_2.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_2.json()["data"][1]["cpf"] == "59986809525"
        assert res_2.json()["data"][1]["nome"] == "Aaron Emanuel Garcia Jr."
        assert res_2.json()["data"][1]["nomeSocial"] is None
        assert res_2.json()["data"][1]["numeroNIS"] == "89991914467"
        assert res_2.json()["data"][1]["rg"] == "3489743586055069"
        assert res_2.json()["data"][1]["orgaoEmissor"] == "SSP-PE"
        assert res_2.json()["data"][1]["cpfResponsavel"] == "55053437408"
        assert res_2.json()["data"][1]["nomeMaeEstudante"] == "Emilly Zaragoça Filho"
        assert res_2.json()["data"][1]["numeroNISResponsavel"] == "00271957484"
        assert res_2.json()["data"][1]["dataNascimento"] == "2008-03-23"
        assert res_2.json()["data"][1]["logradouro"] == "Rua Rua Sebastião"
        assert res_2.json()["data"][1]["bairro"] == "São Soares"
        assert res_2.json()["data"][1]["numero"] == "7829"
        assert res_2.json()["data"][1]["cep"] == "98483504"
        assert res_2.json()["data"][1]["municipio"] == 2611606.0
        assert res_2.json()["data"][1]["certidaoNascimento"] == "29657727563356405071523758327047"
        assert res_2.json()["data"][1]["cnh"] is None
        assert res_2.json()["data"][1]["uf"] == 26.0
        assert res_2.json()["data"][1]["racaCor"] == 2.0
        assert len(res_2.json()["data"][1]["tipoDeficiencia"]) == 0
        assert res_2.json()["data"][1]["genero"] == 4.0
        assert res_2.json()["data"][1]["telefone"] is None
        assert res_2.json()["data"][1]["email"] is None
        assert res_2.json()["data"][1]["situacaoCadastroValidado"] is None
        assert len(res_2.json()["data"][1]["matriculas"]) == 1
        assert res_2.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 6352479.0
        assert res_2.json()["data"][1]["matriculas"][0]["codInstituicao"] == 8361.0
        assert res_2.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_2.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_2.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] == "2024-07-23"
        assert res_2.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == False
        assert res_2.json()["data"][1]["matriculas"][0]["serieAno"] == 45.0
        assert res_2.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_2.json()["data"][1]["matriculas"][0]["matriculaRede"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["deletadaEm"] == "2024-12-12 02:26:04"
        assert res_2.json()["data"][1]["matriculas"][0]["inep"] == "12032115"
        assert res_2.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] == 10.0
        assert res_2.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_2.json()["data"][1]["matriculas"][0]["estudanteIntegral"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_2.json()["data"][1]["matriculas"][0]["anoMatricula"] is None
        assert len(res_2.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_2.json()["data"][2]["cpf"] == "07189562656"
        assert res_2.json()["data"][2]["nome"] == "Alana Vieira"
        assert res_2.json()["data"][2]["nomeSocial"] is None
        assert res_2.json()["data"][2]["numeroNIS"] == "78956067480"
        assert res_2.json()["data"][2]["rg"] == "80592132703471160974"
        assert res_2.json()["data"][2]["orgaoEmissor"] == "SSP/AL"
        assert res_2.json()["data"][2]["cpfResponsavel"] == "11878918940"
        assert res_2.json()["data"][2]["nomeMaeEstudante"] == "Dr. Lorenzo Jesus"
        assert res_2.json()["data"][2]["numeroNISResponsavel"] == "57634795981"
        assert res_2.json()["data"][2]["dataNascimento"] == "2005-10-13"
        assert res_2.json()["data"][2]["logradouro"] == "Recanto Melissa da Mata, 91\nVila Copasa\n85498615 da Paz / SE"
        assert res_2.json()["data"][2]["bairro"] == "Bairro"
        assert res_2.json()["data"][2]["numero"] == "8823"
        assert res_2.json()["data"][2]["cep"] == "57000000"
        assert res_2.json()["data"][2]["municipio"] == 1200203.0
        assert res_2.json()["data"][2]["certidaoNascimento"] == "36889690437362011130166117247755"
        assert res_2.json()["data"][2]["cnh"] is None
        assert res_2.json()["data"][2]["uf"] == 12.0
        assert res_2.json()["data"][2]["racaCor"] == 5.0
        assert len(res_2.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_2.json()["data"][2]["tipoDeficiencia"][0] == 5.0
        assert res_2.json()["data"][2]["tipoDeficiencia"][1] == 9.0
        assert res_2.json()["data"][2]["tipoDeficiencia"][2] == 10.0
        assert res_2.json()["data"][2]["genero"] == 2.0
        assert res_2.json()["data"][2]["telefone"] is None
        assert res_2.json()["data"][2]["email"] is None
        assert res_2.json()["data"][2]["situacaoCadastroValidado"] == 3.0
        assert len(res_2.json()["data"][2]["matriculas"]) == 1
        assert res_2.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 1289517.0
        assert res_2.json()["data"][2]["matriculas"][0]["codInstituicao"] == 6.0
        assert res_2.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "1970-09-18"
        assert res_2.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_2.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] == "2024-09-23"
        assert res_2.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == False
        assert res_2.json()["data"][2]["matriculas"][0]["serieAno"] == 43.0
        assert res_2.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_2.json()["data"][2]["matriculas"][0]["matriculaRede"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["deletadaEm"] == "2024-09-23 17:40:12"
        assert res_2.json()["data"][2]["matriculas"][0]["inep"] == "27014088"
        assert res_2.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] == 10.0
        assert res_2.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_2.json()["data"][2]["matriculas"][0]["estudanteIntegral"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_2.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_2.json()["data"][2]["outrasMatriculas"]) == 1
        assert res_2.json()["data"][2]["outrasMatriculas"][0]["codigoMatriculaSgp"] == 754367.0
        assert res_2.json()["data"][2]["outrasMatriculas"][0]["serieAno"] == 47.0
        assert res_2.json()["data"][2]["outrasMatriculas"][0]["nomeRede"] == "Secretaria Estadual de Educação"
        assert res_2.json()["data"][2]["outrasMatriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_2.json()["data"][2]["outrasMatriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_2.json()["data"][2]["outrasMatriculas"][0]["uf"] == "Rio Grande do Sul"
        assert res_2.json()["data"][2]["outrasMatriculas"][0]["nomeMunicipio"] is None
        # Skipping assertions on the remaining 14 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 17.0
        assert res_2.json()["pagination"]["count"] == 17.0
        assert res_2.json()["pagination"]["per_page"] == 81.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 1.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (500) POST:/v1/estudantes
    # 4 - (200) GET:/v1/estudantes
    # Found 7 potential faults. Type-codes: 100, 200
    # Using 2 examples:
    #   2024
    #   25
    @timeout_decorator.timeout(60)
    def test_18_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"Vitor Hugo da Cunha\", " + \
            " \"telefone\": \"22hvkc6k1\", " + \
            " \"sexo\": \"5\", " + \
            " \"orgaoEmissor\": \"SSP-AM\", " + \
            " \"certidaoNascimento\": \"5844904610940537779\", " + \
            " \"bairro\": \"São Beltrão\", " + \
            " \"numero\": \"\", " + \
            " \"uf\": 737, " + \
            " \"dataInicioMatricula\": \"1949-09-25\", " + \
            " \"instituicao\": 148482, " + \
            " \"inep\": 29191840, " + \
            " \"dataInicioPeriodoLetivo\": \"2074-12-31\", " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"estudanteIntegral\": 42 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"27666799620\", " + \
            " \"nomeMaeEstudante\": \"E5cFGNwhPc\", " + \
            " \"sexo\": \"3\", " + \
            " \"orgaoEmissor\": \"SEDS\", " + \
            " \"cnh\": \"74266683856\", " + \
            " \"logradouro\": \"Rua Largo Cruz\", " + \
            " \"bairro\": \"São Ortega\", " + \
            " \"cep\": \"75629407\", " + \
            " \"municipio\": 685855743, " + \
            " \"dataInicioMatricula\": \"2060-09-21\", " + \
            " \"dataInicioPeriodoLetivo\": \"1916-11-13\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpf\": \"67474259524\", " + \
            " \"dataNascimento\": \"1998-01-06\", " + \
            " \"genero\": 7, " + \
            " \"tipoDeficiencia\": [ " + \
            " 937, " + \
            " 9, " + \
            " 10, " + \
            " 10 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"rg\": \"3495986597734298\", " + \
            " \"orgaoEmissor\": \"ph\", " + \
            " \"certidaoNascimento\": \"33333333\", " + \
            " \"cnh\": \"01354673004\", " + \
            " \"logradouro\": \"Swo6muNp45odY6kz nIa3J\", " + \
            " \"bairro\": \"São Rangel\", " + \
            " \"cep\": \"89485858\", " + \
            " \"municipio\": 3304557, " + \
            " \"estudantePpl\": 2, " + \
            " \"serieAno\": 25, " + \
            " \"matriculaRede\": \"XAAc13c\", " + \
            " \"dataInicioPeriodoLetivo\": \"2083-13-18\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=693&" + 
                    "per_page=15&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_3.json()["data"]) == 15
        assert res_3.json()["data"][0]["cpf"] == "53448938335"
        assert res_3.json()["data"][0]["nome"] == "Alexa Pacheco Filho"
        assert res_3.json()["data"][0]["nomeSocial"] is None
        assert res_3.json()["data"][0]["numeroNIS"] == "51142346971"
        assert res_3.json()["data"][0]["rg"] == "3126356453247767"
        assert res_3.json()["data"][0]["orgaoEmissor"] == "SSP-RJ"
        assert res_3.json()["data"][0]["cpfResponsavel"] == "23781176126"
        assert res_3.json()["data"][0]["nomeMaeEstudante"] == "Dr. Nicole Maria Ortega"
        assert res_3.json()["data"][0]["numeroNISResponsavel"] == "70671129296"
        assert res_3.json()["data"][0]["dataNascimento"] == "2007-08-16"
        assert res_3.json()["data"][0]["logradouro"] == "Rua Avenida Emanuel"
        assert res_3.json()["data"][0]["bairro"] == "São Roque"
        assert res_3.json()["data"][0]["numero"] == "60683"
        assert res_3.json()["data"][0]["cep"] == "65902414"
        assert res_3.json()["data"][0]["municipio"] == 3304557.0
        assert res_3.json()["data"][0]["certidaoNascimento"] == "08588429632706043827017614993985"
        assert res_3.json()["data"][0]["cnh"] is None
        assert res_3.json()["data"][0]["uf"] == 33.0
        assert res_3.json()["data"][0]["racaCor"] == 5.0
        assert len(res_3.json()["data"][0]["tipoDeficiencia"]) == 0
        assert res_3.json()["data"][0]["genero"] == 4.0
        assert res_3.json()["data"][0]["telefone"] is None
        assert res_3.json()["data"][0]["email"] is None
        assert res_3.json()["data"][0]["situacaoCadastroValidado"] is None
        assert len(res_3.json()["data"][0]["matriculas"]) == 1
        assert res_3.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 6507287.0
        assert res_3.json()["data"][0]["matriculas"][0]["codInstituicao"] == 185992.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_3.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == True
        assert res_3.json()["data"][0]["matriculas"][0]["serieAno"] == 25.0
        assert res_3.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_3.json()["data"][0]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["deletadaEm"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["inep"] == "41085272"
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][0]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][1]["cpf"] == "50167756567"
        assert res_3.json()["data"][1]["nome"] == "Alexa Pacheco Sobrinho"
        assert res_3.json()["data"][1]["nomeSocial"] is None
        assert res_3.json()["data"][1]["numeroNIS"] == "13981618695"
        assert res_3.json()["data"][1]["rg"] == "5545955919035491"
        assert res_3.json()["data"][1]["orgaoEmissor"] == "SSP-AM"
        assert res_3.json()["data"][1]["cpfResponsavel"] == "76711028902"
        assert res_3.json()["data"][1]["nomeMaeEstudante"] == "Sônia Grego"
        assert res_3.json()["data"][1]["numeroNISResponsavel"] == "49370623501"
        assert res_3.json()["data"][1]["dataNascimento"] == "2007-04-18"
        assert res_3.json()["data"][1]["logradouro"] == "Rua Travessa Francisco Garcia"
        assert res_3.json()["data"][1]["bairro"] == "São Montenegro"
        assert res_3.json()["data"][1]["numero"] == "7"
        assert res_3.json()["data"][1]["cep"] == "78597378"
        assert res_3.json()["data"][1]["municipio"] == 1302603.0
        assert res_3.json()["data"][1]["certidaoNascimento"] == "67699681634923352819571580978964"
        assert res_3.json()["data"][1]["cnh"] is None
        assert res_3.json()["data"][1]["uf"] == 13.0
        assert res_3.json()["data"][1]["racaCor"] == 2.0
        assert len(res_3.json()["data"][1]["tipoDeficiencia"]) == 0
        assert res_3.json()["data"][1]["genero"] == 4.0
        assert res_3.json()["data"][1]["telefone"] is None
        assert res_3.json()["data"][1]["email"] is None
        assert res_3.json()["data"][1]["situacaoCadastroValidado"] is None
        assert len(res_3.json()["data"][1]["matriculas"]) == 1
        assert res_3.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 5881556.0
        assert res_3.json()["data"][1]["matriculas"][0]["codInstituicao"] == 94204.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_3.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == True
        assert res_3.json()["data"][1]["matriculas"][0]["serieAno"] == 45.0
        assert res_3.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_3.json()["data"][1]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["deletadaEm"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["inep"] == "29182166"
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_3.json()["data"][1]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][1]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_3.json()["data"][2]["cpf"] == "58006725047"
        assert res_3.json()["data"][2]["nome"] == "Alexa Padilha Maldonado"
        assert res_3.json()["data"][2]["nomeSocial"] is None
        assert res_3.json()["data"][2]["numeroNIS"] == "69633326752"
        assert res_3.json()["data"][2]["rg"] == "8263831613519272"
        assert res_3.json()["data"][2]["orgaoEmissor"] == "SSP-SP"
        assert res_3.json()["data"][2]["cpfResponsavel"] == "22453137123"
        assert res_3.json()["data"][2]["nomeMaeEstudante"] == "Dr. Elis Nayara Verdara Jr."
        assert res_3.json()["data"][2]["numeroNISResponsavel"] == "92608586627"
        assert res_3.json()["data"][2]["dataNascimento"] == "2010-04-13"
        assert res_3.json()["data"][2]["logradouro"] == "Rua R. Matheus"
        assert res_3.json()["data"][2]["bairro"] == "São Delatorre"
        assert res_3.json()["data"][2]["numero"] == "2701"
        assert res_3.json()["data"][2]["cep"] == "13456539"
        assert res_3.json()["data"][2]["municipio"] == 3550308.0
        assert res_3.json()["data"][2]["certidaoNascimento"] == "49209400919704951618199133982316"
        assert res_3.json()["data"][2]["cnh"] is None
        assert res_3.json()["data"][2]["uf"] == 35.0
        assert res_3.json()["data"][2]["racaCor"] == 4.0
        assert len(res_3.json()["data"][2]["tipoDeficiencia"]) == 0
        assert res_3.json()["data"][2]["genero"] == 3.0
        assert res_3.json()["data"][2]["telefone"] is None
        assert res_3.json()["data"][2]["email"] is None
        assert res_3.json()["data"][2]["situacaoCadastroValidado"] is None
        assert len(res_3.json()["data"][2]["matriculas"]) == 1
        assert res_3.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 3569462.0
        assert res_3.json()["data"][2]["matriculas"][0]["codInstituicao"] == 136216.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_3.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_3.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == True
        assert res_3.json()["data"][2]["matriculas"][0]["serieAno"] == 45.0
        assert res_3.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_3.json()["data"][2]["matriculas"][0]["matriculaRede"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["deletadaEm"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["inep"] == "33007411"
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_3.json()["data"][2]["matriculas"][0]["estudanteIntegral"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_3.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_3.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 598560.0
        assert res_3.json()["pagination"]["count"] == 15.0
        assert res_3.json()["pagination"]["per_page"] == 15.0
        assert res_3.json()["pagination"]["current_page"] == 693.0
        assert res_3.json()["pagination"]["total_pages"] == 39904.0
        assert res_3.json()["pagination"]["links"]["previous"] == 692.0
        assert res_3.json()["pagination"]["links"]["next"] == 694.0
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (500) POST:/v1/estudantes
    # 4 - (500) POST:/v1/estudantes
    # 5 - (200) GET:/v1/estudantes
    # Found 9 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_19_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"94164605910\", " + \
            " \"numeroNISResponsavel\": \"64668522654\", " + \
            " \"cpf\": \"04487019443\", " + \
            " \"genero\": 6, " + \
            " \"email\": \"anderson.bittencourt.filho@fake.com\", " + \
            " \"nomeSocial\": \"JWcmlm3 bF1UEc\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"certidaoNascimento\": \"37970834141799702738874674054370\", " + \
            " \"cnh\": \"03251028466\", " + \
            " \"logradouro\": \"2i0\", " + \
            " \"municipio\": 3106200, " + \
            " \"uf\": 31, " + \
            " \"dataInicioMatricula\": \"2088-13-23\", " + \
            " \"instituicao\": 185730, " + \
            " \"dataInicioPeriodoLetivo\": \"2023-01-28\", " + \
            " \"formaOrganizacaoTurma\": 5, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 7, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"x3UQ\", " + \
            " \"nomeMaeEstudante\": \"Ofélia Garcês\", " + \
            " \"cpf\": \"40426129709\", " + \
            " \"nome\": \"Alessandra Gonçalves Chaves\", " + \
            " \"racaCor\": 2, " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 1, " + \
            " 5, " + \
            " 410 " + \
            " ], " + \
            " \"sexo\": \"1\", " + \
            " \"numeroNIS\": \"16928055082\", " + \
            " \"certidaoNascimento\": \"Is_undBp\", " + \
            " \"cnh\": \"84566125764\", " + \
            " \"logradouro\": \"Rua Av. Davi\", " + \
            " \"numero\": \"563\", " + \
            " \"municipio\": 423, " + \
            " \"uf\": 42, " + \
            " \"dataInicioMatricula\": \"2092-03-00\", " + \
            " \"matriculaRede\": \"pdkxLFRWoC\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10, " + \
            " \"estudanteIntegral\": 1, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo dataNascimento é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"85307915250\", " + \
            " \"numeroNISResponsavel\": \"48687441786\", " + \
            " \"cpf\": \"61084382741\", " + \
            " \"dataNascimento\": \"2010-05-23\", " + \
            " \"genero\": 5, " + \
            " \"racaCor\": 0, " + \
            " \"email\": \"L8HmWZr4oV@example.com\", " + \
            " \"nomeSocial\": \"jdEYfjYYG W\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"rg\": \"0866909513309353\", " + \
            " \"orgaoEmissor\": \"SSP-PE\", " + \
            " \"cnh\": \"62605997189\", " + \
            " \"bairro\": \"São Rico\", " + \
            " \"cep\": \"j8xo\", " + \
            " \"dataInicioMatricula\": \"2050-11-23\", " + \
            " \"instituicao\": 105789, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"44700098066\", " + \
            " \"numeroNISResponsavel\": \"4Y_tJEC\", " + \
            " \"dataNascimento\": \"2001-04-21\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"alexa.patricia.mendes.neto@fake.com\", " + \
            " \"telefone\": \"Nm\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 956, " + \
            " 1, " + \
            " 10, " + \
            " 1, " + \
            " 10 " + \
            " ], " + \
            " \"numeroNIS\": \"ebY9fUiU9\", " + \
            " \"rg\": \"Nl_4ETP\", " + \
            " \"certidaoNascimento\": \"27141840292116775446790882712378\", " + \
            " \"cnh\": \"64328420713\", " + \
            " \"logradouro\": \"\", " + \
            " \"cep\": \"36824605\", " + \
            " \"municipio\": 2611606, " + \
            " \"estudantePpl\": 1, " + \
            " \"dataInicioMatricula\": \"1983-06-27\", " + \
            " \"matriculaRede\": \"e2XouiaD2aNA 8\", " + \
            " \"dataInicioPeriodoLetivo\": \"2028-05-13\", " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 0 " + \
            " } "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro."
        assert res_3.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório. (and 2 more errors)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "situacao_matricula=INATIVAS&" + 
                    "ano_matricula=1851970189&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_4.json()["data"]) == 0
        assert res_4.json()["pagination"]["total"] == 0.0
        assert res_4.json()["pagination"]["count"] == 0.0
        assert res_4.json()["pagination"]["per_page"] == 10.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 0.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (500) POST:/v1/estudantes
    # 3 - (500) POST:/v1/estudantes
    # 4 - (500) POST:/v1/estudantes
    # 5 - (500) POST:/v1/estudantes
    # 6 - (500) POST:/v1/estudantes
    # 7 - (500) POST:/v1/estudantes
    # 8 - (200) GET:/v1/estudantes
    # Found 15 potential faults. Type-codes: 100, 200
    # Using 1 example:
    #   2025
    @timeout_decorator.timeout(60)
    def test_20_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"64594506178\", " + \
            " \"nome\": \"Vitor Hugo Monteira\", " + \
            " \"dataNascimento\": \"1927-08-03\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"alexa.paes.da.rosa@fake.com\", " + \
            " \"telefone\": \"11924664791\", " + \
            " \"nomeSocial\": \"vYHSe9eaiB\", " + \
            " \"rg\": \"2111552187832942\", " + \
            " \"orgaoEmissor\": \"Nt Uteu4fY\", " + \
            " \"logradouro\": \"Rua Av. Davi\", " + \
            " \"bairro\": \"yhxrGe7pTWXAqlsgDRnk\", " + \
            " \"numero\": \"6\", " + \
            " \"instituicao\": 8361, " + \
            " \"dataInicioPeriodoLetivo\": \"2014-02-00\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": -336447232, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"58935317101\", " + \
            " \"numeroNISResponsavel\": \"64668522654\", " + \
            " \"nomeMaeEstudante\": \"7F1suanrsaM6j7EPOK\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"60_ZCqYrSS9fUk\", " + \
            " \"telefone\": \"11907631504\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 74, " + \
            " 565, " + \
            " 2, " + \
            " 1 " + \
            " ], " + \
            " \"rg\": \"3247209697453440\", " + \
            " \"cnh\": \"02342004738\", " + \
            " \"numero\": \"3075\", " + \
            " \"cep\": \"57303515\", " + \
            " \"uf\": 43, " + \
            " \"inep\": 29482607, " + \
            " \"dataInicioPeriodoLetivo\": \"1908-01-11\", " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"anoMatricula\": 923 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_1.status_code == 500
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro."
        assert res_1.json()["errors"]["message"] == "O campo nome é obrigatório. (and 2 more errors)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"Rayane Esteves\", " + \
            " \"nome\": \"MoXI2i6t_eBdP\", " + \
            " \"genero\": 9, " + \
            " \"email\": \"1Ip1n0pz@example.com\", " + \
            " \"telefone\": \"11907631504\", " + \
            " \"nomeSocial\": \"7iky\", " + \
            " \"sexo\": \"1\", " + \
            " \"numeroNIS\": \"76907881440\", " + \
            " \"orgaoEmissor\": \"idskCJS\", " + \
            " \"certidaoNascimento\": \"85916801546844982470329107757572\", " + \
            " \"cnh\": \"32405422558\", " + \
            " \"bairro\": \"São Ortiz\", " + \
            " \"municipio\": 1501105, " + \
            " \"dataInicioMatricula\": \"1924-13-07\", " + \
            " \"serieAno\": 315, " + \
            " \"matriculaRede\": \"G8BMn2\", " + \
            " \"inep\": 16004183 " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "O campo dataNascimento é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nomeMaeEstudante\": \"onpU\", " + \
            " \"nome\": \"Aaron Kevin Camacho Neto\", " + \
            " \"dataNascimento\": \"9ruX0ZcrDLnZxk\", " + \
            " \"genero\": 7, " + \
            " \"email\": \"RTT0VngF3Deo0O@example.com\", " + \
            " \"telefone\": \"11907631504\", " + \
            " \"sexo\": \"2\", " + \
            " \"rg\": \"8019822397375762\", " + \
            " \"orgaoEmissor\": \"MBR8\", " + \
            " \"bairro\": \"São Ferraz\", " + \
            " \"numero\": \"G2\", " + \
            " \"cep\": \"\", " + \
            " \"municipio\": 1302603, " + \
            " \"uf\": 26, " + \
            " \"estudantePpl\": 1, " + \
            " \"matriculaRede\": \"jSowHhs\", " + \
            " \"instituicao\": 133842, " + \
            " \"inep\": 41142527, " + \
            " \"dataInicioPeriodoLetivo\": \"1986-02-09\", " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_3.status_code == 500
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "Ocorreu um erro."
        assert res_3.json()["errors"]["message"] == "O campo dataNascimento deve estar no formato AAAA-MM-DD. (and 1 more error)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"11957246243\", " + \
            " \"numeroNISResponsavel\": \"vA4dkAbp_a\", " + \
            " \"cpf\": \"89252230823\", " + \
            " \"nome\": \"Alan Rocha Godói\", " + \
            " \"genero\": 7, " + \
            " \"email\": \"\", " + \
            " \"nomeSocial\": \"oZymDIPtU\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"rg\": \"9596112769618540\", " + \
            " \"cnh\": \"32405422558\", " + \
            " \"logradouro\": \"X\", " + \
            " \"bairro\": \"São Alcantara\", " + \
            " \"numero\": \"9398\", " + \
            " \"cep\": \"60149506\", " + \
            " \"estudantePpl\": 1, " + \
            " \"dataInicioMatricula\": \"1911-06-11\", " + \
            " \"inep\": 211, " + \
            " \"dataInicioPeriodoLetivo\": \"1943-01-22\", " + \
            " \"formaOrganizacaoTurma\": 854, " + \
            " \"anoMatricula\": 2024 " + \
            " } "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_4.status_code == 500
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Ocorreu um erro."
        assert res_4.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório. (and 2 more errors)"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"86881471912\", " + \
            " \"email\": \"aaron.alan.solano@fake.com\", " + \
            " \"telefone\": \"\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"numeroNIS\": \"69633326752\", " + \
            " \"orgaoEmissor\": \"ZHH\", " + \
            " \"certidaoNascimento\": \"95809154625632762565343850014883\", " + \
            " \"logradouro\": \"eG2FvWTkTGnI DXlkVp3Mfw4QQ\", " + \
            " \"bairro\": \"São Carmona\", " + \
            " \"municipio\": 2704302, " + \
            " \"estudantePpl\": 1, " + \
            " \"dataInicioMatricula\": \"1943-04-28\", " + \
            " \"serieAno\": 6, " + \
            " \"matriculaRede\": \"7\", " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"anoMatricula\": 2025 " + \
            " } "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Ocorreu um erro."
        assert res_5.json()["errors"]["message"] == "O campo nomeMaeEstudante é obrigatório."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"11029006300\", " + \
            " \"numeroNISResponsavel\": \"91020870624\", " + \
            " \"nomeMaeEstudante\": \"bKRtxeQ\", " + \
            " \"cpf\": \"18740202054\", " + \
            " \"genero\": 2, " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 10, " + \
            " 5, " + \
            " 864, " + \
            " 131 " + \
            " ], " + \
            " \"sexo\": \"0\", " + \
            " \"rg\": \"Q4F\", " + \
            " \"orgaoEmissor\": \"\", " + \
            " \"certidaoNascimento\": \"A_0\", " + \
            " \"cnh\": \"are6zhpqB\", " + \
            " \"numero\": \"zH\", " + \
            " \"estudantePpl\": 1, " + \
            " \"serieAno\": 595, " + \
            " \"instituicao\": 8440, " + \
            " \"estudanteAnoPeriodo\": 42 " + \
            " } "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_6.status_code == 500
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Ocorreu um erro."
        assert res_6.json()["errors"]["message"] == "O campo nome é obrigatório. (and 1 more error)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=81&" + 
                    "situacao_matricula=ATIVAS&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_7.json()["data"]) == 81
        assert res_7.json()["data"][0]["cpf"] == "49255179888"
        assert res_7.json()["data"][0]["nome"] == "111"
        assert res_7.json()["data"][0]["nomeSocial"] == "test"
        assert res_7.json()["data"][0]["numeroNIS"] is None
        assert res_7.json()["data"][0]["rg"] == "22307981"
        assert res_7.json()["data"][0]["orgaoEmissor"] == "SSP"
        assert res_7.json()["data"][0]["cpfResponsavel"] == "48405399283"
        assert res_7.json()["data"][0]["nomeMaeEstudante"] == "Valentina Rezende"
        assert res_7.json()["data"][0]["numeroNISResponsavel"] == "64668522654"
        assert res_7.json()["data"][0]["dataNascimento"] == "2024-12-28"
        assert res_7.json()["data"][0]["logradouro"] == "Rua teste"
        assert res_7.json()["data"][0]["bairro"] == "Santa Lucia"
        assert res_7.json()["data"][0]["numero"] == "220"
        assert res_7.json()["data"][0]["cep"] == "57018780"
        assert res_7.json()["data"][0]["municipio"] == 1100940.0
        assert res_7.json()["data"][0]["certidaoNascimento"] == "33333333"
        assert res_7.json()["data"][0]["cnh"] == "3333333"
        assert res_7.json()["data"][0]["uf"] == 11.0
        assert res_7.json()["data"][0]["racaCor"] == 3.0
        assert len(res_7.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_7.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_7.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_7.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert res_7.json()["data"][0]["genero"] == 3.0
        assert res_7.json()["data"][0]["telefone"] == "3333333"
        assert res_7.json()["data"][0]["email"] == "AFTER-TWO@AFTER-TWO.com"
        assert res_7.json()["data"][0]["situacaoCadastroValidado"] == 3.0
        assert len(res_7.json()["data"][0]["matriculas"]) == 1
        assert res_7.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 1733024.0
        assert res_7.json()["data"][0]["matriculas"][0]["codInstituicao"] == 7259.0
        assert res_7.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-09-28"
        assert res_7.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_7.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_7.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == True
        assert res_7.json()["data"][0]["matriculas"][0]["serieAno"] == 74.0
        assert res_7.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Formação inicial continuada ou qualificação profissional (FIC)"
        assert res_7.json()["data"][0]["matriculas"][0]["matriculaRede"] == "Teste Ricardo"
        assert res_7.json()["data"][0]["matriculas"][0]["deletadaEm"] is None
        assert res_7.json()["data"][0]["matriculas"][0]["inep"] == "12005037"
        assert res_7.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_7.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_7.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-09-28"
        assert res_7.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_7.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 0.0
        assert res_7.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] == 1.0
        assert res_7.json()["data"][0]["matriculas"][0]["estudanteIntegral"] == True
        assert res_7.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] == "2024-09-27 00:00:00"
        assert res_7.json()["data"][0]["matriculas"][0]["anoMatricula"] == 2024.0
        assert len(res_7.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_7.json()["data"][1]["cpf"] == "67089268578"
        assert res_7.json()["data"][1]["nome"] == "6cc97vMeCP9KgSI"
        assert res_7.json()["data"][1]["nomeSocial"] == "rRAEEBPUPdYf"
        assert res_7.json()["data"][1]["numeroNIS"] == "30183310316"
        assert res_7.json()["data"][1]["rg"] == "53669048"
        assert res_7.json()["data"][1]["orgaoEmissor"] == "i4tf"
        assert res_7.json()["data"][1]["cpfResponsavel"] == "52008260631"
        assert res_7.json()["data"][1]["nomeMaeEstudante"] == "7aTq92Zi"
        assert res_7.json()["data"][1]["numeroNISResponsavel"] == "11273745692"
        assert res_7.json()["data"][1]["dataNascimento"] == "2008-10-29"
        assert res_7.json()["data"][1]["logradouro"] == "rWjgYPU1P8"
        assert res_7.json()["data"][1]["bairro"] == "G5tQ1ZJN0"
        assert res_7.json()["data"][1]["numero"] == "55"
        assert res_7.json()["data"][1]["cep"] == "19141821"
        assert res_7.json()["data"][1]["municipio"] == 4200705.0
        assert res_7.json()["data"][1]["certidaoNascimento"] == "373271505447"
        assert res_7.json()["data"][1]["cnh"] == "56267273661"
        assert res_7.json()["data"][1]["uf"] == 42.0
        assert res_7.json()["data"][1]["racaCor"] == 0.0
        assert len(res_7.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_7.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_7.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_7.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert res_7.json()["data"][1]["genero"] == 4.0
        assert res_7.json()["data"][1]["telefone"] == "11969630845"
        assert res_7.json()["data"][1]["email"] == "RTT0VngF3Deo0O@example.com"
        assert res_7.json()["data"][1]["situacaoCadastroValidado"] == 4.0
        assert len(res_7.json()["data"][1]["matriculas"]) == 1
        assert res_7.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 1.020298E7
        assert res_7.json()["data"][1]["matriculas"][0]["codInstituicao"] == 81776.0
        assert res_7.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-02-19"
        assert res_7.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_7.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_7.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == True
        assert res_7.json()["data"][1]["matriculas"][0]["serieAno"] == 71.0
        assert res_7.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "EJA - Ensino Médio"
        assert res_7.json()["data"][1]["matriculas"][0]["matriculaRede"] == "jvjvjv1"
        assert res_7.json()["data"][1]["matriculas"][0]["deletadaEm"] is None
        assert res_7.json()["data"][1]["matriculas"][0]["inep"] == "26540720"
        assert res_7.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_7.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_7.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-01-29"
        assert res_7.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] == 1.0
        assert res_7.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 3.0
        assert res_7.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] == 3.0
        assert res_7.json()["data"][1]["matriculas"][0]["estudanteIntegral"] == True
        assert res_7.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_7.json()["data"][1]["matriculas"][0]["anoMatricula"] == 2024.0
        assert len(res_7.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_7.json()["data"][2]["cpf"] == "81601036620"
        assert res_7.json()["data"][2]["nome"] == "7nCcq XDiMfCbaJ0cFs"
        assert res_7.json()["data"][2]["nomeSocial"] == "YXWGpw"
        assert res_7.json()["data"][2]["numeroNIS"] == "34442480673"
        assert res_7.json()["data"][2]["rg"] == "21577661"
        assert res_7.json()["data"][2]["orgaoEmissor"] == "vC2a0H9Lv4"
        assert res_7.json()["data"][2]["cpfResponsavel"] == "85307915250"
        assert res_7.json()["data"][2]["nomeMaeEstudante"] == "uoUPQKkc8iCGVq2wAS1"
        assert res_7.json()["data"][2]["numeroNISResponsavel"] == "27296692788"
        assert res_7.json()["data"][2]["dataNascimento"] == "1998-08-08"
        assert res_7.json()["data"][2]["logradouro"] == "01PKhhqGroyvggLAFUEoOHr3Q0KI"
        assert res_7.json()["data"][2]["bairro"] == "nL4bOxhpEiU2PjnP"
        assert res_7.json()["data"][2]["numero"] == "02"
        assert res_7.json()["data"][2]["cep"] == "76984525"
        assert res_7.json()["data"][2]["municipio"] == 4200705.0
        assert res_7.json()["data"][2]["certidaoNascimento"] == "3679215604607"
        assert res_7.json()["data"][2]["cnh"] == "02342004738"
        assert res_7.json()["data"][2]["uf"] == 42.0
        assert res_7.json()["data"][2]["racaCor"] == 2.0
        assert len(res_7.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_7.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_7.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_7.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert res_7.json()["data"][2]["genero"] == 3.0
        assert res_7.json()["data"][2]["telefone"] == "11949911257"
        assert res_7.json()["data"][2]["email"] == "4mphnZDvXrC@example.com"
        assert res_7.json()["data"][2]["situacaoCadastroValidado"] == 4.0
        assert len(res_7.json()["data"][2]["matriculas"]) == 1
        assert res_7.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 1.0202989E7
        assert res_7.json()["data"][2]["matriculas"][0]["codInstituicao"] == 81776.0
        assert res_7.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "2024-11-01"
        assert res_7.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_7.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_7.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == True
        assert res_7.json()["data"][2]["matriculas"][0]["serieAno"] == 58.0
        assert res_7.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Educação de Jovens e Adultos (EJA) - Fundamental"
        assert res_7.json()["data"][2]["matriculas"][0]["matriculaRede"] == "e2XouiaD2aNA 8"
        assert res_7.json()["data"][2]["matriculas"][0]["deletadaEm"] is None
        assert res_7.json()["data"][2]["matriculas"][0]["inep"] == "26540720"
        assert res_7.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_7.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_7.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] == "2024-10-22"
        assert res_7.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] == 6.0
        assert res_7.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] == 4.0
        assert res_7.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_7.json()["data"][2]["matriculas"][0]["estudanteIntegral"] == False
        assert res_7.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_7.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_7.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 78 elements. This limit of 3 elements can be increased in the configurations
        assert res_7.json()["pagination"]["total"] == 598560.0
        assert res_7.json()["pagination"]["count"] == 81.0
        assert res_7.json()["pagination"]["per_page"] == 81.0
        assert res_7.json()["pagination"]["current_page"] == 1.0
        assert res_7.json()["pagination"]["total_pages"] == 7390.0
        assert res_7.json()["pagination"]["links"]["previous"] is None
        assert res_7.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (500) POST:/v1/estudantes
    # 2 - (404) GET:/v1/estudantes/{cpfNis}
    # 3 - (404) GET:/v1/estudantes/validacao-cadastro
    # 4 - (200) GET:/v1/profissionais
    # Found 5 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_21_with500(self):
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"48064274893\", " + \
            " \"nomeMaeEstudante\": \"Srta. Analu Flores\", " + \
            " \"cpf\": \"56160975439\", " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"aaron.dante.delvalle@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 2 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"32042203838\", " + \
            " \"rg\": \"1158550658152372\", " + \
            " \"cnh\": \"mozMWqwPg\", " + \
            " \"bairro\": \"\", " + \
            " \"numero\": \"3079\", " + \
            " \"cep\": \"50651448\", " + \
            " \"municipio\": 258, " + \
            " \"dataInicioMatricula\": \"2062-08-05\", " + \
            " \"matriculaRede\": \"atualizacao5\", " + \
            " \"instituicao\": 8339, " + \
            " \"formaOrganizacaoTurma\": 2 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 500
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro."
        assert res_0.json()["errors"]["message"] == "O campo nome é obrigatório. (and 1 more error)"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/33722248094",
                    headers=headers)
        
        assert res_1.status_code == 404
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Nenhum estudante encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 404 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?cpf=74732337341",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro inesperado."
        assert res_2.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=980&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_3.json()["data"]) == 0
        assert res_3.json()["pagination"]["total"] == 3.0
        assert res_3.json()["pagination"]["count"] == 0.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 980.0
        assert res_3.json()["pagination"]["total_pages"] == 1.0
        assert res_3.json()["pagination"]["links"]["previous"] == 979.0
        assert res_3.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (422) POST:/v1/profissionais
    # 2 - (200) GET:/v1/estudantes/{cpfNis}
    # 3 - (200) GET:/v1/estudantes/lote/{id}
    # 4 - (400) GET:/v1/estudantes/lote/{id}/erros
    # 5 - (200) PATCH:/v1/estudantes/lote
    # 6 - (404) GET:/v1/profissionais/{cpf}
    # 7 - (422) POST:/v1/profissionais
    # 8 - (500) POST:/v1/estudantes
    # 9 - (401) GET:/v1/profissionais
    # Found 6 potential faults. Type-codes: 100, 200
    # Using 4 examples:
    #   1
    #   123456789
    #   2014
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_22_with500(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"genero\": 4, " + \
            " \"telefone\": \"XtB8bAOsir62_dt\", " + \
            " \"nomeSocial\": \"K4M5REPemK60\", " + \
            " \"sexo\": \"1\", " + \
            " \"logradouro\": \"Rua Avenida Edilson\", " + \
            " \"bairro\": \"São Cruz\", " + \
            " \"municipio\": 4200705, " + \
            " \"inep\": 42003270, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoConclusaoFormacaoAcademica\": 735 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 427, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\" " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\" " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"C4eFnwsN\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"1970-11-07\", " + \
            " \"dataFim\": \"2047-07-19\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/09771640046",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert res_1.json()["data"]["cpf"] == "09771640046"
        assert res_1.json()["data"]["nome"] == "Aaron da Cruz"
        assert res_1.json()["data"]["nomeSocial"] is None
        assert res_1.json()["data"]["numeroNIS"] == "18530754897"
        assert res_1.json()["data"]["rg"] == "6933201407413951"
        assert res_1.json()["data"]["orgaoEmissor"] == "SSP-RJ"
        assert res_1.json()["data"]["cpfResponsavel"] == "38379930436"
        assert res_1.json()["data"]["nomeMaeEstudante"] == "Jasmin Maitê Cervantes"
        assert res_1.json()["data"]["numeroNISResponsavel"] == "79843795217"
        assert res_1.json()["data"]["dataNascimento"] == "2010-03-04"
        assert res_1.json()["data"]["logradouro"] == "Rua Largo Pablo Carrara"
        assert res_1.json()["data"]["bairro"] == "São Gil"
        assert res_1.json()["data"]["numero"] == "2798"
        assert res_1.json()["data"]["cep"] == "62738033"
        assert res_1.json()["data"]["municipio"] == 3304557.0
        assert res_1.json()["data"]["certidaoNascimento"] == "27454985330918167471003665901125"
        assert res_1.json()["data"]["cnh"] is None
        assert res_1.json()["data"]["uf"] == 33.0
        assert res_1.json()["data"]["racaCor"] == 1.0
        assert len(res_1.json()["data"]["tipoDeficiencia"]) == 0
        assert res_1.json()["data"]["genero"] == 3.0
        assert res_1.json()["data"]["telefone"] is None
        assert res_1.json()["data"]["email"] is None
        assert res_1.json()["data"]["situacaoCadastroValidado"] is None
        assert len(res_1.json()["data"]["matriculas"]) == 1
        assert res_1.json()["data"]["matriculas"][0]["codigoMatriculaSgp"] == 7175146.0
        assert res_1.json()["data"]["matriculas"][0]["codInstituicao"] == 186018.0
        assert res_1.json()["data"]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_1.json()["data"]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_1.json()["data"]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_1.json()["data"]["matriculas"][0]["situacaoMatricula"] == True
        assert res_1.json()["data"]["matriculas"][0]["serieAno"] == 25.0
        assert res_1.json()["data"]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_1.json()["data"]["matriculas"][0]["matriculaRede"] is None
        assert res_1.json()["data"]["matriculas"][0]["deletadaEm"] is None
        assert res_1.json()["data"]["matriculas"][0]["inep"] == "41086201"
        assert res_1.json()["data"]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_1.json()["data"]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_1.json()["data"]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_1.json()["data"]["matriculas"][0]["estudanteIntegral"] is None
        assert res_1.json()["data"]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_1.json()["data"]["matriculas"][0]["anoMatricula"] is None
        assert len(res_1.json()["data"]["outrasMatriculas"]) == 0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/41fc6ad5-96d9-4d6d-b298-a816691cce3b?" + 
                    "page=14&" + 
                    "incluir_objetos_processados=false",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["status_processamento"] == "Processado com erro"
        assert res_2.json()["message"] == "Lote recuperado com sucesso. ID: 41fc6ad5-96d9-4d6d-b298-a816691cce3b, para consultar verifique a rota https://api-cmde.api.pedemeia-dev.nees.ufal.br/v1/estudantes/lote/41fc6ad5-96d9-4d6d-b298-a816691cce3b/erros"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/8281445429140975/erros?per_page=10",
                    headers=headers)
        
        assert res_3.status_code == 400
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "O ID fornecido não é um UUID válido. ID: 8281445429140975"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_37_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_38_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_4.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/52365867715",
                    headers=headers)
        
        assert res_5.status_code == 404
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Nenhum profissional de educação encontrado."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 132, " + \
            " \"cpf\": \"72137524058\", " + \
            " \"racaCor\": 42, " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 9, " + \
            " 2, " + \
            " 2 " + \
            " ], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"logradouro\": \"AyDdZML48gcH\", " + \
            " \"inep\": 32049480, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 143 " + \
            " }, " + \
            " {}, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"1969-00-19\", " + \
            " \"dataFim\": \"1955-06-03\", " + \
            " \"cargaHoraria\": -702493960 " + \
            " } "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_6.status_code == 422
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpfResponsavel\": \"06381423188\", " + \
            " \"nomeMaeEstudante\": \"Dr. Simone Toledo\", " + \
            " \"nome\": \"Aaron Delvalle Montenegro\", " + \
            " \"dataNascimento\": \"2009-10-16\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"5\", " + \
            " \"numeroNIS\": \"09128263010\", " + \
            " \"rg\": \"6542868058953058\", " + \
            " \"orgaoEmissor\": \"5kZmbOnJ\", " + \
            " \"cnh\": \"84566125764\", " + \
            " \"cep\": \"jZt5\", " + \
            " \"municipio\": 2408102, " + \
            " \"uf\": 43, " + \
            " \"matriculaRede\": \"atualizacao4\", " + \
            " \"dataInicioPeriodoLetivo\": \"2031-01-14\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 9, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_7.status_code == 500
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Ocorreu um erro."
        assert res_7.json()["errors"]["message"] == "O campo cep deverá ter 8 caracteres. (and 1 more error)"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> Response status 401 not defined for path '/v1/profissionais'.
        headers = {}
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=892",
                    headers=headers)
        
        assert res_8.status_code == 401
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # 1 - (422) POST:/v1/profissionais/lote
    # 2 - (422) POST:/v1/profissionais
    # 3 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 4 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 5 - (404) GET:/v1/estudantes/validacao-cadastro
    # 6 - (500) GET:/v1/estudantes
    # 7 - (500) POST:/v1/estudantes
    # 8 - (201) POST:/v1/profissionais/lote
    # 9 - (500) GET:/v1/profissionais/lote/{id}
    # 10 - (400) GET:/v1/profissionais/lote/{id}/erros
    # Found 9 potential faults. Type-codes: 100, 200
    # Using 3 examples:
    #   1
    #   123456789
    #   44
    @timeout_decorator.timeout(60)
    def test_23_with500(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "JSON inválido."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"R\", " + \
            " \"genero\": 1, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"aaron.dias.gusmao@fake.com\", " + \
            " \"telefone\": \"11924664791\", " + \
            " \"nomeSocial\": \"vYHSe9eaiB\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"logradouro\": \"Rua Largo Benjamin Dominato\", " + \
            " \"numero\": \"66519\", " + \
            " \"inep\": 97, " + \
            " \"matriculaRede\": \"jSowHhs\", " + \
            " \"tipoVinculo\": 0 " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_1.status_code == 422
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #2 ($dataNascimento) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?page=261",
                    headers=headers)
        
        assert res_2.status_code == 404
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro inesperado."
        assert res_2.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/8536446156300331/erros?per_page=222",
                    headers=headers)
        
        assert res_3.status_code == 400
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "O ID fornecido não é um UUID válido. ID: 8536446156300331"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 404 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "page=-1090653217&" + 
                    "cpf=06007079112",
                    headers=headers)
        
        assert res_4.status_code == 404
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "Ocorreu um erro inesperado."
        assert res_4.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=616&" + 
                    "ano_matricula=400&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Ocorreu um erro inesperado."
        assert res_5.json()["errors"]["message"] == "O campo situacao_final é inválido."
        
        # Fault100. HTTP Status 500. POST:/v1/estudantes
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 500 not defined for path '/v1/estudantes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"numeroNISResponsavel\": \"12434379780\", " + \
            " \"nomeMaeEstudante\": \"7pKipe\", " + \
            " \"cpf\": \"37313104227\", " + \
            " \"nome\": \"Aaron Cláudio Sandoval\", " + \
            " \"racaCor\": 4, " + \
            " \"numeroNIS\": \"pce8EV\", " + \
            " \"rg\": \"4665190357191444\", " + \
            " \"certidaoNascimento\": \"88351413928717231504282132013501\", " + \
            " \"cnh\": \"74266683856\", " + \
            " \"numero\": \"\", " + \
            " \"cep\": \"v\", " + \
            " \"municipio\": 3106200, " + \
            " \"estudantePpl\": 2, " + \
            " \"dataInicioMatricula\": \"1981-13-08\", " + \
            " \"serieAno\": 2, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 729, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"estudanteIntegral\": 1 " + \
            " } "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_6.status_code == 500
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Ocorreu um erro."
        assert res_6.json()["errors"]["message"] == "O campo dataNascimento é obrigatório."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nome\": \"Aaron Daniel Lovato Filho\", " + \
            " \"dataNascimento\": \"jwz_\", " + \
            " \"genero\": 6, " + \
            " \"email\": \"aaron.camacho@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 1 " + \
            " ], " + \
            " \"logradouro\": \"Rua Av. Carol\", " + \
            " \"bairro\": \"1Hm0l5ib7\", " + \
            " \"cep\": \"\", " + \
            " \"uf\": 753, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 497 " + \
            " } " + \
            " ], " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataFim\": \"1980-10-09\", " + \
            " \"cargaHoraria\": 791 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"05559378607\", " + \
            " \"genero\": 3, " + \
            " \"racaCor\": 5, " + \
            " \"telefone\": \"11945225241\", " + \
            " \"nomeSocial\": \"vYHSe9eaiB\", " + \
            " \"logradouro\": \"Rua Rua Santiago\", " + \
            " \"bairro\": \"São Ramos\", " + \
            " \"numero\": \"8\", " + \
            " \"inep\": 29162840, " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"1900-07-18\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"aaron.da.rosa.flores.sobrinho@fake.com\", " + \
            " \"telefone\": \"3333333\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 9 " + \
            " ], " + \
            " \"logradouro\": \"Rua Travessa Serra\", " + \
            " \"numero\": \"76\", " + \
            " \"uf\": 360, " + \
            " \"matriculaRede\": \"qyWPbnYsup9Y\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"aaron.benites@fake.com\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 3, " + \
            " 5, " + \
            " 2, " + \
            " 559 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"logradouro\": \"j9d\", " + \
            " \"cep\": \"5A_53m\", " + \
            " \"inep\": 732, " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2078-02-22\", " + \
            " \"dataFim\": \"1903-02-03\" " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"dataNascimento\": \"2005-02-20\", " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"ddoPGTO0HeW2W\", " + \
            " \"telefone\": \"11942878677\", " + \
            " \"nomeSocial\": \"ZISZnaXuDe\", " + \
            " \"logradouro\": \"gCZq4aSj08J1imY\", " + \
            " \"numero\": \"\", " + \
            " \"cep\": \"88002690\", " + \
            " \"inep\": 32060696, " + \
            " \"matriculaRede\": \"7\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2005-08-25\", " + \
            " \"dataFim\": \"1947-06-15\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_7.status_code == 201
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Operação realizada com sucesso"
        
        # Fault100. HTTP Status 500. GET:/v1/profissionais/lote/{id}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/4e987a14-5ce2-49f7-9464-25a86c98fc21?page=891",
                    headers=headers)
        
        assert res_8.status_code == 500
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == False
        assert res_8.json()["message"] == "Não foi possível recuperar o lote. ID fornecido: 4e987a14-5ce2-49f7-9464-25a86c98fc21 Nenhum lote correspondente foi encontrado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_9 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/YCSjTiDG0HKXi4mu/erros",
                    headers=headers)
        
        assert res_9.status_code == 400
        assert "application/json" in res_9.headers["content-type"]
        assert res_9.json()["success"] == False
        assert res_9.json()["message"] == "O ID fornecido não é um UUID válido. ID: YCSjTiDG0HKXi4mu"
    
    
    # Calls:
    # 1 - (200) GET:/v1/profissionais
    # 2 - (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # 3 - (500) GET:/v1/estudantes
    # 4 - (201) POST:/v1/estudantes/lote
    # 5 - (200) GET:/v1/estudantes/inep/{inep}
    # 6 - (200) GET:/v1/profissionais
    # 7 - (500) GET:/v1/estudantes/inep/{inep}
    # 8 - (201) POST:/v1/profissionais/lote
    # Found 12 potential faults. Type-codes: 100, 200
    # Using 4 examples:
    #   1
    #   2010
    #   5
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_24_with500(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?per_page=15",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 3
        assert res_0.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][0]["cpf"] == "43839402000"
        assert res_0.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][0]["genero"] == 1.0
        assert res_0.json()["data"][0]["racaCor"] == 2.0
        assert res_0.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][0]["telefone"] is None
        assert res_0.json()["data"][0]["nomeSocial"] is None
        assert res_0.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][0]["bairro"] == "Centro"
        assert res_0.json()["data"][0]["numero"] == "123"
        assert res_0.json()["data"][0]["cep"] == "01001000"
        assert res_0.json()["data"][0]["municipio"] == 2700409.0
        assert res_0.json()["data"][0]["uf"] == 27.0
        assert res_0.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][0]["situacaoAtiva"] == True
        assert res_0.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][0]["dataFim"] is None
        assert res_0.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][0]["matriculaRede"] == "56789"
        assert res_0.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][0]["inep"] == "27014088"
        assert len(res_0.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][1]["cpf"] == "33722248094"
        assert res_0.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][1]["genero"] == 1.0
        assert res_0.json()["data"][1]["racaCor"] == 2.0
        assert res_0.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][1]["telefone"] is None
        assert res_0.json()["data"][1]["nomeSocial"] is None
        assert res_0.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][1]["bairro"] == "Centro"
        assert res_0.json()["data"][1]["numero"] == "123"
        assert res_0.json()["data"][1]["cep"] == "01001000"
        assert res_0.json()["data"][1]["municipio"] == 2700409.0
        assert res_0.json()["data"][1]["uf"] == 27.0
        assert res_0.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][1]["situacaoAtiva"] == True
        assert res_0.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][1]["dataFim"] is None
        assert res_0.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][1]["matriculaRede"] == "56789"
        assert res_0.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][1]["inep"] == "27014088"
        assert len(res_0.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_0.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_0.json()["data"][2]["cpf"] == "31863200037"
        assert res_0.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_0.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_0.json()["data"][2]["genero"] == 1.0
        assert res_0.json()["data"][2]["racaCor"] == 2.0
        assert res_0.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_0.json()["data"][2]["telefone"] is None
        assert res_0.json()["data"][2]["nomeSocial"] is None
        assert res_0.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_0.json()["data"][2]["bairro"] == "Centro"
        assert res_0.json()["data"][2]["numero"] == "123"
        assert res_0.json()["data"][2]["cep"] == "01001000"
        assert res_0.json()["data"][2]["municipio"] == 2700409.0
        assert res_0.json()["data"][2]["uf"] == 27.0
        assert res_0.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_0.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_0.json()["data"][2]["situacaoAtiva"] == True
        assert res_0.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_0.json()["data"][2]["dataFim"] is None
        assert res_0.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_0.json()["data"][2]["matriculaRede"] == "56789"
        assert res_0.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_0.json()["data"][2]["inep"] == "27014088"
        assert len(res_0.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_0.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_0.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_0.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_0.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_0.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_0.json()["pagination"]["total"] == 3.0
        assert res_0.json()["pagination"]["count"] == 3.0
        assert res_0.json()["pagination"]["per_page"] == 15.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "cpfAtual=26421984720&" + 
                    "cpfNovo=81601036620",
                    headers=headers)
        
        assert res_1.status_code == 404
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Ocorreu um erro inesperado."
        assert res_1.json()["errors"]["message"] == "Nenhum dado encontrado"
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=333&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "ano_matricula=39&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_2.status_code == 500
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Ocorreu um erro."
        assert res_2.json()["errors"]["message"] == "Situação de matricula informada incorreta, possíveis valores: ATIVAS,INATIVAS"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Sr. Ana Laura Casqueira\", " + \
            " \"cpf\": \"21075139104\", " + \
            " \"genero\": 2, " + \
            " \"email\": \"alan.romero.sepulveda.filho@fake.com\", " + \
            " \"certidaoNascimento\": \"f4GB2AEK\", " + \
            " \"cnh\": \"10142015477\", " + \
            " \"logradouro\": \"vLkLeE85\", " + \
            " \"bairro\": \"KnqLmTs0IYLp\", " + \
            " \"cep\": \"E_fdxRg\", " + \
            " \"uf\": 35, " + \
            " \"estudantePpl\": 2, " + \
            " \"serieAno\": 480, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 7, " + \
            " \"estudanteAnoPeriodo\": 3, " + \
            " \"anoMatricula\": 2024 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 201
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/12033308?" + 
                    "per_page=15&" + 
                    "ano_matricula=2024",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_4.json()["data"]) == 15
        assert res_4.json()["data"][0]["cpf"] == "19122329790"
        assert res_4.json()["data"][0]["nome"] == "Aaron Kléber Souza Neto"
        assert res_4.json()["data"][0]["nomeSocial"] is None
        assert res_4.json()["data"][0]["numeroNIS"] == "68674777416"
        assert res_4.json()["data"][0]["rg"] == "8034593484414149"
        assert res_4.json()["data"][0]["orgaoEmissor"] == "SSP-AM"
        assert res_4.json()["data"][0]["cpfResponsavel"] == "99221382710"
        assert res_4.json()["data"][0]["nomeMaeEstudante"] == "Emily Silvana Espinoza"
        assert res_4.json()["data"][0]["numeroNISResponsavel"] == "06092486559"
        assert res_4.json()["data"][0]["dataNascimento"] == "2007-12-23"
        assert res_4.json()["data"][0]["logradouro"] == "Rua R. Samuel Faro"
        assert res_4.json()["data"][0]["bairro"] == "São Furtado"
        assert res_4.json()["data"][0]["numero"] == "5619"
        assert res_4.json()["data"][0]["cep"] == "47280321"
        assert res_4.json()["data"][0]["municipio"] == 1302603.0
        assert res_4.json()["data"][0]["certidaoNascimento"] == "82899924027907455187653999530514"
        assert res_4.json()["data"][0]["cnh"] is None
        assert res_4.json()["data"][0]["uf"] == 13.0
        assert res_4.json()["data"][0]["racaCor"] == 0.0
        assert len(res_4.json()["data"][0]["tipoDeficiencia"]) == 0
        assert res_4.json()["data"][0]["genero"] == 2.0
        assert res_4.json()["data"][0]["telefone"] is None
        assert res_4.json()["data"][0]["email"] == "aaron.kleber.souza.neto@fake.com"
        assert res_4.json()["data"][0]["situacaoCadastroValidado"] is None
        assert len(res_4.json()["data"][0]["matriculas"]) == 1
        assert res_4.json()["data"][0]["matriculas"][0]["codigoMatriculaSgp"] == 8668858.0
        assert res_4.json()["data"][0]["matriculas"][0]["codInstituicao"] == 8443.0
        assert res_4.json()["data"][0]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_4.json()["data"][0]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_4.json()["data"][0]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["situacaoMatricula"] == True
        assert res_4.json()["data"][0]["matriculas"][0]["serieAno"] == 25.0
        assert res_4.json()["data"][0]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_4.json()["data"][0]["matriculas"][0]["matriculaRede"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["deletadaEm"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["inep"] == "12033308"
        assert res_4.json()["data"][0]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["estudanteIntegral"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_4.json()["data"][0]["matriculas"][0]["anoMatricula"] is None
        assert len(res_4.json()["data"][0]["outrasMatriculas"]) == 0
        assert res_4.json()["data"][1]["cpf"] == "26791417331"
        assert res_4.json()["data"][1]["nome"] == "Abgail Rosa"
        assert res_4.json()["data"][1]["nomeSocial"] is None
        assert res_4.json()["data"][1]["numeroNIS"] == "71788025120"
        assert res_4.json()["data"][1]["rg"] == "5696150630402113"
        assert res_4.json()["data"][1]["orgaoEmissor"] == "SSP-AM"
        assert res_4.json()["data"][1]["cpfResponsavel"] == "08842207373"
        assert res_4.json()["data"][1]["nomeMaeEstudante"] == "Carolina Marés"
        assert res_4.json()["data"][1]["numeroNISResponsavel"] == "51713974375"
        assert res_4.json()["data"][1]["dataNascimento"] == "2010-02-20"
        assert res_4.json()["data"][1]["logradouro"] == "Rua Travessa Artur"
        assert res_4.json()["data"][1]["bairro"] == "São Lozano"
        assert res_4.json()["data"][1]["numero"] == "1921"
        assert res_4.json()["data"][1]["cep"] == "89485858"
        assert res_4.json()["data"][1]["municipio"] == 1302603.0
        assert res_4.json()["data"][1]["certidaoNascimento"] == "11282376542144501265782253048031"
        assert res_4.json()["data"][1]["cnh"] is None
        assert res_4.json()["data"][1]["uf"] == 13.0
        assert res_4.json()["data"][1]["racaCor"] == 3.0
        assert len(res_4.json()["data"][1]["tipoDeficiencia"]) == 0
        assert res_4.json()["data"][1]["genero"] == 2.0
        assert res_4.json()["data"][1]["telefone"] is None
        assert res_4.json()["data"][1]["email"] == "abgail.rosa@fake.com"
        assert res_4.json()["data"][1]["situacaoCadastroValidado"] is None
        assert len(res_4.json()["data"][1]["matriculas"]) == 1
        assert res_4.json()["data"][1]["matriculas"][0]["codigoMatriculaSgp"] == 8668928.0
        assert res_4.json()["data"][1]["matriculas"][0]["codInstituicao"] == 8443.0
        assert res_4.json()["data"][1]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_4.json()["data"][1]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_4.json()["data"][1]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["situacaoMatricula"] == True
        assert res_4.json()["data"][1]["matriculas"][0]["serieAno"] == 27.0
        assert res_4.json()["data"][1]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_4.json()["data"][1]["matriculas"][0]["matriculaRede"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["deletadaEm"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["inep"] == "12033308"
        assert res_4.json()["data"][1]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["estudanteIntegral"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_4.json()["data"][1]["matriculas"][0]["anoMatricula"] is None
        assert len(res_4.json()["data"][1]["outrasMatriculas"]) == 0
        assert res_4.json()["data"][2]["cpf"] == "45745917490"
        assert res_4.json()["data"][2]["nome"] == "Adriana Salas Franco Neto"
        assert res_4.json()["data"][2]["nomeSocial"] is None
        assert res_4.json()["data"][2]["numeroNIS"] == "03665599840"
        assert res_4.json()["data"][2]["rg"] == "2504800615432132"
        assert res_4.json()["data"][2]["orgaoEmissor"] == "SSP-AM"
        assert res_4.json()["data"][2]["cpfResponsavel"] == "42390191681"
        assert res_4.json()["data"][2]["nomeMaeEstudante"] == "Juliana Aurora Galhardo"
        assert res_4.json()["data"][2]["numeroNISResponsavel"] == "95648373483"
        assert res_4.json()["data"][2]["dataNascimento"] == "2008-02-05"
        assert res_4.json()["data"][2]["logradouro"] == "Rua R. Emílio"
        assert res_4.json()["data"][2]["bairro"] == "São Gonçalves"
        assert res_4.json()["data"][2]["numero"] == "67435"
        assert res_4.json()["data"][2]["cep"] == "43522450"
        assert res_4.json()["data"][2]["municipio"] == 1302603.0
        assert res_4.json()["data"][2]["certidaoNascimento"] == "01914106509934924305780429596774"
        assert res_4.json()["data"][2]["cnh"] is None
        assert res_4.json()["data"][2]["uf"] == 13.0
        assert res_4.json()["data"][2]["racaCor"] == 1.0
        assert len(res_4.json()["data"][2]["tipoDeficiencia"]) == 0
        assert res_4.json()["data"][2]["genero"] == 4.0
        assert res_4.json()["data"][2]["telefone"] is None
        assert res_4.json()["data"][2]["email"] == "adriana.salas.franco.neto@fake.com"
        assert res_4.json()["data"][2]["situacaoCadastroValidado"] is None
        assert len(res_4.json()["data"][2]["matriculas"]) == 1
        assert res_4.json()["data"][2]["matriculas"][0]["codigoMatriculaSgp"] == 8668910.0
        assert res_4.json()["data"][2]["matriculas"][0]["codInstituicao"] == 8443.0
        assert res_4.json()["data"][2]["matriculas"][0]["dataInicioMatricula"] == "2024-01-01"
        assert res_4.json()["data"][2]["matriculas"][0]["estudantePpl"] == 0.0
        assert res_4.json()["data"][2]["matriculas"][0]["dataFimOuAprovacao"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["situacaoMatricula"] == True
        assert res_4.json()["data"][2]["matriculas"][0]["serieAno"] == 25.0
        assert res_4.json()["data"][2]["matriculas"][0]["etapaEnsinoConsolidado"] == "Ensino Médio"
        assert res_4.json()["data"][2]["matriculas"][0]["matriculaRede"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["deletadaEm"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["inep"] == "12033308"
        assert res_4.json()["data"][2]["matriculas"][0]["estudanteSituacaoFinal"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["dataConclusaoEnsinoMedio"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["dataInicioPeriodoLetivo"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["formaOrganizacaoTurma"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["turmaOrganizacaoQuantidadeTotal"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["estudanteAnoPeriodo"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["estudanteIntegral"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["dataAtivacaoMatricula"] is None
        assert res_4.json()["data"][2]["matriculas"][0]["anoMatricula"] is None
        assert len(res_4.json()["data"][2]["outrasMatriculas"]) == 0
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_4.json()["pagination"]["total"] == 500.0
        assert res_4.json()["pagination"]["count"] == 15.0
        assert res_4.json()["pagination"]["per_page"] == 15.0
        assert res_4.json()["pagination"]["current_page"] == 1.0
        assert res_4.json()["pagination"]["total_pages"] == 34.0
        assert res_4.json()["pagination"]["links"]["previous"] is None
        assert res_4.json()["pagination"]["links"]["next"] == 2.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=947",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_5.json()["data"]) == 0
        assert res_5.json()["pagination"]["total"] == 3.0
        assert res_5.json()["pagination"]["count"] == 0.0
        assert res_5.json()["pagination"]["per_page"] == 10.0
        assert res_5.json()["pagination"]["current_page"] == 947.0
        assert res_5.json()["pagination"]["total_pages"] == 1.0
        assert res_5.json()["pagination"]["links"]["previous"] == 946.0
        assert res_5.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes/inep/{inep}
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/29193656?situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_6.status_code == 500
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "Não foi possível obter os estudantes."
        assert res_6.json()["errors"]["message"] == "O campo ano_matricula é obrigatório quando o campo situacao_final é informado."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"dataNascimento\": \"2006-08-07\", " + \
            " \"genero\": 8, " + \
            " \"email\": \"alan.rodolfo.santacruz.jr@fake.com\", " + \
            " \"nomeSocial\": \"jdEYfjYYG W\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 69, " + \
            " 755 " + \
            " ], " + \
            " \"sexo\": \"1\", " + \
            " \"bairro\": \"\", " + \
            " \"cep\": \"47082482\", " + \
            " \"municipio\": 4200705, " + \
            " \"uf\": 42, " + \
            " \"inep\": 198, " + \
            " \"formacoesAcademicas\": [], " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"dataNascimento\": \"\", " + \
            " \"racaCor\": 42, " + \
            " \"telefone\": \"ogSZgOzR9Tr0uo\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"municipio\": 1501105, " + \
            " \"uf\": 35, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2042-09-12\" " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"86141562434\", " + \
            " \"nome\": \"Alan Rocha Godói\", " + \
            " \"dataNascimento\": \"1991-01-14\", " + \
            " \"racaCor\": 0, " + \
            " \"email\": \"aaron.kleber.souza.neto@fake.com\", " + \
            " \"nomeSocial\": \"60Kfw\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"logradouro\": \"2I6g\", " + \
            " \"bairro\": \"R1ZNX73\", " + \
            " \"numero\": \"406\", " + \
            " \"municipio\": 1100940, " + \
            " \"uf\": 33, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 56, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"dataIngresso\": \"1920-08-22\", " + \
            " \"dataFim\": \"2046-05-07\", " + \
            " \"cargaHoraria\": 537 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"62826758551\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 2, " + \
            " \"telefone\": \"11901377051\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 10, " + \
            " 10, " + \
            " 9 " + \
            " ], " + \
            " \"logradouro\": \"Rua Largo Christopher\", " + \
            " \"cep\": \"30976605\", " + \
            " \"uf\": 43, " + \
            " \"inep\": \"X\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"xwMoaf3Z1\", " + \
            " \"dataIngresso\": \"1947-13-32\", " + \
            " \"dataFim\": \"1947-08-05\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"40426129709\", " + \
            " \"nome\": \"Aaron Lira Sobrinho\", " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"aaron.kauan.marinho.jr@fake.com\", " + \
            " \"nomeSocial\": \"pCifpRBMCpY\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 5, " + \
            " 1 " + \
            " ], " + \
            " \"logradouro\": \"VhJxy\", " + \
            " \"numero\": \"7829\", " + \
            " \"municipio\": 3304557, " + \
            " \"uf\": 33, " + \
            " \"inep\": 29481643, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"dataIngresso\": \"2038-01-11\", " + \
            " \"dataFim\": \"2046-11-13\", " + \
            " \"cargaHoraria\": 630 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_7.status_code == 201
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Operação realizada com sucesso"
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (200) GET:/v1/profissionais
    # 3 - (400) GET:/v1/profissionais/lote/{id}/erros
    # 4 - (200) GET:/v1/profissionais/lote
    # 5 - (200) GET:/v1/estudantes
    # 6 - (500) GET:/v1/estudantes
    # 7 - (200) GET:/v1/profissionais
    # 8 - (401) GET:/v1/profissionais
    # 9 - (200) GET:/v1/estudantes/lote/{id}
    # Found 24 potential faults. Type-codes: 100, 200
    @timeout_decorator.timeout(60)
    def test_25_with500(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"44700098066\", " + \
            " \"nomeMaeEstudante\": \"FLLkiefny01TEGIWzGt\", " + \
            " \"nome\": \"Alan Rocha Godói\", " + \
            " \"genero\": 0, " + \
            " \"email\": \"aaron.kevin.da.silva@fake.com\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"nomeSocial\": \"RsOLwyuuUB3\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 358, " + \
            " 3 " + \
            " ], " + \
            " \"numeroNIS\": \"81575709959\", " + \
            " \"rg\": \"7720871072392495\", " + \
            " \"bairro\": \"São Toledo\", " + \
            " \"municipio\": 121, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"1929-01-13\", " + \
            " \"formaOrganizacaoTurma\": 321, " + \
            " \"estudanteIntegral\": 1 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"27296692788\", " + \
            " \"nomeMaeEstudante\": \"LpRVsT6TgFbR4Mw_\", " + \
            " \"nome\": \"IpTzUVagbaw5Wn\", " + \
            " \"genero\": 8, " + \
            " \"email\": \"aaron.abreu.davila@fake.com\", " + \
            " \"telefone\": \"\", " + \
            " \"nomeSocial\": \"vYHSe9eaiB\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 476, " + \
            " 91 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"iA6QV8\", " + \
            " \"rg\": \"cqX\", " + \
            " \"orgaoEmissor\": \"fKWyVlz\", " + \
            " \"certidaoNascimento\": \"Nrg\", " + \
            " \"bairro\": \"TckS4CPgljfJ2IsC8sYh\", " + \
            " \"numero\": \"2\", " + \
            " \"municipio\": 3550308, " + \
            " \"uf\": 35, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"1939-01-13\", " + \
            " \"matriculaRede\": \"7\", " + \
            " \"dataInicioPeriodoLetivo\": \"1934-10-14\", " + \
            " \"formaOrganizacaoTurma\": 566, " + \
            " \"estudanteAnoPeriodo\": 3, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?" + 
                    "page=301&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_1.json()["data"]) == 0
        assert res_1.json()["pagination"]["total"] == 3.0
        assert res_1.json()["pagination"]["count"] == 0.0
        assert res_1.json()["pagination"]["per_page"] == 10.0
        assert res_1.json()["pagination"]["current_page"] == 301.0
        assert res_1.json()["pagination"]["total_pages"] == 1.0
        assert res_1.json()["pagination"]["links"]["previous"] == 300.0
        assert res_1.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/5696150630402113/erros?per_page=817",
                    headers=headers)
        
        assert res_2.status_code == 400
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "O ID fornecido não é um UUID válido. ID: 5696150630402113"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-03 01:23:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-03 01:18:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-03 01:17:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-03 01:15:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-03 01:15:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-03 01:14:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-03 01:10:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-03 01:08:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-03 01:07:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-03 01:05:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?page=162",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_3.json()["data"]) == 10
        assert res_3.json()["data"][0]["dataEnvio"] == "2025-05-03 01:23:40"
        assert res_3.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][1]["dataEnvio"] == "2025-05-03 01:18:58"
        assert res_3.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_3.json()["data"][2]["dataEnvio"] == "2025-05-03 01:17:55"
        assert res_3.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_3.json()["pagination"]["total"] == 2739.0
        assert res_3.json()["pagination"]["count"] == 10.0
        assert res_3.json()["pagination"]["per_page"] == 10.0
        assert res_3.json()["pagination"]["current_page"] == 162.0
        assert res_3.json()["pagination"]["total_pages"] == 274.0
        assert res_3.json()["pagination"]["links"]["previous"] == 161.0
        assert res_3.json()["pagination"]["links"]["next"] == 163.0
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_4 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=688&" + 
                    "per_page=625&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=REPROVADAS",
                    headers=headers)
        
        assert res_4.status_code == 200
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_4.json()["data"]) == 0
        assert res_4.json()["pagination"]["total"] == 12.0
        assert res_4.json()["pagination"]["count"] == 0.0
        assert res_4.json()["pagination"]["per_page"] == 625.0
        assert res_4.json()["pagination"]["current_page"] == 688.0
        assert res_4.json()["pagination"]["total_pages"] == 1.0
        assert res_4.json()["pagination"]["links"]["previous"] == 687.0
        assert res_4.json()["pagination"]["links"]["next"] is None
        
        # Fault100. HTTP Status 500. GET:/v1/estudantes
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "per_page=10&" + 
                    "situacao_matricula=INATIVAS&" + 
                    "ano_matricula=2024&" + 
                    "situacao_final=EVOMASTER",
                    headers=headers)
        
        assert res_5.status_code == 500
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == False
        assert res_5.json()["message"] == "Ocorreu um erro inesperado."
        assert res_5.json()["errors"]["message"] == "O campo situacao_final é inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_6.json()["data"]) == 3
        assert res_6.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_6.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_6.json()["data"][0]["cpf"] == "43839402000"
        assert res_6.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_6.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_6.json()["data"][0]["genero"] == 1.0
        assert res_6.json()["data"][0]["racaCor"] == 2.0
        assert res_6.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_6.json()["data"][0]["telefone"] is None
        assert res_6.json()["data"][0]["nomeSocial"] is None
        assert res_6.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_6.json()["data"][0]["bairro"] == "Centro"
        assert res_6.json()["data"][0]["numero"] == "123"
        assert res_6.json()["data"][0]["cep"] == "01001000"
        assert res_6.json()["data"][0]["municipio"] == 2700409.0
        assert res_6.json()["data"][0]["uf"] == 27.0
        assert res_6.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_6.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_6.json()["data"][0]["situacaoAtiva"] == True
        assert res_6.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_6.json()["data"][0]["dataFim"] is None
        assert res_6.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_6.json()["data"][0]["matriculaRede"] == "56789"
        assert res_6.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_6.json()["data"][0]["inep"] == "27014088"
        assert len(res_6.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_6.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_6.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_6.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_6.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_6.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_6.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_6.json()["data"][1]["cpf"] == "33722248094"
        assert res_6.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_6.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_6.json()["data"][1]["genero"] == 1.0
        assert res_6.json()["data"][1]["racaCor"] == 2.0
        assert res_6.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_6.json()["data"][1]["telefone"] is None
        assert res_6.json()["data"][1]["nomeSocial"] is None
        assert res_6.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_6.json()["data"][1]["bairro"] == "Centro"
        assert res_6.json()["data"][1]["numero"] == "123"
        assert res_6.json()["data"][1]["cep"] == "01001000"
        assert res_6.json()["data"][1]["municipio"] == 2700409.0
        assert res_6.json()["data"][1]["uf"] == 27.0
        assert res_6.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_6.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_6.json()["data"][1]["situacaoAtiva"] == True
        assert res_6.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_6.json()["data"][1]["dataFim"] is None
        assert res_6.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_6.json()["data"][1]["matriculaRede"] == "56789"
        assert res_6.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_6.json()["data"][1]["inep"] == "27014088"
        assert len(res_6.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_6.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_6.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_6.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_6.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_6.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_6.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_6.json()["data"][2]["cpf"] == "31863200037"
        assert res_6.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_6.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_6.json()["data"][2]["genero"] == 1.0
        assert res_6.json()["data"][2]["racaCor"] == 2.0
        assert res_6.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_6.json()["data"][2]["telefone"] is None
        assert res_6.json()["data"][2]["nomeSocial"] is None
        assert res_6.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_6.json()["data"][2]["bairro"] == "Centro"
        assert res_6.json()["data"][2]["numero"] == "123"
        assert res_6.json()["data"][2]["cep"] == "01001000"
        assert res_6.json()["data"][2]["municipio"] == 2700409.0
        assert res_6.json()["data"][2]["uf"] == 27.0
        assert res_6.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_6.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_6.json()["data"][2]["situacaoAtiva"] == True
        assert res_6.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_6.json()["data"][2]["dataFim"] is None
        assert res_6.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_6.json()["data"][2]["matriculaRede"] == "56789"
        assert res_6.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_6.json()["data"][2]["inep"] == "27014088"
        assert len(res_6.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_6.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_6.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_6.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_6.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_6.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_6.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_6.json()["pagination"]["total"] == 3.0
        assert res_6.json()["pagination"]["count"] == 3.0
        assert res_6.json()["pagination"]["per_page"] == 10.0
        assert res_6.json()["pagination"]["current_page"] == 1.0
        assert res_6.json()["pagination"]["total_pages"] == 1.0
        assert res_6.json()["pagination"]["links"]["previous"] is None
        assert res_6.json()["pagination"]["links"]["next"] is None
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> Response status 401 not defined for path '/v1/profissionais'.
        headers = {}
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers)
        
        assert res_7.status_code == 401
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "Não autorizado"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_8 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/eec36ead-b9e8-4834-93d6-25fb0dd4d713?" + 
                    "per_page=222&" + 
                    "incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_8.status_code == 200
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == True
        assert res_8.json()["status_processamento"] == "Enviado"
        assert res_8.json()["message"] == "Lote recuperado com sucesso. ID: eec36ead-b9e8-4834-93d6-25fb0dd4d713"
    
    
    # Calls:
    # (200) GET:/v1/profissionais/inep/{inep}
    # Found 2 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_26(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/eyqf3?page=976",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 0.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 976.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] == 975.0
        assert res_0.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # (200) GET:/v1/profissionais
    # Found 2 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_27(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=149",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 3.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 149.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] == 148.0
        assert res_0.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # (200) GET:/v1/estudantes/lote
    # Found 3 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_28(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?per_page=222",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_0.json()["data"]) == 222
        assert res_0.json()["data"][0]["dataEnvio"] == "2025-05-04 02:57:43"
        assert res_0.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][1]["dataEnvio"] == "2025-05-04 02:57:39"
        assert res_0.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][2]["dataEnvio"] == "2025-05-04 02:57:35"
        assert res_0.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 219 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 9840.0
        assert res_0.json()["pagination"]["count"] == 222.0
        assert res_0.json()["pagination"]["per_page"] == 222.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 45.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (422) POST:/v1/profissionais
    # 2 - (422) POST:/v1/profissionais
    # 3 - (422) POST:/v1/profissionais
    # 4 - (200) GET:/v1/profissionais
    # Found 5 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_29(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoDeficiencia\": [], " + \
            " \"logradouro\": \"Rua das Flores\", " + \
            " \"numero\": \"78990\", " + \
            " \"municipio\": 423, " + \
            " \"uf\": 24, " + \
            " \"inep\": \"12005037\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 378, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"1969-02-12\", " + \
            " \"cargaHoraria\": -1167241583 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nome\": \"s8Q6FWBgQSpwdoVD\", " + \
            " \"dataNascimento\": \"dzuKhy36rtVo\", " + \
            " \"racaCor\": 4, " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"\", " + \
            " \"bairro\": \"nL4bOxhpEiU2PjnP\", " + \
            " \"numero\": \"41\", " + \
            " \"cep\": \"54124789\", " + \
            " \"municipio\": 3550308, " + \
            " \"inep\": \"udoS7gVe32uxFm0y\", " + \
            " \"matriculaRede\": \"7\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2059-12-00\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_1.status_code == 422
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #10 ($tipoDeficiencia) must be of type array, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpf\": \"01506679145\", " + \
            " \"nome\": \"Alan Rodrigues Jr.\", " + \
            " \"genero\": 1, " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 3 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"logradouro\": \"Rua R. Cortês\", " + \
            " \"bairro\": \"G5tQ1ZJN0\", " + \
            " \"numero\": \"1\", " + \
            " \"cep\": \"30976605\", " + \
            " \"inep\": \"Flibz\", " + \
            " \"dataIngresso\": \"1910-07-05\", " + \
            " \"dataFim\": \"2015-01-00\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_2.status_code == 422
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #2 ($dataNascimento) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 5)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_3 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?per_page=81",
                    headers=headers)
        
        assert res_3.status_code == 200
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Dados obtidos com sucesso."
        assert len(res_3.json()["data"]) == 3
        assert res_3.json()["data"][0]["tipoEnsinoMedio"] == 2.0
        assert res_3.json()["data"][0]["nivelEscolaridade"] == 10.0
        assert res_3.json()["data"][0]["cpf"] == "43839402000"
        assert res_3.json()["data"][0]["nome"] == "João da Silva 2"
        assert res_3.json()["data"][0]["dataNascimento"] == "1985-06-15"
        assert res_3.json()["data"][0]["genero"] == 1.0
        assert res_3.json()["data"][0]["racaCor"] == 2.0
        assert res_3.json()["data"][0]["email"] == "joao.silva@email.com"
        assert res_3.json()["data"][0]["telefone"] is None
        assert res_3.json()["data"][0]["nomeSocial"] is None
        assert res_3.json()["data"][0]["logradouro"] == "Rua das Flores"
        assert res_3.json()["data"][0]["bairro"] == "Centro"
        assert res_3.json()["data"][0]["numero"] == "123"
        assert res_3.json()["data"][0]["cep"] == "01001000"
        assert res_3.json()["data"][0]["municipio"] == 2700409.0
        assert res_3.json()["data"][0]["uf"] == 27.0
        assert res_3.json()["data"][0]["codigoInstituicao"] == 6.0
        assert res_3.json()["data"][0]["cargaHoraria"] == 40.0
        assert res_3.json()["data"][0]["situacaoAtiva"] == True
        assert res_3.json()["data"][0]["dataIngresso"] == "2015-02-10"
        assert res_3.json()["data"][0]["dataFim"] is None
        assert res_3.json()["data"][0]["codigoFuncao"] == 2.0
        assert res_3.json()["data"][0]["matriculaRede"] == "56789"
        assert res_3.json()["data"][0]["tipoVinculo"] == 0.0
        assert res_3.json()["data"][0]["inep"] == "27014088"
        assert len(res_3.json()["data"][0]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][0]["tipoDeficiencia"][0] == 1.0
        assert res_3.json()["data"][0]["tipoDeficiencia"][1] == 2.0
        assert res_3.json()["data"][0]["tipoDeficiencia"][2] == 3.0
        assert len(res_3.json()["data"][0]["formacoesAcademicas"]) == 2
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["principal"] is None
        assert res_3.json()["data"][0]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["principal"] is None
        assert res_3.json()["data"][0]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][1]["tipoEnsinoMedio"] == 2.0
        assert res_3.json()["data"][1]["nivelEscolaridade"] == 10.0
        assert res_3.json()["data"][1]["cpf"] == "33722248094"
        assert res_3.json()["data"][1]["nome"] == "João da Silva 2"
        assert res_3.json()["data"][1]["dataNascimento"] == "1985-06-15"
        assert res_3.json()["data"][1]["genero"] == 1.0
        assert res_3.json()["data"][1]["racaCor"] == 2.0
        assert res_3.json()["data"][1]["email"] == "joao.silva@email.com"
        assert res_3.json()["data"][1]["telefone"] is None
        assert res_3.json()["data"][1]["nomeSocial"] is None
        assert res_3.json()["data"][1]["logradouro"] == "Rua das Flores"
        assert res_3.json()["data"][1]["bairro"] == "Centro"
        assert res_3.json()["data"][1]["numero"] == "123"
        assert res_3.json()["data"][1]["cep"] == "01001000"
        assert res_3.json()["data"][1]["municipio"] == 2700409.0
        assert res_3.json()["data"][1]["uf"] == 27.0
        assert res_3.json()["data"][1]["codigoInstituicao"] == 6.0
        assert res_3.json()["data"][1]["cargaHoraria"] == 40.0
        assert res_3.json()["data"][1]["situacaoAtiva"] == True
        assert res_3.json()["data"][1]["dataIngresso"] == "2015-02-10"
        assert res_3.json()["data"][1]["dataFim"] is None
        assert res_3.json()["data"][1]["codigoFuncao"] == 2.0
        assert res_3.json()["data"][1]["matriculaRede"] == "56789"
        assert res_3.json()["data"][1]["tipoVinculo"] == 0.0
        assert res_3.json()["data"][1]["inep"] == "27014088"
        assert len(res_3.json()["data"][1]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][1]["tipoDeficiencia"][0] == 1.0
        assert res_3.json()["data"][1]["tipoDeficiencia"][1] == 2.0
        assert res_3.json()["data"][1]["tipoDeficiencia"][2] == 3.0
        assert len(res_3.json()["data"][1]["formacoesAcademicas"]) == 2
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["principal"] is None
        assert res_3.json()["data"][1]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["principal"] is None
        assert res_3.json()["data"][1]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][2]["tipoEnsinoMedio"] == 2.0
        assert res_3.json()["data"][2]["nivelEscolaridade"] == 10.0
        assert res_3.json()["data"][2]["cpf"] == "31863200037"
        assert res_3.json()["data"][2]["nome"] == "João da Silva 2"
        assert res_3.json()["data"][2]["dataNascimento"] == "1985-06-15"
        assert res_3.json()["data"][2]["genero"] == 1.0
        assert res_3.json()["data"][2]["racaCor"] == 2.0
        assert res_3.json()["data"][2]["email"] == "joao.silva@email.com"
        assert res_3.json()["data"][2]["telefone"] is None
        assert res_3.json()["data"][2]["nomeSocial"] is None
        assert res_3.json()["data"][2]["logradouro"] == "Rua das Flores"
        assert res_3.json()["data"][2]["bairro"] == "Centro"
        assert res_3.json()["data"][2]["numero"] == "123"
        assert res_3.json()["data"][2]["cep"] == "01001000"
        assert res_3.json()["data"][2]["municipio"] == 2700409.0
        assert res_3.json()["data"][2]["uf"] == 27.0
        assert res_3.json()["data"][2]["codigoInstituicao"] == 6.0
        assert res_3.json()["data"][2]["cargaHoraria"] == 40.0
        assert res_3.json()["data"][2]["situacaoAtiva"] == True
        assert res_3.json()["data"][2]["dataIngresso"] == "2015-02-10"
        assert res_3.json()["data"][2]["dataFim"] is None
        assert res_3.json()["data"][2]["codigoFuncao"] == 2.0
        assert res_3.json()["data"][2]["matriculaRede"] == "56789"
        assert res_3.json()["data"][2]["tipoVinculo"] == 0.0
        assert res_3.json()["data"][2]["inep"] == "27014088"
        assert len(res_3.json()["data"][2]["tipoDeficiencia"]) == 3
        assert res_3.json()["data"][2]["tipoDeficiencia"][0] == 1.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][1] == 2.0
        assert res_3.json()["data"][2]["tipoDeficiencia"][2] == 3.0
        assert len(res_3.json()["data"][2]["formacoesAcademicas"]) == 2
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["noInstituicaoEnsinoFormacaoAcademica"] == "Universidade Federal do Brasil"
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["anoInicioFormacaoAcademica"] == 2016.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["anoConclusaoFormacaoAcademica"] == 2021.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["principal"] is None
        assert res_3.json()["data"][2]["formacoesAcademicas"][0]["tipoFormacaoAcademica"] == 7.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["noInstituicaoEnsinoFormacaoAcademica"] == "Instituto de Tecnologia do Piaui"
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["anoInicioFormacaoAcademica"] == 2010.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["anoConclusaoFormacaoAcademica"] == 2014.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["areaDoConhecimentoFormacaoAcademica"] == 6.0
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["principal"] is None
        assert res_3.json()["data"][2]["formacoesAcademicas"][1]["tipoFormacaoAcademica"] == 6.0
        assert res_3.json()["pagination"]["total"] == 3.0
        assert res_3.json()["pagination"]["count"] == 3.0
        assert res_3.json()["pagination"]["per_page"] == 81.0
        assert res_3.json()["pagination"]["current_page"] == 1.0
        assert res_3.json()["pagination"]["total_pages"] == 1.0
        assert res_3.json()["pagination"]["links"]["previous"] is None
        assert res_3.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (201) POST:/v1/estudantes/lote
    # 3 - (200) GET:/v1/estudantes/lote
    # Found 3 potential faults of type-code 200
    # Using 2 examples:
    #   2025
    #   25
    @timeout_decorator.timeout(60)
    def test_30(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Sr. Ana Laura Casqueira\", " + \
            " \"dataNascimento\": \"2007-12-17\", " + \
            " \"email\": \"TBQ\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"sexo\": \"1\", " + \
            " \"numeroNIS\": \"20540433254\", " + \
            " \"orgaoEmissor\": \"v3CgBk8nR\", " + \
            " \"certidaoNascimento\": \"t\", " + \
            " \"cnh\": \"w6vEJFqk\", " + \
            " \"numero\": \"4\", " + \
            " \"cep\": \"54124789\", " + \
            " \"municipio\": 306, " + \
            " \"uf\": 11, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"1983-02-21\", " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"inep\": 41142527, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"07413490715\", " + \
            " \"cpf\": \"60459717103\", " + \
            " \"dataNascimento\": \"1974-02-28\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 3, " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"26483898728\", " + \
            " \"orgaoEmissor\": \"vC2a0H9Lv4\", " + \
            " \"certidaoNascimento\": \"55321604245337510754278648232198\", " + \
            " \"logradouro\": \"Rua Largo Luciano Molina\", " + \
            " \"bairro\": \"São Fonseca\", " + \
            " \"numero\": \"9k\", " + \
            " \"dataInicioMatricula\": \"2001-08-07\", " + \
            " \"serieAno\": 71, " + \
            " \"matriculaRede\": \"\", " + \
            " \"inep\": 32033443, " + \
            " \"dataInicioPeriodoLetivo\": \"1996-08-21\", " + \
            " \"formaOrganizacaoTurma\": 397, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 1, " + \
            " \"anoMatricula\": 435 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"\", " + \
            " \"numeroNISResponsavel\": \"45348011091\", " + \
            " \"cpf\": \"TmpeJEXIMLU\", " + \
            " \"dataNascimento\": \"d7baL\", " + \
            " \"racaCor\": 0, " + \
            " \"telefone\": \"11949911257\", " + \
            " \"nomeSocial\": \"xcbz2JMMixKQM\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1 " + \
            " ], " + \
            " \"numeroNIS\": \"64670384818\", " + \
            " \"rg\": \"4202707096173021\", " + \
            " \"orgaoEmissor\": \"SSP-AL\", " + \
            " \"bairro\": \"AdhRLavjV9\", " + \
            " \"numero\": \"123\", " + \
            " \"cep\": \"37070132\", " + \
            " \"estudantePpl\": 0, " + \
            " \"dataInicioMatricula\": \"2032-05-18\", " + \
            " \"matriculaRede\": \"7\", " + \
            " \"inep\": 42158265, " + \
            " \"dataInicioPeriodoLetivo\": \"2051-01-12\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"estudanteAnoPeriodo\": 3, " + \
            " \"anoMatricula\": 2025 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nomeMaeEstudante\": \"Norberto Reis\", " + \
            " \"cpf\": \"85157612117\", " + \
            " \"nome\": \"Antonia Gonçalves\", " + \
            " \"genero\": 2, " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 2, " + \
            " 3 " + \
            " ], " + \
            " \"numeroNIS\": \"41307770208\", " + \
            " \"logradouro\": \"Yzxm\", " + \
            " \"bairro\": \"São Zamana\", " + \
            " \"numero\": \"979\", " + \
            " \"cep\": \"34886009\", " + \
            " \"municipio\": 2704302, " + \
            " \"uf\": 33, " + \
            " \"estudantePpl\": 1, " + \
            " \"inep\": 29481643, " + \
            " \"dataInicioPeriodoLetivo\": \"1949-06-14\", " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"estudanteAnoPeriodo\": 3, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 191 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"3s8NgWY\", " + \
            " \"nomeMaeEstudante\": \"Sra. Sara Rodrigues\", " + \
            " \"racaCor\": 4, " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 3, " + \
            " 1, " + \
            " 3, " + \
            " 564 " + \
            " ], " + \
            " \"rg\": \"5306398990535131\", " + \
            " \"orgaoEmissor\": \"i4tf\", " + \
            " \"bairro\": \"São Espinoza\", " + \
            " \"numero\": \"55\", " + \
            " \"cep\": \"22764474\", " + \
            " \"municipio\": 1302603, " + \
            " \"uf\": 13, " + \
            " \"dataInicioMatricula\": \"2052-13-29\", " + \
            " \"dataInicioPeriodoLetivo\": \"1905-05-25\", " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 2025 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"19465971804\", " + \
            " \"numeroNISResponsavel\": \"E3y2Zliw\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"alan.romero.sepulveda.filho@fake.com\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 3, " + \
            " 378 " + \
            " ], " + \
            " \"rg\": \"5584597210140807\", " + \
            " \"orgaoEmissor\": \"Nt Uteu4fY\", " + \
            " \"logradouro\": \"Rua Largo Sônia\", " + \
            " \"bairro\": \"São Espinoza\", " + \
            " \"numero\": \"123\", " + \
            " \"cep\": \"68717661\", " + \
            " \"dataInicioMatricula\": \"1917-09-18\", " + \
            " \"serieAno\": 25 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"85307915250\", " + \
            " \"nomeMaeEstudante\": \"Ofélia Garcês\", " + \
            " \"nome\": \"Aaron Afonso Zambrano\", " + \
            " \"dataNascimento\": \"1997-01-18\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"alan.rodolfo.santacruz.jr@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 224, " + \
            " 251, " + \
            " 3, " + \
            " 3 " + \
            " ], " + \
            " \"numeroNIS\": \"53048954623\", " + \
            " \"certidaoNascimento\": \"45002947142265130471661927806261\", " + \
            " \"uf\": 13, " + \
            " \"serieAno\": 71, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote?page=528",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Lotes de estudantes obtidos com sucesso."
        assert len(res_2.json()["data"]) == 10
        assert res_2.json()["data"][0]["dataEnvio"] == "2025-04-04 01:12:29"
        assert res_2.json()["data"][0]["status_processamento"] == "Processado com erro"
        assert res_2.json()["data"][1]["dataEnvio"] == "2025-04-04 01:12:27"
        assert res_2.json()["data"][1]["status_processamento"] == "Processado com erro"
        assert res_2.json()["data"][2]["dataEnvio"] == "2025-04-04 01:11:05"
        assert res_2.json()["data"][2]["status_processamento"] == "Processado com erro"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 9845.0
        assert res_2.json()["pagination"]["count"] == 10.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 528.0
        assert res_2.json()["pagination"]["total_pages"] == 985.0
        assert res_2.json()["pagination"]["links"]["previous"] == 527.0
        assert res_2.json()["pagination"]["links"]["next"] == 529.0
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (200) GET:/v1/estudantes/lote/{id}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_31(self):
        
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"DB\", " + \
            " \"cpf\": \"65753145540\", " + \
            " \"dataNascimento\": \"2007-09-23\", " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 42, " + \
            " \"nomeSocial\": \"63UEiJhM7H\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"rg\": \"17854119\", " + \
            " \"cnh\": \"56267273661\", " + \
            " \"logradouro\": \"Rua R. Cortês\", " + \
            " \"bairro\": \"\", " + \
            " \"numero\": \"4\", " + \
            " \"municipio\": 4200705, " + \
            " \"uf\": 33, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"2035-11-16\", " + \
            " \"formaOrganizacaoTurma\": 2, " + \
            " \"estudanteIntegral\": 0 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        location_lote = "/v1/estudantes/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/estudantes/lote/7a7a6285-db44-47bf-965c-5c063816ac9e?incluir_objetos_processados=true")),
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: 44fb8d29-4c69-4fb6-8dbe-87d3cf78d979"
    
    
    # Calls:
    # (200) GET:/v1/estudantes/inep/{inep}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_32(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/lpGG3u40Im_0lNK0?" + 
                    "page=695&" + 
                    "ano_matricula=325",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Estudantes obtidos com sucesso."
        assert len(res_0.json()["data"]) == 0
        assert res_0.json()["pagination"]["total"] == 0.0
        assert res_0.json()["pagination"]["count"] == 0.0
        assert res_0.json()["pagination"]["per_page"] == 10.0
        assert res_0.json()["pagination"]["current_page"] == 695.0
        assert res_0.json()["pagination"]["total_pages"] == 1.0
        assert res_0.json()["pagination"]["links"]["previous"] == 694.0
        assert res_0.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (200) GET:/v1/profissionais/lote/{id}
    # Found 2 potential faults of type-code 200
    # Using 1 example:
    #   44
    @timeout_decorator.timeout(60)
    def test_33(self):
        
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 646, " + \
            " \"cpf\": \"78285642798\", " + \
            " \"nome\": \"Antonia Gonçalves\", " + \
            " \"racaCor\": 42, " + \
            " \"telefone\": \"eISzFdh1cfEvn\", " + \
            " \"bairro\": \"F85h2qCS90hy\", " + \
            " \"numero\": \"530489\", " + \
            " \"municipio\": 377, " + \
            " \"inep\": \"AxQj4R8t1k\", " + \
            " \"codigoFuncao\": 670, " + \
            " \"dataFim\": \"1992-07-24\", " + \
            " \"cargaHoraria\": 186 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 468, " + \
            " \"nivelEscolaridade\": 610, " + \
            " \"cpf\": \"30123255732\", " + \
            " \"nome\": \"Sra. Clara Videira\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"RdPe\", " + \
            " \"nomeSocial\": \"Yuri Barbosa\", " + \
            " \"sexo\": \"5\", " + \
            " \"bairro\": \"AguRC9zYDGF\", " + \
            " \"numero\": \"022786\", " + \
            " \"municipio\": 219, " + \
            " \"matriculaRede\": \"UzQZRt6_3Q97y5M\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 148, " + \
            " \"nivelEscolaridade\": 325, " + \
            " \"cpf\": \"57472863661\", " + \
            " \"nome\": \"Ana Laura Esteves\", " + \
            " \"dataNascimento\": \"1980-05-20\", " + \
            " \"genero\": 4, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"tGX\", " + \
            " \"nomeSocial\": \"Suélen Ribeiro\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 396, " + \
            " 471 " + \
            " ], " + \
            " \"logradouro\": \"\", " + \
            " \"cep\": \"55946755\", " + \
            " \"municipio\": 901, " + \
            " \"inep\": \"WPQF_rxRKb\", " + \
            " \"codigoFuncao\": 963, " + \
            " \"dataIngresso\": \"2015-10-17\", " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": -703329829, " + \
            " \"cpf\": \"85157612117\", " + \
            " \"nome\": \"Ofélia da Aldeia Filho\", " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 5, " + \
            " \"nomeSocial\": \"ru9MV1B\", " + \
            " \"sexo\": \"5\", " + \
            " \"uf\": 1506679145, " + \
            " \"inep\": \"1FDsdSNCbFZAq73\", " + \
            " \"matriculaRede\": \"lD\", " + \
            " \"dataIngresso\": \"2013-07-12\", " + \
            " \"dataFim\": \"2023-02-10\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        location_lote = "/v1/profissionais/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/profissionais/lote/fce5ccef-9601-47fc-881b-d53bf418c2b0?incluir_objetos_processados=false")),
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: 288282c7-929c-4caf-b772-a7a990c5a417"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (200) GET:/v1/profissionais/lote/{id}
    # Found 2 potential faults of type-code 200
    # Using 1 example:
    #   1
    @timeout_decorator.timeout(60)
    def test_34(self):
        
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"Fabiano Grotas Filho\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 5, " + \
            " \"nomeSocial\": \"LkN8TDqDrIRE\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 2, " + \
            " 3 " + \
            " ], " + \
            " \"logradouro\": \"Rua Avenida Emília Bittencourt\", " + \
            " \"numero\": \"446\", " + \
            " \"municipio\": 4200705, " + \
            " \"uf\": 11, " + \
            " \"inep\": \"33088179\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"dataIngresso\": \"2082-02-31\", " + \
            " \"dataFim\": \"1947-09-00\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"cpf\": \"30123255732\", " + \
            " \"dataNascimento\": \"1972-04-15\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"YipyiZ@example.com\", " + \
            " \"nomeSocial\": \"SKJxf_xx\", " + \
            " \"sexo\": \"4\", " + \
            " \"numero\": \"1941\", " + \
            " \"municipio\": 966, " + \
            " \"uf\": 693, " + \
            " \"inep\": 29193656, " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2077-10-31\", " + \
            " \"dataFim\": \"1969-01-27\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 641, " + \
            " \"genero\": 3, " + \
            " \"telefone\": \"3333333\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 3, " + \
            " 3 " + \
            " ], " + \
            " \"bairro\": \"São Toledo\", " + \
            " \"numero\": \"8137\", " + \
            " \"cep\": \"nElO\", " + \
            " \"municipio\": 2408102, " + \
            " \"inep\": \"32033443\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataIngresso\": \"1962-03-31\", " + \
            " \"dataFim\": \"1966-04-16\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nome\": \"eHjqj\", " + \
            " \"genero\": 5, " + \
            " \"racaCor\": 2, " + \
            " \"numero\": \"979\", " + \
            " \"cep\": \"45527537\", " + \
            " \"municipio\": 2704302, " + \
            " \"uf\": 946, " + \
            " \"inep\": \"29481643\", " + \
            " \"codigoFuncao\": 1, " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        location_lote = "/v1/profissionais/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/profissionais/lote/f048f742-2cda-47f4-ab86-87679c04cdb0?per_page=10")),
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: b8326b0a-789c-4d52-a13d-e417884736dd"
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (200) GET:/v1/estudantes/lote/{id}
    # Found 1 potential fault of type-code 200
    # Using 2 examples:
    #   2025
    #   25
    @timeout_decorator.timeout(60)
    def test_35(self):
        
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"numeroNISResponsavel\": \"07413490715\", " + \
            " \"nomeMaeEstudante\": \"Sra. Jasmin Santana Valdez Filho\", " + \
            " \"nome\": \"Washington de Borba\", " + \
            " \"dataNascimento\": \"2000-07-27\", " + \
            " \"genero\": 7, " + \
            " \"telefone\": \"11933018135\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"numero\": \"99\", " + \
            " \"cep\": \"phSzO73I\", " + \
            " \"municipio\": 356, " + \
            " \"uf\": 13, " + \
            " \"serieAno\": 218072908, " + \
            " \"matriculaRede\": \"odzVuH\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 3, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2025 " + \
            " }, " + \
            " { " + \
            " \"numeroNISResponsavel\": \"61327000475\", " + \
            " \"nomeMaeEstudante\": \"Ofélia Garcês\", " + \
            " \"cpf\": \"03355508438\", " + \
            " \"nome\": \"Srta. Catarina de Borba\", " + \
            " \"dataNascimento\": \"2010-09-02\", " + \
            " \"genero\": 3, " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"alan.rodrigo.lourenco@fake.com\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"sexo\": \"4\", " + \
            " \"orgaoEmissor\": \"i4tf\", " + \
            " \"cnh\": \"56267273661\", " + \
            " \"logradouro\": \"Rua Rua Elaine Flores\", " + \
            " \"municipio\": 2704302, " + \
            " \"estudantePpl\": 1, " + \
            " \"dataInicioMatricula\": \"1982-01-07\", " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"instituicao\": 909, " + \
            " \"dataInicioPeriodoLetivo\": \"1992-02-13\", " + \
            " \"formaOrganizacaoTurma\": 397, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 2 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"40216167566\", " + \
            " \"numeroNISResponsavel\": \"48687441786\", " + \
            " \"nomeMaeEstudante\": \"Sra. Naomi Agustina Gil Filho\", " + \
            " \"cpf\": \"i_I68\", " + \
            " \"nome\": \"RfoJ\", " + \
            " \"dataNascimento\": \"1994-04-22\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"sexo\": \"1\", " + \
            " \"numeroNIS\": \"29009531546\", " + \
            " \"certidaoNascimento\": \"95809154625632762565343850014883\", " + \
            " \"logradouro\": \"Rua Avenida Sophia Camacho\", " + \
            " \"numero\": \"15512\", " + \
            " \"municipio\": 3550308, " + \
            " \"uf\": 24, " + \
            " \"dataInicioMatricula\": \"2062-09-07\", " + \
            " \"serieAno\": 25, " + \
            " \"matriculaRede\": \"e2XouiaD2aNA 8\", " + \
            " \"instituicao\": 81776, " + \
            " \"dataInicioPeriodoLetivo\": \"2087-03-04\", " + \
            " \"formaOrganizacaoTurma\": 85 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"40216167566\", " + \
            " \"nomeMaeEstudante\": \"Carlos Eduardo Veloso\", " + \
            " \"cpf\": \"I9e6PXAZ\", " + \
            " \"nome\": \"6cc97vMeCP9KgSI\", " + \
            " \"email\": \"alan.rodolfo.santacruz.jr@fake.com\", " + \
            " \"telefone\": \"U_T\", " + \
            " \"nomeSocial\": \"_1\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"numeroNIS\": \"20540433254\", " + \
            " \"rg\": \"5779726455607912\", " + \
            " \"certidaoNascimento\": \"28420212754886785533318883677481\", " + \
            " \"bairro\": \"São Dominato\", " + \
            " \"dataInicioMatricula\": \"2016-01-14\", " + \
            " \"matriculaRede\": \"7\", " + \
            " \"instituicao\": 106327, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 984, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"nomeMaeEstudante\": \"kYLAgRa05O\", " + \
            " \"cpf\": \"24621788051\", " + \
            " \"nome\": \"Antonia Gonçalves\", " + \
            " \"genero\": 8, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"RTT0VngF3Deo0O@example.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 2, " + \
            " 3, " + \
            " 3, " + \
            " 2 " + \
            " ], " + \
            " \"numeroNIS\": \"BZNbQxNR\", " + \
            " \"cnh\": \"01354673004\", " + \
            " \"bairro\": \"São Barreto\", " + \
            " \"numero\": \"wnh\", " + \
            " \"cep\": \"01001000\", " + \
            " \"municipio\": 1100940, " + \
            " \"estudantePpl\": 1, " + \
            " \"estudanteIntegral\": 0, " + \
            " \"anoMatricula\": 2024 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        location_lote = "/v1/estudantes/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/estudantes/lote/619527c2-e42e-4bc5-b38a-2da58cfa9563?page=145&incluir_objetos_processados=false")),
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: 789d5b87-9c95-4212-8dc1-a86257ea92fb"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (201) POST:/v1/profissionais/lote
    # 3 - (200) GET:/v1/profissionais/lote
    # Found 4 potential faults of type-code 200
    # Using 4 examples:
    #   1
    #   2010
    #   2014
    #   5
    @timeout_decorator.timeout(60)
    def test_36(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"Alan Rodrigues Filho\", " + \
            " \"dataNascimento\": \"Le3\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 395, " + \
            " 3, " + \
            " 3 " + \
            " ], " + \
            " \"bairro\": \"São Ortiz\", " + \
            " \"numero\": \"220\", " + \
            " \"cep\": \"10073500\", " + \
            " \"municipio\": 3304557, " + \
            " \"inep\": 125, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ] " + \
            " }, " + \
            " { " + \
            " \"dataNascimento\": \"1994-04-22\", " + \
            " \"genero\": 0, " + \
            " \"email\": \"alan.rodolfo.santacruz.jr@fake.com\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"sexo\": \"3\", " + \
            " \"numero\": \"1482\", " + \
            " \"municipio\": 4200705, " + \
            " \"inep\": 896, " + \
            " \"tipoVinculo\": 1, " + \
            " \"dataIngresso\": \"2100-03-07\", " + \
            " \"dataFim\": \"1975-01-28\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"nome\": \"QCkgJu4f\", " + \
            " \"genero\": 3, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"joao.silva@email.com\", " + \
            " \"telefone\": \"3333333\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"sexo\": \"1\", " + \
            " \"bairro\": \"eglJEKR C4MWk\", " + \
            " \"cep\": \"88278021\", " + \
            " \"municipio\": 3304557, " + \
            " \"uf\": 27, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"inep\": 27014088, " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nome\": \"Juliana Meira\", " + \
            " \"genero\": 1, " + \
            " \"racaCor\": 0, " + \
            " \"telefone\": \"11933018135\", " + \
            " \"logradouro\": \"Rua Travessa Maldonado\", " + \
            " \"bairro\": \"São Leal\", " + \
            " \"numero\": \"KGI\", " + \
            " \"cep\": \"88278021\", " + \
            " \"municipio\": 628, " + \
            " \"uf\": 35, " + \
            " \"inep\": \"41076389\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 109, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\" " + \
            " } " + \
            " ], " + \
            " \"cargaHoraria\": 488 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"telefone\": \"11933018135\", " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"logradouro\": \"Rua Largo Sônia\", " + \
            " \"bairro\": \"Centro\", " + \
            " \"numero\": \"15512\", " + \
            " \"municipio\": 4200705, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 634, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\" " + \
            " }, " + \
            " { " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"inep\": 42158265, " + \
            " \"tipoVinculo\": 1, " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"cpf\": \"61084382741\", " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"alan.romero.sepulveda.filho@fake.com\", " + \
            " \"telefone\": \"FVx09oXMR\", " + \
            " \"nomeSocial\": \"Oc1t4pW8\", " + \
            " \"sexo\": \"4\", " + \
            " \"logradouro\": \"DqcBjU\", " + \
            " \"bairro\": \"São Fonseca\", " + \
            " \"uf\": 42, " + \
            " \"matriculaRede\": \"56789\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"dataFim\": \"1961-04-24\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?" + 
                    "page=683&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_2.json()["data"]) == 0
        assert res_2.json()["pagination"]["total"] == 2718.0
        assert res_2.json()["pagination"]["count"] == 0.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 683.0
        assert res_2.json()["pagination"]["total_pages"] == 272.0
        assert res_2.json()["pagination"]["links"]["previous"] == 682.0
        assert res_2.json()["pagination"]["links"]["next"] is None
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (200) GET:/v1/estudantes/lote/{id}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_37(self):
        
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"19621089700\", " + \
            " \"cpf\": \"67089268578\", " + \
            " \"racaCor\": 5, " + \
            " \"sexo\": \"3\", " + \
            " \"numeroNIS\": \"43846525104\", " + \
            " \"rg\": \"2930961229818473\", " + \
            " \"logradouro\": \"oT\", " + \
            " \"numero\": \"763\", " + \
            " \"cep\": \"38969070\", " + \
            " \"municipio\": 141, " + \
            " \"estudantePpl\": 42, " + \
            " \"dataInicioMatricula\": \"1914-11-02\", " + \
            " \"serieAno\": 9, " + \
            " \"matriculaRede\": \"jSowHhs\", " + \
            " \"instituicao\": 8671, " + \
            " \"inep\": 29482607, " + \
            " \"dataInicioPeriodoLetivo\": \"2028-05-10\", " + \
            " \"formaOrganizacaoTurma\": 4, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 10 " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"mt0v_r8Sz\", " + \
            " \"dataNascimento\": \"2006-03-10\", " + \
            " \"racaCor\": 3, " + \
            " \"telefone\": \"11949911257\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 303, " + \
            " 1 " + \
            " ], " + \
            " \"logradouro\": \"Rua Largo Luciano Molina\", " + \
            " \"uf\": 12, " + \
            " \"estudantePpl\": 2, " + \
            " \"dataInicioMatricula\": \"1910-08-28\", " + \
            " \"serieAno\": 43, " + \
            " \"inep\": 572, " + \
            " \"dataInicioPeriodoLetivo\": \"2068-02-13\", " + \
            " \"formaOrganizacaoTurma\": 5, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 1, " + \
            " \"estudanteIntegral\": 42 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        location_lote = "/v1/estudantes/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/estudantes/lote/dd87455f-a54f-4b30-bbc8-e3fdecaddc99?page=402&per_page=31")),
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: 3ccea98d-c12c-461b-9360-f841f9a7ff8f"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (200) GET:/v1/profissionais/lote/{id}
    # Found 2 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_38(self):
        
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"60141141220\", " + \
            " \"dataNascimento\": \"1974-02-28\", " + \
            " \"email\": \"YipyiZ@example.com\", " + \
            " \"logradouro\": \"Rua teste\", " + \
            " \"bairro\": \"Santa Lucia\", " + \
            " \"numero\": \"16mqTj\", " + \
            " \"cep\": \"54124789\", " + \
            " \"uf\": 799, " + \
            " \"inep\": \"YD3sSmCoxedPqaOJ\", " + \
            " \"tipoVinculo\": 227, " + \
            " \"dataFim\": \"1916-07-07\", " + \
            " \"cargaHoraria\": 731 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        location_lote = "/v1/profissionais/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/profissionais/lote/d4d7b9d4-4e26-497a-ab1b-49de1c7e82ae?page=434&incluir_objetos_processados=true")),
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: 53775b20-db57-4c70-86a4-ac676721551c"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (200) GET:/v1/profissionais/lote/{id}
    # Found 2 potential faults of type-code 200
    # Using 4 examples:
    #   1
    #   2010
    #   2014
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_39(self):
        
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"91060909669\", " + \
            " \"nome\": \"Aaron Leon\", " + \
            " \"genero\": 42, " + \
            " \"tipoDeficiencia\": [ " + \
            " 1 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"bairro\": \"G5tQ1ZJN0\", " + \
            " \"uf\": 35, " + \
            " \"inep\": 98, " + \
            " \"formacoesAcademicas\": [], " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2094-12-30\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nome\": \"IiGrzEW7fvt\", " + \
            " \"telefone\": \"QfRe\", " + \
            " \"sexo\": \"0\", " + \
            " \"logradouro\": \"USCGC Powers\\nFPO AP 57305\", " + \
            " \"cep\": \"Yj\", " + \
            " \"inep\": 41141288, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"xwMoaf3Z1\", " + \
            " \"dataIngresso\": \"1905-09-21\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"eOmuj5J\", " + \
            " \"dataNascimento\": \"1971-02-10\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"OOVeIDZF_Ps\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 3, " + \
            " 1 " + \
            " ], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"cep\": \"75629407\", " + \
            " \"municipio\": 167, " + \
            " \"inep\": \"8DFvy5Dm\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 565 " + \
            " }, " + \
            " {}, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 133 " + \
            " } " + \
            " ], " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nome\": \"FGGy7t1GArvY5Su\", " + \
            " \"dataNascimento\": \"tEN\", " + \
            " \"email\": \"\", " + \
            " \"sexo\": \"0\", " + \
            " \"bairro\": \"São Alcantara\", " + \
            " \"inep\": \"27034917\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 479, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2018-11-21\" " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"4\", " + \
            " \"genero\": 4, " + \
            " \"racaCor\": 42, " + \
            " \"telefone\": \"11924664791\", " + \
            " \"nomeSocial\": \"pCifpRBMCpY\", " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"h9EVBe4IQR1LF LJMzz\", " + \
            " \"numero\": \"731\", " + \
            " \"inep\": \"HUUULrKeKjNkY\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 39 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"ZdtkCSxTS\", " + \
            " \"anoConclusaoFormacaoAcademica\": 44 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        location_lote = "/v1/profissionais/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/profissionais/lote/b95948b3-385c-4520-8dcc-692b5b302dd4?per_page=353&incluir_objetos_processados=true")),
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: 95292ecb-fc56-4830-81d3-1d48a86115c9"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (200) GET:/v1/profissionais/lote/{id}
    # Found 2 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_40(self):
        
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"17164863008\", " + \
            " \"email\": \"1Ip1n0pz@example.com\", " + \
            " \"nomeSocial\": \"RsOLwyuuUB3\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 10 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"ky\", " + \
            " \"numero\": \"17\", " + \
            " \"cep\": \"17772496\", " + \
            " \"municipio\": 974, " + \
            " \"matriculaRede\": \"C4eFnwsN\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"1999-04-32\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        location_lote = "/v1/profissionais/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/profissionais/lote/aab80c35-cdcd-486d-a6d1-082ec4e4aef6?page=480&per_page=15")),
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: 641a76df-0f69-4150-af09-2cbcce5cd67b"
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (200) GET:/v1/estudantes/lote/{id}
    # Found 1 potential fault of type-code 200
    # Using 2 examples:
    #   2025
    #   25
    @timeout_decorator.timeout(60)
    def test_41(self):
        
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"numeroNISResponsavel\": \"64668522654\", " + \
            " \"nomeMaeEstudante\": \"Nicole Fernandes Jr.\", " + \
            " \"cpf\": \"01506679145\", " + \
            " \"genero\": 3, " + \
            " \"telefone\": \"9pUW4iOBT6xgXlUi\", " + \
            " \"sexo\": \"2\", " + \
            " \"numeroNIS\": \"55646097716\", " + \
            " \"logradouro\": \"Rua Largo Sônia\", " + \
            " \"municipio\": 2704302, " + \
            " \"estudantePpl\": 1, " + \
            " \"dataInicioMatricula\": \"2064-03-14\", " + \
            " \"serieAno\": 71, " + \
            " \"matriculaRede\": \"OlAB_2Hg4dk\", " + \
            " \"inep\": 12029076, " + \
            " \"formaOrganizacaoTurma\": 1, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 2025 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"GeEBq\", " + \
            " \"nome\": \"cAgwuyam\", " + \
            " \"genero\": 3, " + \
            " \"email\": \"8ZSuZFrGo\", " + \
            " \"nomeSocial\": \"f1z\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 853, " + \
            " 2 " + \
            " ], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"numeroNIS\": \"WdH5GUH\", " + \
            " \"certidaoNascimento\": \"55321604245337510754278648232198\", " + \
            " \"bairro\": \"\", " + \
            " \"cep\": \"01001000\", " + \
            " \"dataInicioMatricula\": \"1911-06-01\", " + \
            " \"matriculaRede\": \"7\", " + \
            " \"instituicao\": 94194, " + \
            " \"inep\": 626, " + \
            " \"dataInicioPeriodoLetivo\": \"1969-04-16\", " + \
            " \"formaOrganizacaoTurma\": 6, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 0 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"WirZGN\", " + \
            " \"numeroNISResponsavel\": \"88396499957\", " + \
            " \"cpf\": \"43839402000\", " + \
            " \"genero\": 5, " + \
            " \"email\": \"AFTER-TWO@AFTER-TWO.com\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"orgaoEmissor\": \"SSP-RJ\", " + \
            " \"certidaoNascimento\": \"95809154625632762565343850014883\", " + \
            " \"bairro\": \"São Fonseca\", " + \
            " \"numero\": \"731\", " + \
            " \"cep\": \"01001000\", " + \
            " \"municipio\": 2704302, " + \
            " \"uf\": 153, " + \
            " \"dataInicioMatricula\": \"2025-12-22\", " + \
            " \"instituicao\": 94577, " + \
            " \"inep\": 29182034, " + \
            " \"dataInicioPeriodoLetivo\": \"2016-04-23\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 1 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"40216167566\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"aaron.abreu.davila@fake.com\", " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1 " + \
            " ], " + \
            " \"certidaoNascimento\": \"75925599690975521571348177961949\", " + \
            " \"cnh\": \"3333333\", " + \
            " \"estudantePpl\": 2, " + \
            " \"serieAno\": 74, " + \
            " \"inep\": 41075412, " + \
            " \"dataInicioPeriodoLetivo\": \"1939-11-13\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"estudanteIntegral\": 42 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"10352801409\", " + \
            " \"cpf\": \"26421984720\", " + \
            " \"nome\": \"Alan Rodrigo Lourenço\", " + \
            " \"genero\": 6, " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 3 " + \
            " ], " + \
            " \"orgaoEmissor\": \"i4tf\", " + \
            " \"cnh\": \"01354673004\", " + \
            " \"uf\": 35, " + \
            " \"estudantePpl\": 1, " + \
            " \"serieAno\": 25, " + \
            " \"matriculaRede\": \"7\", " + \
            " \"instituicao\": 185680, " + \
            " \"dataInicioPeriodoLetivo\": \"1975-12-15\", " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 0 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        location_lote = "/v1/estudantes/lote" + "/" + str(res_0.json()['id'])
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Invalid JSON Schema, cannot continue Syntax errors: [ {   "level" : "error",   "message" : "array must not contain duplicate elements",   "domain" : "syntax",   "schema" : {     "loadingURI" : "#",     "pointer" : "/properties/data/items/allOf/4/properties/matriculas/items/properties/situacaoMatricula"   },   "keyword" : "enum" } ]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_1 = requests \
                .get(resolve_location(location_lote, self.baseUrlOfSut + str("/v1/estudantes/lote/488b1ad5-bf12-4642-b3bc-625865f6be0b?page=893&per_page=10&incluir_objetos_processados=false")),
                    headers=headers)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["status_processamento"] == "Enviado"
        assert res_1.json()["message"] == "Lote recuperado com sucesso. ID: acecf8da-2a72-4f83-a4f9-2a77664670d8"
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (201) POST:/v1/profissionais/lote
    # 3 - (201) POST:/v1/profissionais/lote
    # 4 - (201) POST:/v1/profissionais/lote
    # 5 - (201) POST:/v1/profissionais/lote
    # 6 - (200) GET:/v1/profissionais/lote
    # Found 17 potential faults of type-code 200
    # Using 7 examples:
    #   1
    #   123456789
    #   2010
    #   2014
    #   44
    #   5
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_42(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 289, " + \
            " \"dataNascimento\": \"2001-02-02\", " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"aaron.abreu.davila@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 2, " + \
            " 3 " + \
            " ], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"bairro\": \"bCUyhxcxkqtF6m\", " + \
            " \"municipio\": 3550308, " + \
            " \"uf\": 27, " + \
            " \"inep\": \"KCLZxSb\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 425, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 956 " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": -1707354818, " + \
            " \"anoConclusaoFormacaoAcademica\": 136 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 919 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 191, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 901 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 470, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"W8BGnQONzI6Zw\" " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"Teste Ricardo\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 917, " + \
            " \"nivelEscolaridade\": 487, " + \
            " \"cpf\": \"01506679145\", " + \
            " \"nome\": \"6cc97vMeCP9KgSI\", " + \
            " \"dataNascimento\": \"1962-03-11\", " + \
            " \"racaCor\": 0, " + \
            " \"email\": \"hTwyFC_aD7_\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"logradouro\": \"\", " + \
            " \"bairro\": \"São Barreto\", " + \
            " \"cep\": \"45527537\", " + \
            " \"inep\": \"32033443\", " + \
            " \"formacoesAcademicas\": [], " + \
            " \"matriculaRede\": \"e2XouiaD2aNA 8\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"codigoFuncao\": 848, " + \
            " \"cargaHoraria\": 53669048 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 375, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"51057543608\", " + \
            " \"bairro\": \"São Barreto\", " + \
            " \"numero\": \"P\", " + \
            " \"municipio\": 2704302, " + \
            " \"uf\": 35, " + \
            " \"inep\": \"29193656\", " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"tipoVinculo\": 513, " + \
            " \"dataIngresso\": \"1991-11-00\", " + \
            " \"dataFim\": \"2095-01-31\", " + \
            " \"cargaHoraria\": -881251127 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 399, " + \
            " \"racaCor\": 1, " + \
            " \"telefone\": \"11969630845\", " + \
            " \"nomeSocial\": \"9QUzmVprv04bh9I\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 3, " + \
            " 2, " + \
            " 1, " + \
            " 493 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"01PKhhqGroyvggLAFUEoOHr3Q0KI\", " + \
            " \"bairro\": \"São Alcantara\", " + \
            " \"cep\": \"76984525\", " + \
            " \"inep\": 26540720, " + \
            " \"codigoFuncao\": 820 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"dataNascimento\": \"1980-05-20\", " + \
            " \"genero\": 1, " + \
            " \"email\": \"AFTER-TWO@AFTER-TWO.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 2, " + \
            " 1 " + \
            " ], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"logradouro\": \"JaOMHdEIZbg0x1\", " + \
            " \"numero\": \"979\", " + \
            " \"municipio\": 4200705, " + \
            " \"inep\": 222, " + \
            " \"tipoVinculo\": 150, " + \
            " \"codigoFuncao\": 351, " + \
            " \"dataFim\": \"1988-01-08\" " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"49255179888\", " + \
            " \"nome\": \"Srta. Catarina de Borba\", " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"4mphnZDvXrC@example.com\", " + \
            " \"telefone\": \"11969630845\", " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"Rua R. Anderson Assunção\", " + \
            " \"bairro\": \"J2Zd\", " + \
            " \"municipio\": 3304557, " + \
            " \"uf\": 11, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"anoInicioFormacaoAcademica\": 877 " + \
            " }, " + \
            " {}, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 61 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoConclusaoFormacaoAcademica\": 249 " + \
            " } " + \
            " ], " + \
            " \"tipoVinculo\": 950, " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataFim\": \"2051-10-26\" " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 207, " + \
            " \"email\": \"YipyiZ@example.com\", " + \
            " \"nomeSocial\": \"z\", " + \
            " \"bairro\": \"São Cordeiro\", " + \
            " \"municipio\": 3550308, " + \
            " \"uf\": 35, " + \
            " \"inep\": \"29182034\", " + \
            " \"matriculaRede\": \"7\", " + \
            " \"codigoFuncao\": 899, " + \
            " \"cargaHoraria\": 44 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"dataNascimento\": \"2008-10-29\", " + \
            " \"telefone\": \"11969630845\", " + \
            " \"cep\": \"64319297\", " + \
            " \"uf\": 33, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 394, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"1TzMf4S\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 885, " + \
            " \"anoInicioFormacaoAcademica\": 464 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": -1264663635, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"mzLeCPxXG8WgY\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"inep\": 33225605, " + \
            " \"matriculaRede\": \"Kj3bpVn5IDHk\", " + \
            " \"tipoVinculo\": 837, " + \
            " \"codigoFuncao\": 917 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 794, " + \
            " \"cpf\": \"45643327597\", " + \
            " \"dataNascimento\": \"1995-03-26\", " + \
            " \"racaCor\": 0, " + \
            " \"tipoDeficiencia\": [ " + \
            " 86, " + \
            " 2, " + \
            " 3, " + \
            " 2 " + \
            " ], " + \
            " \"inep\": 32033443, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 543, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 0, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"AfkKY7a71\", " + \
            " \"anoConclusaoFormacaoAcademica\": 785 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": -1425077365, " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 858, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"D8C\", " + \
            " \"anoInicioFormacaoAcademica\": 574 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"tipoVinculo\": 131, " + \
            " \"codigoFuncao\": 841 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 700, " + \
            " \"cpf\": \"29072517407\", " + \
            " \"genero\": 7, " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"sexo\": \"3\", " + \
            " \"bairro\": \"São Barreto\", " + \
            " \"numero\": \"_\", " + \
            " \"uf\": 27, " + \
            " \"tipoVinculo\": 697, " + \
            " \"codigoFuncao\": 587, " + \
            " \"dataIngresso\": \"1976-12-00\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 201
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 809, " + \
            " \"cpf\": \"81601036620\", " + \
            " \"racaCor\": 3, " + \
            " \"email\": \"4mphnZDvXrC@example.com\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"logradouro\": \"rWjgYPU1P8\", " + \
            " \"bairro\": \"F1fDOWn5t\", " + \
            " \"numero\": \"979\", " + \
            " \"municipio\": 77, " + \
            " \"uf\": 35, " + \
            " \"inep\": 575, " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"codigoFuncao\": 1438616164, " + \
            " \"dataIngresso\": \"2062-05-28\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 201
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 399, " + \
            " \"nivelEscolaridade\": 623, " + \
            " \"cpf\": \"01506679145\", " + \
            " \"dataNascimento\": \"2007-12-17\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"uQr78T8dIHZPX\", " + \
            " \"telefone\": \"3333333\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1 " + \
            " ], " + \
            " \"logradouro\": \"Rua teste\", " + \
            " \"cep\": \"45527537\", " + \
            " \"inep\": 33225605, " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"tipoVinculo\": 213, " + \
            " \"codigoFuncao\": 944, " + \
            " \"dataIngresso\": \"1950-12-08\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 201
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 03:02:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 03:02:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 03:02:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 03:02:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 03:02:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 03:00:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 03:00:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 03:00:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 03:00:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 03:00:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_5 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_5.status_code == 200
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_5.json()["data"]) == 10
        assert res_5.json()["data"][0]["dataEnvio"] == "2025-05-04 03:02:15"
        assert res_5.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][1]["dataEnvio"] == "2025-05-04 03:02:09"
        assert res_5.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_5.json()["data"][2]["dataEnvio"] == "2025-05-04 03:02:06"
        assert res_5.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_5.json()["pagination"]["total"] == 2723.0
        assert res_5.json()["pagination"]["count"] == 10.0
        assert res_5.json()["pagination"]["per_page"] == 10.0
        assert res_5.json()["pagination"]["current_page"] == 1.0
        assert res_5.json()["pagination"]["total_pages"] == 273.0
        assert res_5.json()["pagination"]["links"]["previous"] is None
        assert res_5.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (422) POST:/v1/profissionais/lote
    # 3 - (200) GET:/v1/profissionais/lote
    # Found 13 potential faults of type-code 200
    # Using 2 examples:
    #   1
    #   2010
    @timeout_decorator.timeout(60)
    def test_43(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"33353159606\", " + \
            " \"nome\": \"\", " + \
            " \"dataNascimento\": \"2005-05-15\", " + \
            " \"genero\": 4, " + \
            " \"racaCor\": 42, " + \
            " \"telefone\": \"3333333\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"numero\": \"2877\", " + \
            " \"cep\": \"37070132\", " + \
            " \"uf\": 24, " + \
            " \"inep\": \"29182034\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": -1613374676 " + \
            " } " + \
            " ], " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataIngresso\": \"2091-09-30\", " + \
            " \"dataFim\": \"1950-13-22\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 422
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 03:00:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 03:00:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 03:00:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 03:00:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 03:00:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 03:00:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 03:00:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 02:59:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 02:59:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 02:59:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_2 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_2.status_code == 200
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_2.json()["data"]) == 10
        assert res_2.json()["data"][0]["dataEnvio"] == "2025-05-04 03:00:40"
        assert res_2.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_2.json()["data"][1]["dataEnvio"] == "2025-05-04 03:00:33"
        assert res_2.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_2.json()["data"][2]["dataEnvio"] == "2025-05-04 03:00:28"
        assert res_2.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_2.json()["pagination"]["total"] == 2716.0
        assert res_2.json()["pagination"]["count"] == 10.0
        assert res_2.json()["pagination"]["per_page"] == 10.0
        assert res_2.json()["pagination"]["current_page"] == 1.0
        assert res_2.json()["pagination"]["total_pages"] == 272.0
        assert res_2.json()["pagination"]["links"]["previous"] is None
        assert res_2.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (201) POST:/v1/profissionais/lote
    # 3 - (422) POST:/v1/profissionais/lote
    # 4 - (201) POST:/v1/profissionais/lote
    # 5 - (201) POST:/v1/profissionais/lote
    # 6 - (201) POST:/v1/profissionais/lote
    # 7 - (422) POST:/v1/profissionais/lote
    # 8 - (422) POST:/v1/profissionais/lote
    # 9 - (201) POST:/v1/profissionais/lote
    # 10 - (200) GET:/v1/profissionais/lote
    # Found 18 potential faults of type-code 200
    # Using 7 examples:
    #   1
    #   123456789
    #   2010
    #   2014
    #   44
    #   5
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_44(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nome\": \"Alan Rodrigues\", " + \
            " \"dataNascimento\": \"2007-10-02\", " + \
            " \"telefone\": \"11907631504\", " + \
            " \"sexo\": \"2\", " + \
            " \"logradouro\": \"Rua Rua Vinícius Madeira\", " + \
            " \"bairro\": \"São Delgado\", " + \
            " \"numero\": \"3075\", " + \
            " \"municipio\": 1100940, " + \
            " \"codigoFuncao\": 2 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"9Xxt\", " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 3, " + \
            " \"telefone\": \"41E5Md6RM\", " + \
            " \"nomeSocial\": \"PBs_DiWCepF\", " + \
            " \"bairro\": \"I88JgJ1PjkvQ\", " + \
            " \"inep\": \"41352610\", " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"dataIngresso\": \"1990-09-32\", " + \
            " \"dataFim\": \"1908-08-17\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"29790856342\", " + \
            " \"nome\": \"oC6tZaswcAvb1L\", " + \
            " \"genero\": 3, " + \
            " \"racaCor\": 3, " + \
            " \"telefone\": \"11933018135\", " + \
            " \"sexo\": \"3\", " + \
            " \"logradouro\": \"Rua Av. James\", " + \
            " \"cep\": \"47280321\", " + \
            " \"municipio\": 1100940, " + \
            " \"tipoVinculo\": 1, " + \
            " \"dataFim\": \"1932-07-01\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"Aaron Aaron Caldeira\", " + \
            " \"genero\": 8, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"8BrrvU4uTh8v9N\", " + \
            " \"telefone\": \"11951045305\", " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5 " + \
            " ], " + \
            " \"bairro\": \"São Torres\", " + \
            " \"cep\": \"75629407\", " + \
            " \"inep\": 41076389, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"krbGXxnZkrxdaDs\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"_Cb\", " + \
            " \"dataIngresso\": \"1905-04-06\", " + \
            " \"cargaHoraria\": 593 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"alan.rodolfo.santacruz.jr@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 10, " + \
            " 5 " + \
            " ], " + \
            " \"sexo\": \"1\", " + \
            " \"bairro\": \"São Lourenço\", " + \
            " \"municipio\": 3304557, " + \
            " \"uf\": -1996613434, " + \
            " \"inep\": 32033443, " + \
            " \"tipoVinculo\": 734, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2034-12-29\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"dataNascimento\": \"2006-08-03\", " + \
            " \"racaCor\": 4, " + \
            " \"nomeSocial\": \"JWcmlm3 bF1UEc\", " + \
            " \"bairro\": \"aWr5Rp99VP_D5tfK\", " + \
            " \"cep\": \"27612078\", " + \
            " \"municipio\": 1100940, " + \
            " \"inep\": 51038625, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 102, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 64, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 530, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"1u2sfKRf4\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"qyWPbnYsup9Y\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataIngresso\": \"1982-12-31\", " + \
            " \"dataFim\": \"2097-12-30\" " + \
            " }, " + \
            " { " + \
            " \"dataNascimento\": \"2009-07-17\", " + \
            " \"racaCor\": 0, " + \
            " \"email\": \"YipyiZ@example.com\", " + \
            " \"telefone\": \"11951045305\", " + \
            " \"nomeSocial\": \"MipAD\", " + \
            " \"municipio\": 551, " + \
            " \"inep\": \"41352610\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataIngresso\": \"2019-01-11\", " + \
            " \"dataFim\": \"1934-10-06\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 422
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nome\": \"Sílvia Conceição\", " + \
            " \"dataNascimento\": \"2005-05-06\", " + \
            " \"email\": \"aaron.kevin.da.silva@fake.com\", " + \
            " \"telefone\": \"11909420800\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"logradouro\": \"Teste Logradouro\", " + \
            " \"bairro\": \"São Godói\", " + \
            " \"numero\": \"899\", " + \
            " \"cep\": \"30976605\", " + \
            " \"municipio\": 2096653359, " + \
            " \"uf\": 12, " + \
            " \"inep\": 32046103, " + \
            " \"matriculaRede\": \"LjMiwliATlelO\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataFim\": \"2049-01-13\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 877, " + \
            " \"nome\": \"Fabiano Grotas Filho\", " + \
            " \"dataNascimento\": \"2006-03-10\", " + \
            " \"genero\": 2, " + \
            " \"email\": \"alonso.prado.garcia@fake.com\", " + \
            " \"nomeSocial\": \"IFAHvC2o0k87\", " + \
            " \"sexo\": \"4\", " + \
            " \"logradouro\": \"b1PKw39EMzKk6wXKdgyYRVY1FExm9s\", " + \
            " \"cep\": \"nHV0gZSb\", " + \
            " \"inep\": \"7DkN6iRvp05VLrU\", " + \
            " \"matriculaRede\": \"qkoBN\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2094-12-21\", " + \
            " \"dataFim\": \"2070-05-24\", " + \
            " \"cargaHoraria\": 784 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"41323215840\", " + \
            " \"nome\": \"Aaron Agostinho Salas Sobrinho\", " + \
            " \"email\": \"eduardacostela@example.org\", " + \
            " \"telefone\": \"3333333\", " + \
            " \"numero\": \"\", " + \
            " \"cep\": \"YpFyf8fu\", " + \
            " \"uf\": 430, " + \
            " \"inep\": 12032115, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " {}, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 18, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"anoConclusaoFormacaoAcademica\": 476 " + \
            " } " + \
            " ], " + \
            " \"dataFim\": \"1988-08-06\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"07246333592\", " + \
            " \"nome\": \"Antonia Gonçalves\", " + \
            " \"dataNascimento\": \"1980-05-20\", " + \
            " \"bairro\": \"São Mendes\", " + \
            " \"numero\": \"2\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"8TA\" " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"pdkxLFRWoC\", " + \
            " \"dataIngresso\": \"2009-01-16\", " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"62826758551\", " + \
            " \"genero\": 5, " + \
            " \"email\": \"AoyiiApIUa3FU@example.com\", " + \
            " \"sexo\": \"2\", " + \
            " \"bairro\": \"São Rico\", " + \
            " \"numero\": \"r\", " + \
            " \"inep\": \"29182034\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2041-11-32\", " + \
            " \"cargaHoraria\": 362 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 201
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"aaron.kevin.camacho.neto@fake.com\", " + \
            " \"logradouro\": \"DP3\", " + \
            " \"bairro\": \"São Toledo\", " + \
            " \"numero\": \"4420\", " + \
            " \"cep\": \"98483504\", " + \
            " \"municipio\": 739, " + \
            " \"uf\": 332, " + \
            " \"inep\": \"29382017\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 360, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"1921-01-13\", " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"nome\": \"wHkfcMJ\", " + \
            " \"dataNascimento\": \"2008-11-19\", " + \
            " \"genero\": 1, " + \
            " \"racaCor\": 2, " + \
            " \"telefone\": \"11909420800\", " + \
            " \"nomeSocial\": \"KTJd\", " + \
            " \"sexo\": \"4\", " + \
            " \"bairro\": \"JEOpl4eF\", " + \
            " \"numero\": \"563\", " + \
            " \"cep\": \"pDmtXS_\", " + \
            " \"inep\": \"12029076\", " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"cargaHoraria\": 44 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 201
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"genero\": 3, " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 9, " + \
            " 10 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"bairro\": \"São Cordeiro\", " + \
            " \"inep\": 42023513, " + \
            " \"matriculaRede\": \"teste2\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"62826758551\", " + \
            " \"nome\": \"Aaron Aguiar\", " + \
            " \"dataNascimento\": \"2007-12-17\", " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"abgail.rosa@fake.com\", " + \
            " \"telefone\": \"11903903990\", " + \
            " \"nomeSocial\": \"Gs\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 516, " + \
            " 2 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"logradouro\": \"zH9TQqncjyp\", " + \
            " \"municipio\": 2704302, " + \
            " \"uf\": 27, " + \
            " \"inep\": 12033278, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"tipoVinculo\": 1, " + \
            " \"codigoFuncao\": 2 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"nome\": \"Aaron Lira Sobrinho\", " + \
            " \"dataNascimento\": \"2010-07-15\", " + \
            " \"genero\": 5, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"i9m\", " + \
            " \"nomeSocial\": \"vYHSe9eaiB\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 851, " + \
            " 1, " + \
            " 380, " + \
            " 2 " + \
            " ], " + \
            " \"logradouro\": \"Rua Rua Alves\", " + \
            " \"bairro\": \"fj4\", " + \
            " \"uf\": 15, " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 546, " + \
            " \"nome\": \"1qftFDRiQP\", " + \
            " \"genero\": 42, " + \
            " \"tipoDeficiencia\": [ " + \
            " 909, " + \
            " 1, " + \
            " 5, " + \
            " 846, " + \
            " 9 " + \
            " ], " + \
            " \"sexo\": \"1\", " + \
            " \"bairro\": \"\", " + \
            " \"municipio\": 1501105, " + \
            " \"uf\": 31, " + \
            " \"inep\": 27034917, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"anoConclusaoFormacaoAcademica\": 483 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\" " + \
            " } " + \
            " ] " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 432, " + \
            " \"cpf\": \"13514206074\", " + \
            " \"dataNascimento\": \"2005-04-22\", " + \
            " \"genero\": 9, " + \
            " \"telefone\": \"11951045305\", " + \
            " \"logradouro\": \"mFtG65Uo2uAQ\", " + \
            " \"bairro\": \"São Martines\", " + \
            " \"cep\": \"62545630\", " + \
            " \"municipio\": 132, " + \
            " \"uf\": 12, " + \
            " \"inep\": 29191840, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2000-03-14\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 201
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_6.status_code == 422
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == False
        assert res_6.json()["message"] == "JSON inválido."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_7.status_code == 422
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == False
        assert res_7.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"07246333592\", " + \
            " \"dataNascimento\": \"29X3ZsC\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"aaron.lira.sobrinho@fake.com\", " + \
            " \"nomeSocial\": \"X80ZBwUnM7292M\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 254 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"logradouro\": \"Rua Avenida Téo Arruda\", " + \
            " \"bairro\": \"BPdHFNH5kw\", " + \
            " \"uf\": 31, " + \
            " \"inep\": 689, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"1963-08-01\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 14, " + \
            " \"nome\": \"Aaron Agostinho Grego Jr.\", " + \
            " \"dataNascimento\": \"2010-12-13\", " + \
            " \"genero\": 3, " + \
            " \"telefone\": \"11942878677\", " + \
            " \"numero\": \"15426\", " + \
            " \"cep\": \"rCi_I\", " + \
            " \"inep\": 12097225, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ] " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"76724635519\", " + \
            " \"nome\": \"Alonso Prado Garcia\", " + \
            " \"genero\": 8, " + \
            " \"email\": \"L8HmWZr4oV@example.com\", " + \
            " \"nomeSocial\": \"JWcmlm3 bF1UEc\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 54, " + \
            " 3, " + \
            " 9 " + \
            " ], " + \
            " \"logradouro\": \"Teste Logradouro\", " + \
            " \"bairro\": \"São Souza\", " + \
            " \"numero\": \"2877\", " + \
            " \"cep\": \"50105379\", " + \
            " \"uf\": 43, " + \
            " \"inep\": 961, " + \
            " \"matriculaRede\": \"wIjceE63I0uZef\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataFim\": \"2097-04-23\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"dataNascimento\": \"2007-12-01\", " + \
            " \"genero\": 7, " + \
            " \"racaCor\": 42, " + \
            " \"telefone\": \"\", " + \
            " \"nomeSocial\": \"jdEYfjYYG W\", " + \
            " \"sexo\": \"4\", " + \
            " \"logradouro\": \"Rua Avenida Delatorre\", " + \
            " \"bairro\": \"kM7158tASf8t7\", " + \
            " \"numero\": \"1482\", " + \
            " \"municipio\": 4314902, " + \
            " \"matriculaRede\": \"jSowHhs\", " + \
            " \"dataIngresso\": \"1945-05-31\", " + \
            " \"cargaHoraria\": 829 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_8 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_8.status_code == 201
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == True
        assert res_8.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 03:07:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 03:07:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 03:07:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 03:06:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 03:06:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 03:06:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 03:05:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 03:05:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 03:05:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 03:05:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_9 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_9.status_code == 200
        assert "application/json" in res_9.headers["content-type"]
        assert res_9.json()["success"] == True
        assert res_9.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_9.json()["data"]) == 10
        assert res_9.json()["data"][0]["dataEnvio"] == "2025-05-04 03:07:15"
        assert res_9.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_9.json()["data"][1]["dataEnvio"] == "2025-05-04 03:07:06"
        assert res_9.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_9.json()["data"][2]["dataEnvio"] == "2025-05-04 03:07:03"
        assert res_9.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_9.json()["pagination"]["total"] == 2745.0
        assert res_9.json()["pagination"]["count"] == 10.0
        assert res_9.json()["pagination"]["per_page"] == 10.0
        assert res_9.json()["pagination"]["current_page"] == 1.0
        assert res_9.json()["pagination"]["total_pages"] == 275.0
        assert res_9.json()["pagination"]["links"]["previous"] is None
        assert res_9.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (201) POST:/v1/profissionais/lote
    # 3 - (422) POST:/v1/profissionais/lote
    # 4 - (201) POST:/v1/profissionais/lote
    # 5 - (422) POST:/v1/profissionais/lote
    # 6 - (201) POST:/v1/profissionais/lote
    # 7 - (201) POST:/v1/profissionais/lote
    # 8 - (200) GET:/v1/profissionais/lote
    # Found 17 potential faults of type-code 200
    # Using 6 examples:
    #   1
    #   123456789
    #   2014
    #   44
    #   5
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_45(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"45745917490\", " + \
            " \"nome\": \"7w9yAx\", " + \
            " \"dataNascimento\": \"2010-09-02\", " + \
            " \"email\": \"AFTER-TWO@AFTER-TWO.com\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"bairro\": \"São Dominato\", " + \
            " \"uf\": 27, " + \
            " \"inep\": 29193656, " + \
            " \"dataFim\": \"2024-02-02\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 290, " + \
            " \"nome\": \"Juliana Meira\", " + \
            " \"telefone\": \"11992925090\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"logradouro\": \"\", " + \
            " \"inep\": 16004183, " + \
            " \"tipoVinculo\": 846, " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"45643327597\", " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"bUTKUW\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 9, " + \
            " 9 " + \
            " ], " + \
            " \"sexo\": \"1\", " + \
            " \"logradouro\": \"F7ed8pF7pV9WGlR\", " + \
            " \"numero\": \"\", " + \
            " \"cep\": \"\", " + \
            " \"uf\": 33, " + \
            " \"inep\": 29191840, " + \
            " \"matriculaRede\": \"xwMoaf3Z1\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"cpf\": \"69649482105\", " + \
            " \"nome\": \"Aaron Cruz Alcantara Neto\", " + \
            " \"dataNascimento\": \"2010-06-22\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"aaron.kauan.cordeiro.neto@fake.com\", " + \
            " \"telefone\": \"kHP1B6s\", " + \
            " \"nomeSocial\": \"X80ZBwUnM7292M\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 2, " + \
            " 5 " + \
            " ], " + \
            " \"bairro\": \"São Oliveira\", " + \
            " \"numero\": \"59\", " + \
            " \"municipio\": 1501105, " + \
            " \"uf\": 321, " + \
            " \"formacoesAcademicas\": [], " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataIngresso\": \"2004-01-22\", " + \
            " \"dataFim\": \"2027-13-31\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"71900567423\", " + \
            " \"nome\": \"Aaron Kléber Gonçalves Sobrinho\", " + \
            " \"dataNascimento\": \"2010-09-18\", " + \
            " \"genero\": 2, " + \
            " \"nomeSocial\": \"Sfb2JNEw38xLnHir0\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 203, " + \
            " 1, " + \
            " 5 " + \
            " ], " + \
            " \"sexo\": \"0\", " + \
            " \"cep\": \"22764474\", " + \
            " \"municipio\": 2704302, " + \
            " \"inep\": 33088179, " + \
            " \"tipoVinculo\": 1 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"iWB2zuxVtV\", " + \
            " \"dataNascimento\": \"2007-09-23\", " + \
            " \"genero\": 7, " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"logradouro\": \"Gs_ovjco92f_VQf\", " + \
            " \"bairro\": \"\", " + \
            " \"cep\": \"57018780\", " + \
            " \"uf\": 349, " + \
            " \"inep\": \"29193656\", " + \
            " \"matriculaRede\": \"1j7HgIoP gf4bG\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2081-11-10\", " + \
            " \"dataFim\": \"1971-06-22\", " + \
            " \"cargaHoraria\": 310 " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"62826758551\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 2, " + \
            " \"logradouro\": \"9qV\", " + \
            " \"numero\": \"2462\", " + \
            " \"municipio\": 1501105, " + \
            " \"uf\": 35, " + \
            " \"inep\": \"29481643\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 314 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " {}, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"e2XouiaD2aNA 8\", " + \
            " \"tipoVinculo\": 0 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"oC6tZaswcAvb1L\", " + \
            " \"dataNascimento\": \"2czqvH5p4_\", " + \
            " \"genero\": 5, " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"eCxsD4zh4i@example.com\", " + \
            " \"telefone\": \"11945225241\", " + \
            " \"nomeSocial\": \"LmZl\", " + \
            " \"bairro\": \"wYJMLbe2Wq\", " + \
            " \"municipio\": 2611606, " + \
            " \"inep\": 29182034, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"1930-02-32\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 422
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": -1997984243, " + \
            " \"cpf\": \"01942240236\", " + \
            " \"nome\": \"vnptuVGJkUSIP\", " + \
            " \"dataNascimento\": \"2008-11-19\", " + \
            " \"telefone\": \"11998382555\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3 " + \
            " ], " + \
            " \"logradouro\": \"Rua Rua Sebastião\", " + \
            " \"numero\": \"8\", " + \
            " \"uf\": 42, " + \
            " \"inep\": 27014088, " + \
            " \"dataIngresso\": \"1921-09-07\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"genero\": 3, " + \
            " \"racaCor\": 2, " + \
            " \"nomeSocial\": \"pCifpRBMCpY\", " + \
            " \"cep\": \"K\", " + \
            " \"municipio\": 1100940, " + \
            " \"inep\": \"41083725\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 201
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 422
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == False
        assert res_4.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"43839402000\", " + \
            " \"dataNascimento\": \"1994-04-22\", " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"joao.silva@email.com\", " + \
            " \"telefone\": \"11901377051\", " + \
            " \"nomeSocial\": \"oZymDIPtU\", " + \
            " \"sexo\": \"0\", " + \
            " \"cep\": \"T8SyKz\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6 " + \
            " } " + \
            " ], " + \
            " \"inep\": 42158265, " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataIngresso\": \"2042-00-17\", " + \
            " \"dataFim\": \"1943-04-05\", " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 472, " + \
            " \"cpf\": \"96196409000\", " + \
            " \"genero\": 5, " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"sexo\": \"4\", " + \
            " \"bairro\": \"São Espinoza\", " + \
            " \"numero\": \"9386\", " + \
            " \"municipio\": 2408102, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"QZDLLpdO0Dso\", " + \
            " \"anoInicioFormacaoAcademica\": 314, " + \
            " \"anoConclusaoFormacaoAcademica\": 1689606079 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"wXvdQ6qWmnd53\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"inep\": 41076389, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2016-07-04\", " + \
            " \"dataFim\": \"1900-00-09\" " + \
            " }, " + \
            " { " + \
            " \"nome\": \"Adriana Salas Franco Neto\", " + \
            " \"dataNascimento\": \"1998-12-18\", " + \
            " \"racaCor\": 5, " + \
            " \"sexo\": \"1\", " + \
            " \"numero\": \"2\", " + \
            " \"uf\": 24, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoConclusaoFormacaoAcademica\": 467 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 996, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\" " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"dataFim\": \"2062-04-08\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 201
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"59986809525\", " + \
            " \"nome\": \"Aaron Leon\", " + \
            " \"racaCor\": 4, " + \
            " \"telefone\": \"L\", " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"sexo\": \"0\", " + \
            " \"logradouro\": \"Rua Rua Elaine Flores\", " + \
            " \"bairro\": \"São Rangel\", " + \
            " \"numero\": \"b\", " + \
            " \"uf\": 11, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"anoConclusaoFormacaoAcademica\": 467 " + \
            " } " + \
            " ], " + \
            " \"inep\": 29474272, " + \
            " \"dataIngresso\": \"1956-11-13\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"16460574308\", " + \
            " \"telefone\": \"11969630845\", " + \
            " \"sexo\": \"5\", " + \
            " \"bairro\": \"\", " + \
            " \"numero\": \"99\", " + \
            " \"inep\": \"12131229\", " + \
            " \"matriculaRede\": \"e2XouiaD2aNA 8\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2000-01-14\", " + \
            " \"dataFim\": \"2079-05-10\" " + \
            " }, " + \
            " { " + \
            " \"nome\": \"Abgail Rosa\", " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"anderson.bittencourt.filho@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 10, " + \
            " 5, " + \
            " 9 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"logradouro\": \"Rua Av. David Queirós\", " + \
            " \"numero\": \"8823\", " + \
            " \"inep\": \"12005037\", " + \
            " \"codigoFuncao\": 2 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"André Feliciano Uchoa\", " + \
            " \"dataNascimento\": \"0CNTUeVHrrzqm\", " + \
            " \"racaCor\": 0, " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"numero\": \"6735\", " + \
            " \"cep\": \"25975768\", " + \
            " \"municipio\": -773369230, " + \
            " \"uf\": 13, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoConclusaoFormacaoAcademica\": 319 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"tipoVinculo\": 160, " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"55867120325\", " + \
            " \"nome\": \"Anderson Sanches Leon\", " + \
            " \"dataNascimento\": \"HUz26d\", " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"GW0rzVPqGPVW@example.com\", " + \
            " \"telefone\": \"o8kwqj1AR\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 646 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"bairro\": \"São Branco\", " + \
            " \"cep\": \"50105379\", " + \
            " \"municipio\": 60, " + \
            " \"uf\": 12, " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataIngresso\": \"2076-02-13\", " + \
            " \"dataFim\": \"2073-10-06\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_6.status_code == 201
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 03:07:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 03:07:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 03:07:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 03:07:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 03:07:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 03:07:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 03:07:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 03:07:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 03:06:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 03:06:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_7 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers)
        
        assert res_7.status_code == 200
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_7.json()["data"]) == 10
        assert res_7.json()["data"][0]["dataEnvio"] == "2025-05-04 03:07:45"
        assert res_7.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_7.json()["data"][1]["dataEnvio"] == "2025-05-04 03:07:40"
        assert res_7.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_7.json()["data"][2]["dataEnvio"] == "2025-05-04 03:07:33"
        assert res_7.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        assert res_7.json()["pagination"]["total"] == 2750.0
        assert res_7.json()["pagination"]["count"] == 10.0
        assert res_7.json()["pagination"]["per_page"] == 10.0
        assert res_7.json()["pagination"]["current_page"] == 1.0
        assert res_7.json()["pagination"]["total_pages"] == 275.0
        assert res_7.json()["pagination"]["links"]["previous"] is None
        assert res_7.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # (200) GET:/v1/estudantes/validacao-cadastro
    # Found 18 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_46(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Object instance has properties which are not allowed by the schema: ["message","success"]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/0'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/1'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/2'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/3'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/4'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/5'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/6'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/7'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/8'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/9'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/10'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/11'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/12'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/13'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/data/14'] Instance failed to match all required schemas (matched only 0 out of 1)
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> [Path '/pagination/links/previous'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?page=572",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        assert len(res_0.json()["data"]) == 15
        assert res_0.json()["data"][0]["cpf"] == "78285642798"
        assert res_0.json()["data"][0]["numeroNIS"] == "59549563332"
        assert res_0.json()["data"][0]["situacaoCadastral"] == "Inexistente"
        assert res_0.json()["data"][0]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_0.json()["data"][0]["nome"] == "Sílvia Conceição"
        assert res_0.json()["data"][0]["nomeValidado"] == False
        assert res_0.json()["data"][0]["dataNascimento"] == "1995-03-26"
        assert res_0.json()["data"][0]["dataNascimentoValidada"] == False
        assert res_0.json()["data"][0]["nomeMaeEstudante"] == "Ana Sophia Corrêa"
        assert res_0.json()["data"][0]["nomeMaeEstudanteValidado"] == False
        assert res_0.json()["data"][0]["dataValidacaoCadastral"] == "2025-05-01 23:28:08"
        assert res_0.json()["data"][1]["cpf"] == "51057543608"
        assert res_0.json()["data"][1]["numeroNIS"] == "40576659635"
        assert res_0.json()["data"][1]["situacaoCadastral"] == "Inexistente"
        assert res_0.json()["data"][1]["situacaoCpf"] == "CPF não encontrado na base do BCPF"
        assert res_0.json()["data"][1]["nome"] == "Suélen Ribeiro"
        assert res_0.json()["data"][1]["nomeValidado"] == False
        assert res_0.json()["data"][1]["dataNascimento"] == "1997-01-18"
        assert res_0.json()["data"][1]["dataNascimentoValidada"] == False
        assert res_0.json()["data"][1]["nomeMaeEstudante"] == "Sr. Marcos da Cunha"
        assert res_0.json()["data"][1]["nomeMaeEstudanteValidado"] == False
        assert res_0.json()["data"][1]["dataValidacaoCadastral"] == "2025-05-01 23:15:09"
        assert res_0.json()["data"][2]["cpf"] == "55946755668"
        assert res_0.json()["data"][2]["numeroNIS"] == "48859874305"
        assert res_0.json()["data"][2]["situacaoCadastral"] == "Não autenticada"
        assert res_0.json()["data"][2]["situacaoCpf"] == "Quando há data de óbito vinculada ao CPF"
        assert res_0.json()["data"][2]["nome"] == "Ana Laura Esteves"
        assert res_0.json()["data"][2]["nomeValidado"] == False
        assert res_0.json()["data"][2]["dataNascimento"] == "1980-05-20"
        assert res_0.json()["data"][2]["dataNascimentoValidada"] == False
        assert res_0.json()["data"][2]["nomeMaeEstudante"] == "Joaquim Aparício Filho"
        assert res_0.json()["data"][2]["nomeMaeEstudanteValidado"] == False
        assert res_0.json()["data"][2]["dataValidacaoCadastral"] == "2015-03-29 00:00:00"
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 54714.0
        assert res_0.json()["pagination"]["count"] == 15.0
        assert res_0.json()["pagination"]["per_page"] == 15.0
        assert res_0.json()["pagination"]["current_page"] == 572.0
        assert res_0.json()["pagination"]["total_pages"] == 3648.0
        assert res_0.json()["pagination"]["links"]["previous"] == 571.0
        assert res_0.json()["pagination"]["links"]["next"] == 573.0
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (422) POST:/v1/profissionais/lote
    # 3 - (201) POST:/v1/profissionais/lote
    # 4 - (422) POST:/v1/profissionais/lote
    # 5 - (201) POST:/v1/profissionais/lote
    # 6 - (201) POST:/v1/profissionais/lote
    # 7 - (200) GET:/v1/profissionais/lote
    # Found 21 potential faults of type-code 200
    # Using 7 examples:
    #   1
    #   123456789
    #   2010
    #   2014
    #   44
    #   5
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_47(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"00462603318\", " + \
            " \"genero\": 5, " + \
            " \"email\": \"AFTER-TWO@AFTER-TWO.com\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"nomeSocial\": \"zYehO\", " + \
            " \"municipio\": 3550308, " + \
            " \"uf\": 1590416671, " + \
            " \"inep\": \"29182034\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\" " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 104 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 780, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"2100-12-23\", " + \
            " \"dataFim\": \"1992-10-06\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"BkJ39uxK4M\", " + \
            " \"dataNascimento\": \"2008-10-29\", " + \
            " \"genero\": 7, " + \
            " \"email\": \"RTT0VngF3Deo0O@example.com\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"nomeSocial\": \"rRAEEBPUPdYf\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 705, " + \
            " 1 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"\", " + \
            " \"municipio\": 3550308, " + \
            " \"uf\": 13, " + \
            " \"inep\": \"33225605\", " + \
            " \"matriculaRede\": \"e2XouiaD2aNA 8\", " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataIngresso\": \"1910-13-13\", " + \
            " \"dataFim\": \"1983-03-09\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 422
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 62, " + \
            " \"dataNascimento\": \"1962-03-11\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 0, " + \
            " \"nomeSocial\": \"YXWGpw\", " + \
            " \"bairro\": \"São Deverso\", " + \
            " \"municipio\": 2700409, " + \
            " \"uf\": 42, " + \
            " \"inep\": \"27014088\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 785 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"anoConclusaoFormacaoAcademica\": 830 " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"nome\": \"Alan Rocha Filho\", " + \
            " \"dataNascimento\": \"2007-06-16\", " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 5, " + \
            " \"nomeSocial\": \"test\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 2, " + \
            " 1, " + \
            " 277 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"logradouro\": \"Rua Largo Simão da Silva\", " + \
            " \"uf\": 24, " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"33722248094\", " + \
            " \"nome\": \"Aaron Aaron Jimenes\", " + \
            " \"dataNascimento\": \"1981-11-05\", " + \
            " \"genero\": 8, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"alan.romero.sepulveda.filho@fake.com\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 2, " + \
            " 2 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"logradouro\": \"\", " + \
            " \"numero\": \"2877\", " + \
            " \"uf\": 33, " + \
            " \"inep\": \"29481643\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"e2XouiaD2aNA 8\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2040-09-16\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"cpf\": \"o9wXX93d\", " + \
            " \"dataNascimento\": \"1985-06-15\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"alan.rodolfo.santacruz.jr@fake.com\", " + \
            " \"logradouro\": \"Rua Travessa Helena Queirós\", " + \
            " \"cep\": \"\", " + \
            " \"municipio\": 1302603, " + \
            " \"inep\": \"29382017\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 87, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 180, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " } " + \
            " ], " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 201
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 422
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"nbxWlM0f8\", " + \
            " \"dataNascimento\": \"1980-05-20\", " + \
            " \"email\": \"Zs4BI\", " + \
            " \"telefone\": \"11949911257\", " + \
            " \"numero\": \"2877\", " + \
            " \"cep\": \"2\", " + \
            " \"municipio\": 3550308, " + \
            " \"uf\": 35, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 784, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"\" " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 138 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 201
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 979, " + \
            " \"genero\": 0, " + \
            " \"email\": \"alan.rodrigo.lourenco@fake.com\", " + \
            " \"telefone\": \"11933018135\", " + \
            " \"logradouro\": \"Rua Largo Simão da Silva\", " + \
            " \"cep\": \"38969070\", " + \
            " \"inep\": 41075412, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2051-05-15\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"racaCor\": 2, " + \
            " \"email\": \"alan.rodrigo.lourenco@fake.com\", " + \
            " \"telefone\": \"11969630845\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"4\", " + \
            " \"bairro\": \"São Cordeiro\", " + \
            " \"numero\": \"123\", " + \
            " \"municipio\": 2704302, " + \
            " \"inep\": 42158265, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 935, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"qUzUfjSQ\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6 " + \
            " } " + \
            " ], " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 217, " + \
            " \"cpf\": \"LE5X\", " + \
            " \"nome\": \"_IXqnbTF_\", " + \
            " \"dataNascimento\": \"2010-07-15\", " + \
            " \"genero\": 7, " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"alan.rodrigues.benites@fake.com\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"logradouro\": \"Rua das Flores\", " + \
            " \"bairro\": \"nL4bOxhpEiU2PjnP\", " + \
            " \"numero\": \"7\", " + \
            " \"cep\": \"01001000\", " + \
            " \"inep\": 32046103, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ] " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 201
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 03:04:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 03:04:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 03:04:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 03:04:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 03:02:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 03:02:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 03:02:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 03:02:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 03:02:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 03:00:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 03:00:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 03:00:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 03:00:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 03:00:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 03:00:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=15",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_6.json()["data"]) == 15
        assert res_6.json()["data"][0]["dataEnvio"] == "2025-05-04 03:04:14"
        assert res_6.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][1]["dataEnvio"] == "2025-05-04 03:04:11"
        assert res_6.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][2]["dataEnvio"] == "2025-05-04 03:04:07"
        assert res_6.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        assert res_6.json()["pagination"]["total"] == 2727.0
        assert res_6.json()["pagination"]["count"] == 15.0
        assert res_6.json()["pagination"]["per_page"] == 15.0
        assert res_6.json()["pagination"]["current_page"] == 1.0
        assert res_6.json()["pagination"]["total_pages"] == 182.0
        assert res_6.json()["pagination"]["links"]["previous"] is None
        assert res_6.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # (200) GET:/v1/profissionais/lote
    # Found 83 potential faults of type-code 200
    @timeout_decorator.timeout(60)
    def test_48(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 02:57:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 02:56:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 02:56:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 02:55:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 02:54:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 02:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 02:52:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 02:52:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 02:51:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 02:51:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 02:50:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 02:50:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 02:50:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 02:50:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 02:50:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/15/dataEnvio'] String "2025-05-04 02:50:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/16/dataEnvio'] String "2025-05-04 02:48:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/17/dataEnvio'] String "2025-05-04 02:47:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/18/dataEnvio'] String "2025-05-04 02:47:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/19/dataEnvio'] String "2025-05-04 02:47:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/20/dataEnvio'] String "2025-05-04 02:47:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/21/dataEnvio'] String "2025-05-04 02:47:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/22/dataEnvio'] String "2025-05-04 02:47:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/23/dataEnvio'] String "2025-05-04 02:47:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/24/dataEnvio'] String "2025-05-04 02:47:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/25/dataEnvio'] String "2025-05-04 02:46:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/26/dataEnvio'] String "2025-05-04 02:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/27/dataEnvio'] String "2025-05-04 02:46:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/28/dataEnvio'] String "2025-05-04 02:46:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/29/dataEnvio'] String "2025-05-04 02:46:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/30/dataEnvio'] String "2025-05-04 02:46:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/31/dataEnvio'] String "2025-05-04 02:46:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/32/dataEnvio'] String "2025-05-04 02:45:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/33/dataEnvio'] String "2025-05-04 02:45:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/34/dataEnvio'] String "2025-05-04 02:45:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/35/dataEnvio'] String "2025-05-04 02:45:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/36/dataEnvio'] String "2025-05-04 02:45:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/37/dataEnvio'] String "2025-05-04 02:45:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/38/dataEnvio'] String "2025-05-04 02:45:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/39/dataEnvio'] String "2025-05-04 02:45:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/40/dataEnvio'] String "2025-05-04 02:45:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/41/dataEnvio'] String "2025-05-04 02:45:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/42/dataEnvio'] String "2025-05-04 02:45:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/43/dataEnvio'] String "2025-05-04 02:44:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/44/dataEnvio'] String "2025-05-04 02:44:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/45/dataEnvio'] String "2025-05-04 02:43:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/46/dataEnvio'] String "2025-05-04 02:43:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/47/dataEnvio'] String "2025-05-04 02:43:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/48/dataEnvio'] String "2025-05-04 02:43:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/49/dataEnvio'] String "2025-05-04 02:43:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/50/dataEnvio'] String "2025-05-04 02:42:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/51/dataEnvio'] String "2025-05-04 02:41:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/52/dataEnvio'] String "2025-05-04 02:41:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/53/dataEnvio'] String "2025-05-04 02:41:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/54/dataEnvio'] String "2025-05-04 02:41:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/55/dataEnvio'] String "2025-05-04 02:41:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/56/dataEnvio'] String "2025-05-04 02:41:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/57/dataEnvio'] String "2025-05-04 02:41:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/58/dataEnvio'] String "2025-05-04 02:41:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/59/dataEnvio'] String "2025-05-04 02:41:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/60/dataEnvio'] String "2025-05-04 02:40:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/61/dataEnvio'] String "2025-05-04 02:40:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/62/dataEnvio'] String "2025-05-04 02:40:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/63/dataEnvio'] String "2025-05-04 02:39:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/64/dataEnvio'] String "2025-05-04 02:39:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/65/dataEnvio'] String "2025-05-04 02:38:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/66/dataEnvio'] String "2025-05-04 02:38:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/67/dataEnvio'] String "2025-05-04 02:38:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/68/dataEnvio'] String "2025-05-04 02:38:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/69/dataEnvio'] String "2025-05-04 02:38:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/70/dataEnvio'] String "2025-05-04 02:37:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/71/dataEnvio'] String "2025-05-04 02:37:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/72/dataEnvio'] String "2025-05-04 02:36:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/73/dataEnvio'] String "2025-05-04 02:36:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/74/dataEnvio'] String "2025-05-04 02:36:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/75/dataEnvio'] String "2025-05-04 02:35:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/76/dataEnvio'] String "2025-05-04 02:32:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/77/dataEnvio'] String "2025-05-04 02:32:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/78/dataEnvio'] String "2025-05-04 02:32:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/79/dataEnvio'] String "2025-05-04 02:32:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/80/dataEnvio'] String "2025-05-04 02:32:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?" + 
                    "page=-197450033&" + 
                    "per_page=81",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_0.json()["data"]) == 81
        assert res_0.json()["data"][0]["dataEnvio"] == "2025-05-04 02:57:04"
        assert res_0.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][1]["dataEnvio"] == "2025-05-04 02:56:40"
        assert res_0.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_0.json()["data"][2]["dataEnvio"] == "2025-05-04 02:56:33"
        assert res_0.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 78 elements. This limit of 3 elements can be increased in the configurations
        assert res_0.json()["pagination"]["total"] == 2705.0
        assert res_0.json()["pagination"]["count"] == 81.0
        assert res_0.json()["pagination"]["per_page"] == 81.0
        assert res_0.json()["pagination"]["current_page"] == 1.0
        assert res_0.json()["pagination"]["total_pages"] == 34.0
        assert res_0.json()["pagination"]["links"]["previous"] is None
        assert res_0.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (201) POST:/v1/profissionais/lote
    # 3 - (201) POST:/v1/profissionais/lote
    # 4 - (422) POST:/v1/profissionais/lote
    # 5 - (201) POST:/v1/profissionais/lote
    # 6 - (201) POST:/v1/profissionais/lote
    # 7 - (201) POST:/v1/profissionais/lote
    # 8 - (201) POST:/v1/profissionais/lote
    # 9 - (201) POST:/v1/profissionais/lote
    # 10 - (200) GET:/v1/profissionais/lote
    # Found 91 potential faults of type-code 200
    # Using 7 examples:
    #   1
    #   123456789
    #   2010
    #   2014
    #   44
    #   5
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_49(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"dataNascimento\": \"2007-12-01\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"bairro\": \"rwEbpivAZGkf2\", " + \
            " \"cep\": \"36387444\", " + \
            " \"inep\": 33225605, " + \
            " \"tipoVinculo\": 329, " + \
            " \"dataIngresso\": \"1995-00-09\" " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"71888723416\", " + \
            " \"dataNascimento\": \"2006-04-08\", " + \
            " \"genero\": 7, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"aaron.kauan.marinho.jr@fake.com\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 3, " + \
            " 815 " + \
            " ], " + \
            " \"logradouro\": \"Rua Av. Mayara\", " + \
            " \"cep\": \"45527537\", " + \
            " \"inep\": \"12032115\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"seJY\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"xwMoaf3Z1\", " + \
            " \"tipoVinculo\": 974648875, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"2017-09-30\", " + \
            " \"cargaHoraria\": 374 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"cpf\": \"62bHDAp\", " + \
            " \"nome\": \"Aaron Aguiar\", " + \
            " \"racaCor\": 4, " + \
            " \"email\": \"LGRvg4zG@example.com\", " + \
            " \"telefone\": \"11901377051\", " + \
            " \"nomeSocial\": \"pCifpRBMCpY\", " + \
            " \"logradouro\": \"Rua Av. Mayara\", " + \
            " \"bairro\": \"São Rocha\", " + \
            " \"municipio\": 1200203, " + \
            " \"matriculaRede\": \"3ArBS\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"1924-00-31\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 672, " + \
            " \"dataNascimento\": \"1991-01-14\", " + \
            " \"email\": \"aaron.leo.da.cruz@fake.com\", " + \
            " \"telefone\": \"44444444444\", " + \
            " \"nomeSocial\": \"test\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 2, " + \
            " 5 " + \
            " ], " + \
            " \"logradouro\": \"Rua Travessa Micaela\", " + \
            " \"bairro\": \"São Rocha\", " + \
            " \"uf\": 43, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 93, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"inep\": 12033308, " + \
            " \"dataIngresso\": \"2045-09-04\", " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"20598374051\", " + \
            " \"nome\": \"R8qSyH6xyqDi19E6bYF\", " + \
            " \"email\": \"z7NlVd\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 9, " + \
            " 1, " + \
            " 5, " + \
            " 10 " + \
            " ], " + \
            " \"inep\": \"41142527\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 966, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 467, " + \
            " \"anoConclusaoFormacaoAcademica\": 309 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"dataIngresso\": \"1980-12-08\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"16650099775\", " + \
            " \"nome\": \"Fabiano Grotas Filho\", " + \
            " \"dataNascimento\": \"2010-08-22\", " + \
            " \"genero\": 7, " + \
            " \"telefone\": \"11901377051\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 165, " + \
            " 3, " + \
            " 2 " + \
            " ], " + \
            " \"numero\": \"\", " + \
            " \"inep\": 548, " + \
            " \"matriculaRede\": \"Teste Ricardo\", " + \
            " \"tipoVinculo\": 0 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"60459717103\", " + \
            " \"nome\": \"Srta. Catarina de Borba\", " + \
            " \"dataNascimento\": \"1998-12-18\", " + \
            " \"racaCor\": 0, " + \
            " \"telefone\": \"11988260647\", " + \
            " \"nomeSocial\": \"jdEYfjYYG W\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 3, " + \
            " 1, " + \
            " 448, " + \
            " 3 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"cep\": \"56816522\", " + \
            " \"inep\": \"16004183\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"codigoFuncao\": 2 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"figOanIGVG\", " + \
            " \"nome\": \"9sM2EQIU9Qqg\", " + \
            " \"genero\": 7, " + \
            " \"telefone\": \"11901377051\", " + \
            " \"nomeSocial\": \"X80ZBwUnM7292M\", " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"logradouro\": \"uzMcVcBqnrQj M1HWtCHwj\", " + \
            " \"numero\": \"41488\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6 " + \
            " } " + \
            " ], " + \
            " \"inep\": 12131229, " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 40 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 201
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 422
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == False
        assert res_3.json()["message"] == "JSON inválido."
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"67333511456\", " + \
            " \"genero\": 7, " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"eCxsD4zh4i@example.com\", " + \
            " \"nomeSocial\": \"60Kfw\", " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"97pKWfNG5ZKLCIM0jpsPlEha\", " + \
            " \"bairro\": \"São Cordeiro\", " + \
            " \"cep\": \"54124789\", " + \
            " \"uf\": 35, " + \
            " \"inep\": \"39H1r4sNZTanqa5Y\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 223 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 572, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 251, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"y\", " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataFim\": \"1966-04-21\", " + \
            " \"cargaHoraria\": 495 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"61084382741\", " + \
            " \"nome\": \"8YqMGG4HduxmkR\", " + \
            " \"racaCor\": 2, " + \
            " \"nomeSocial\": \"C9Wr\", " + \
            " \"bairro\": \"São Ramires\", " + \
            " \"numero\": \"5619\", " + \
            " \"municipio\": 569, " + \
            " \"inep\": 29482291, " + \
            " \"matriculaRede\": \"jvjvjv1\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"1999-00-28\", " + \
            " \"dataFim\": \"1946-03-09\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 201
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"cpf\": \"76724635519\", " + \
            " \"nome\": \"Aaron Alan Solano\", " + \
            " \"racaCor\": 4, " + \
            " \"telefone\": \"Tiiu\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 10, " + \
            " 5 " + \
            " ], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"logradouro\": \"J\", " + \
            " \"bairro\": \"Vila Independencia 3ª Seção\", " + \
            " \"cep\": \"62545630\", " + \
            " \"inep\": \"41141288\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\" " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 7 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 549, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\" " + \
            " } " + \
            " ], " + \
            " \"dataIngresso\": \"2065-03-06\", " + \
            " \"dataFim\": \"1901-03-07\" " + \
            " }, " + \
            " { " + \
            " \"genero\": 8, " + \
            " \"racaCor\": 42, " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"Rua Largo Ávila\", " + \
            " \"bairro\": \"São Ferreira\", " + \
            " \"numero\": \"75104\", " + \
            " \"cep\": \"77339975\", " + \
            " \"municipio\": 851, " + \
            " \"inep\": \"12005037\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataFim\": \"2025-12-22\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 201
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nome\": \"Yuri Barbosa\", " + \
            " \"email\": \"L8HmWZr4oV@example.com\", " + \
            " \"telefone\": \"11909420800\", " + \
            " \"nomeSocial\": \"8hbo50Mnoym\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 2, " + \
            " 3, " + \
            " 10, " + \
            " 9, " + \
            " 459 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"uf\": 15, " + \
            " \"inep\": 237, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"mf0pJDy692Bn\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2016, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 37 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"2Ul\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 1, " + \
            " \"cargaHoraria\": 787 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_6 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_6.status_code == 201
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"nome\": \"Aaron Leal Bonilha Jr.\", " + \
            " \"dataNascimento\": \"ujJ0D3D8mQl\", " + \
            " \"genero\": 5, " + \
            " \"racaCor\": 5, " + \
            " \"telefone\": \"bKCZ3sG9OEx8\", " + \
            " \"nomeSocial\": \"RsOLwyuuUB3\", " + \
            " \"sexo\": \"3\", " + \
            " \"logradouro\": \"h9EVBe4IQR1LF LJMzz\", " + \
            " \"bairro\": \"Centro\", " + \
            " \"numero\": \"_9i9\", " + \
            " \"cep\": \"60149506\", " + \
            " \"uf\": 987, " + \
            " \"inep\": 29474272, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 15, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 1950464867, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"dataIngresso\": \"2064-11-23\", " + \
            " \"dataFim\": \"2031-10-17\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 699, " + \
            " \"genero\": 9, " + \
            " \"racaCor\": 0, " + \
            " \"telefone\": \"64ks05Y7f4XOSb\", " + \
            " \"bairro\": \"São Lourenço\", " + \
            " \"uf\": 583, " + \
            " \"inep\": \"12033278\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010 " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 2, " + \
            " \"cargaHoraria\": 379 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"nivelEscolaridade\": 868, " + \
            " \"dataNascimento\": \"2009-12-24\", " + \
            " \"genero\": 4, " + \
            " \"racaCor\": 3, " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"numero\": \"2\", " + \
            " \"cep\": \"30976605\", " + \
            " \"inep\": 26540720, " + \
            " \"matriculaRede\": \"7hED\", " + \
            " \"tipoVinculo\": 0, " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataIngresso\": \"1906-05-09\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"dataNascimento\": \"2002-03-18\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 5, " + \
            " 10 " + \
            " ], " + \
            " \"cep\": \"34886009\", " + \
            " \"uf\": 27, " + \
            " \"inep\": 41083725, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 987, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Brasil\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": -1855832359, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Instituto de Tecnologia do Piaui\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoInicioFormacaoAcademica\": 2016 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 6, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 6, " + \
            " \"anoConclusaoFormacaoAcademica\": 2021 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"CNjj\" " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"qkoBN\", " + \
            " \"codigoFuncao\": 117, " + \
            " \"dataIngresso\": \"1947-07-25\", " + \
            " \"dataFim\": \"2025-08-14\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_7 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_7.status_code == 201
        assert "application/json" in res_7.headers["content-type"]
        assert res_7.json()["success"] == True
        assert res_7.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"81696927412\", " + \
            " \"genero\": 42, " + \
            " \"racaCor\": 4, " + \
            " \"nomeSocial\": \"jdEYfjYYG W\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 9, " + \
            " 10, " + \
            " 5 " + \
            " ], " + \
            " \"logradouro\": \"Rua Largo Verônica\", " + \
            " \"bairro\": \"São Furtado\", " + \
            " \"municipio\": 287, " + \
            " \"inep\": \"32033443\", " + \
            " \"formacoesAcademicas\": [], " + \
            " \"matriculaRede\": \"56789\", " + \
            " \"dataFim\": \"2094-00-08\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 10, " + \
            " \"nome\": \"Ana Laura Esteves\", " + \
            " \"dataNascimento\": \"1972-04-15\", " + \
            " \"genero\": 8, " + \
            " \"nomeSocial\": \"RsOLwyuuUB3\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 3, " + \
            " 10 " + \
            " ], " + \
            " \"sexo\": \"0\", " + \
            " \"bairro\": \"TckS4CPgljfJ2IsC8sYh\", " + \
            " \"cep\": \"ah\", " + \
            " \"municipio\": 245, " + \
            " \"inep\": 41076389, " + \
            " \"matriculaRede\": \"qyWPbnYsup9Y\", " + \
            " \"codigoFuncao\": 2, " + \
            " \"dataFim\": \"1956-07-14\" " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"71888723416\", " + \
            " \"dataNascimento\": \"6eC1d_Y\", " + \
            " \"racaCor\": 3, " + \
            " \"email\": \"\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"3\", " + \
            " \"logradouro\": \"Rua R. Samuel Faro\", " + \
            " \"bairro\": \"bwsv31tO1\", " + \
            " \"numero\": \"99\", " + \
            " \"inep\": 29474272, " + \
            " \"matriculaRede\": \"qyWPbnYsup9Y\", " + \
            " \"cargaHoraria\": 40 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 2, " + \
            " \"genero\": 5, " + \
            " \"nomeSocial\": \"0XZqkQ\", " + \
            " \"logradouro\": \"Swo6muNp45odY6kz nIa3J\", " + \
            " \"bairro\": \"São Branco\", " + \
            " \"municipio\": 433, " + \
            " \"uf\": 781, " + \
            " \"inep\": -294952099, " + \
            " \"matriculaRede\": \"7\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 914, " + \
            " \"cpf\": \"33722248094\", " + \
            " \"genero\": 3, " + \
            " \"telefone\": \"11988260647\", " + \
            " \"sexo\": \"4\", " + \
            " \"inep\": 12032115, " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"dataIngresso\": \"2068-13-25\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_8 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_8.status_code == 201
        assert "application/json" in res_8.headers["content-type"]
        assert res_8.json()["success"] == True
        assert res_8.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 03:05:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 03:05:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 03:05:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 03:04:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 03:04:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 03:04:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 03:04:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 03:04:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 03:04:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 03:04:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 03:04:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 03:04:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 03:04:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 03:04:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 03:02:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/15/dataEnvio'] String "2025-05-04 03:02:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/16/dataEnvio'] String "2025-05-04 03:02:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/17/dataEnvio'] String "2025-05-04 03:02:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/18/dataEnvio'] String "2025-05-04 03:02:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/19/dataEnvio'] String "2025-05-04 03:00:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/20/dataEnvio'] String "2025-05-04 03:00:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/21/dataEnvio'] String "2025-05-04 03:00:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/22/dataEnvio'] String "2025-05-04 03:00:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/23/dataEnvio'] String "2025-05-04 03:00:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/24/dataEnvio'] String "2025-05-04 03:00:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/25/dataEnvio'] String "2025-05-04 03:00:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/26/dataEnvio'] String "2025-05-04 03:00:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/27/dataEnvio'] String "2025-05-04 03:00:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/28/dataEnvio'] String "2025-05-04 02:59:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/29/dataEnvio'] String "2025-05-04 02:59:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/30/dataEnvio'] String "2025-05-04 02:59:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/31/dataEnvio'] String "2025-05-04 02:59:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/32/dataEnvio'] String "2025-05-04 02:57:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/33/dataEnvio'] String "2025-05-04 02:56:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/34/dataEnvio'] String "2025-05-04 02:56:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/35/dataEnvio'] String "2025-05-04 02:55:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/36/dataEnvio'] String "2025-05-04 02:54:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/37/dataEnvio'] String "2025-05-04 02:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/38/dataEnvio'] String "2025-05-04 02:52:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/39/dataEnvio'] String "2025-05-04 02:52:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/40/dataEnvio'] String "2025-05-04 02:51:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/41/dataEnvio'] String "2025-05-04 02:51:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/42/dataEnvio'] String "2025-05-04 02:50:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/43/dataEnvio'] String "2025-05-04 02:50:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/44/dataEnvio'] String "2025-05-04 02:50:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/45/dataEnvio'] String "2025-05-04 02:50:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/46/dataEnvio'] String "2025-05-04 02:50:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/47/dataEnvio'] String "2025-05-04 02:50:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/48/dataEnvio'] String "2025-05-04 02:48:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/49/dataEnvio'] String "2025-05-04 02:47:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/50/dataEnvio'] String "2025-05-04 02:47:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/51/dataEnvio'] String "2025-05-04 02:47:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/52/dataEnvio'] String "2025-05-04 02:47:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/53/dataEnvio'] String "2025-05-04 02:47:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/54/dataEnvio'] String "2025-05-04 02:47:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/55/dataEnvio'] String "2025-05-04 02:47:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/56/dataEnvio'] String "2025-05-04 02:47:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/57/dataEnvio'] String "2025-05-04 02:46:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/58/dataEnvio'] String "2025-05-04 02:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/59/dataEnvio'] String "2025-05-04 02:46:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/60/dataEnvio'] String "2025-05-04 02:46:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/61/dataEnvio'] String "2025-05-04 02:46:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/62/dataEnvio'] String "2025-05-04 02:46:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/63/dataEnvio'] String "2025-05-04 02:46:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/64/dataEnvio'] String "2025-05-04 02:45:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/65/dataEnvio'] String "2025-05-04 02:45:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/66/dataEnvio'] String "2025-05-04 02:45:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/67/dataEnvio'] String "2025-05-04 02:45:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/68/dataEnvio'] String "2025-05-04 02:45:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/69/dataEnvio'] String "2025-05-04 02:45:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/70/dataEnvio'] String "2025-05-04 02:45:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/71/dataEnvio'] String "2025-05-04 02:45:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/72/dataEnvio'] String "2025-05-04 02:45:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/73/dataEnvio'] String "2025-05-04 02:45:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/74/dataEnvio'] String "2025-05-04 02:45:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/75/dataEnvio'] String "2025-05-04 02:44:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/76/dataEnvio'] String "2025-05-04 02:44:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/77/dataEnvio'] String "2025-05-04 02:43:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/78/dataEnvio'] String "2025-05-04 02:43:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/79/dataEnvio'] String "2025-05-04 02:43:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/80/dataEnvio'] String "2025-05-04 02:43:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_9 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=81",
                    headers=headers)
        
        assert res_9.status_code == 200
        assert "application/json" in res_9.headers["content-type"]
        assert res_9.json()["success"] == True
        assert res_9.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_9.json()["data"]) == 81
        assert res_9.json()["data"][0]["dataEnvio"] == "2025-05-04 03:05:09"
        assert res_9.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_9.json()["data"][1]["dataEnvio"] == "2025-05-04 03:05:06"
        assert res_9.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_9.json()["data"][2]["dataEnvio"] == "2025-05-04 03:05:03"
        assert res_9.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 78 elements. This limit of 3 elements can be increased in the configurations
        assert res_9.json()["pagination"]["total"] == 2737.0
        assert res_9.json()["pagination"]["count"] == 81.0
        assert res_9.json()["pagination"]["per_page"] == 81.0
        assert res_9.json()["pagination"]["current_page"] == 1.0
        assert res_9.json()["pagination"]["total_pages"] == 34.0
        assert res_9.json()["pagination"]["links"]["previous"] is None
        assert res_9.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # 1 - (201) POST:/v1/profissionais/lote
    # 2 - (201) POST:/v1/profissionais/lote
    # 3 - (201) POST:/v1/profissionais/lote
    # 4 - (201) POST:/v1/profissionais/lote
    # 5 - (201) POST:/v1/profissionais/lote
    # 6 - (201) POST:/v1/profissionais/lote
    # 7 - (200) GET:/v1/profissionais/lote
    # Found 230 potential faults of type-code 200
    # Using 7 examples:
    #   1
    #   123456789
    #   2010
    #   2014
    #   44
    #   5
    #   Universidade Federal do Rio de Janeiro
    @timeout_decorator.timeout(60)
    def test_50(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"73843367671\", " + \
            " \"dataNascimento\": \"1997-01-18\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 1, " + \
            " \"email\": \"ensIA8d2\", " + \
            " \"nomeSocial\": \"YG9\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 811 " + \
            " ], " + \
            " \"logradouro\": \"2JcF7UfBp06h\", " + \
            " \"cep\": \"26421984\", " + \
            " \"municipio\": 352, " + \
            " \"uf\": 585, " + \
            " \"inep\": \"j\", " + \
            " \"matriculaRede\": \"fzXuvwBX\", " + \
            " \"dataIngresso\": \"2076-07-12\", " + \
            " \"dataFim\": \"1915-12-08\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 172, " + \
            " \"nivelEscolaridade\": 146, " + \
            " \"cpf\": \"91972685694\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 3, " + \
            " \"email\": \"0duo7f5\", " + \
            " \"telefone\": \"3bSFw\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 616, " + \
            " 804, " + \
            " 489, " + \
            " 374 " + \
            " ], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"logradouro\": \"Q6p26rqxmpTv2yi6\", " + \
            " \"numero\": \"556460\", " + \
            " \"cep\": \"53385502\", " + \
            " \"uf\": 48, " + \
            " \"inep\": 42, " + \
            " \"tipoVinculo\": 1, " + \
            " \"dataIngresso\": \"2010-13-26\", " + \
            " \"cargaHoraria\": 44 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpf\": \"Hb\", " + \
            " \"dataNascimento\": \"exTVw_jrqdBCcML\", " + \
            " \"nomeSocial\": \"Sra. Clara Videira\", " + \
            " \"sexo\": \"0\", " + \
            " \"logradouro\": \"tbS7V\", " + \
            " \"municipio\": 451, " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"cargaHoraria\": 782 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 745, " + \
            " \"cpf\": \"91972685694\", " + \
            " \"dataNascimento\": \"1962-03-11\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 3, " + \
            " \"nomeSocial\": \"Suélen Ribeiro\", " + \
            " \"cep\": \"01506679\", " + \
            " \"municipio\": 979, " + \
            " \"inep\": 530, " + \
            " \"codigoFuncao\": 118 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"33353159606\", " + \
            " \"nome\": \"kAI8ZKuj_\", " + \
            " \"dataNascimento\": \"1972-04-15\", " + \
            " \"racaCor\": 3, " + \
            " \"email\": \"15SgAQElssmT\", " + \
            " \"nomeSocial\": \"Suélen Ribeiro\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"bairro\": \"jUdzZ6m7K8T3\", " + \
            " \"numero\": \"869517\", " + \
            " \"cep\": \"\", " + \
            " \"uf\": 672, " + \
            " \"codigoFuncao\": 377, " + \
            " \"dataFim\": \"1986-13-17\", " + \
            " \"cargaHoraria\": 499 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 201
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"73843367671\", " + \
            " \"nome\": \"Antonia Gonçalves\", " + \
            " \"dataNascimento\": \"1972-04-15\", " + \
            " \"email\": \"Vg0VK0L\", " + \
            " \"telefone\": \"J_hAWimquUKJXHD\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 465, " + \
            " 673, " + \
            " 463, " + \
            " 48, " + \
            " 576 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"bairro\": \"QLH\", " + \
            " \"numero\": \"0dT\", " + \
            " \"cep\": \"61084382\", " + \
            " \"municipio\": 265, " + \
            " \"uf\": 34, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"rwtNkSdiZ\", " + \
            " \"anoInicioFormacaoAcademica\": 787 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 323, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 809, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"hbKpm\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " } " + \
            " ], " + \
            " \"inep\": 635, " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataIngresso\": \"1976-12-20\" " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"53385502101\", " + \
            " \"email\": \"SUVNbGzAX9SHR\", " + \
            " \"telefone\": \"zIUsix5ohUaTHzX7\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"sexo\": \"EVOMASTER\", " + \
            " \"numero\": \"298848\", " + \
            " \"cep\": \"85157612\", " + \
            " \"uf\": 1506679145, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 670, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"G\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 775, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"1TVblDAMh3OL\", " + \
            " \"anoInicioFormacaoAcademica\": 262, " + \
            " \"anoConclusaoFormacaoAcademica\": 72 " + \
            " }, " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"tc\", " + \
            " \"anoInicioFormacaoAcademica\": 590 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 336, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"P\", " + \
            " \"anoInicioFormacaoAcademica\": 951 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 129, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"jPp\" " + \
            " } " + \
            " ], " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataFim\": \"2044-04-31\" " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 906, " + \
            " \"cpf\": \"53385502101\", " + \
            " \"nome\": \"Vitor Hugo Monteira\", " + \
            " \"genero\": 0, " + \
            " \"telefone\": \"r8SSLg1\", " + \
            " \"nomeSocial\": \"Antonia Gonçalves\", " + \
            " \"sexo\": \"2\", " + \
            " \"bairro\": \"eb5o\", " + \
            " \"numero\": \"556460\", " + \
            " \"inep\": 583, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"ZVYp\", " + \
            " \"anoConclusaoFormacaoAcademica\": 670 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 130, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 0 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 492, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 418, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoConclusaoFormacaoAcademica\": 68 " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 2010, " + \
            " \"anoConclusaoFormacaoAcademica\": 807 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 208, " + \
            " \"anoConclusaoFormacaoAcademica\": 879 " + \
            " } " + \
            " ], " + \
            " \"tipoVinculo\": 65 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 201
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == True
        assert res_2.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"73843367671\", " + \
            " \"dataNascimento\": \"0SBgmHFwVQ\", " + \
            " \"genero\": 1, " + \
            " \"email\": \"wHn7CSgWPv\", " + \
            " \"telefone\": \"0VWhOKxnuP8b8CY\", " + \
            " \"tipoDeficiencia\": [], " + \
            " \"logradouro\": \"V8T2kS\", " + \
            " \"bairro\": \"YB2MEucNT74lG\", " + \
            " \"cep\": \"30123255\", " + \
            " \"municipio\": 929, " + \
            " \"tipoVinculo\": 489, " + \
            " \"dataIngresso\": \"1939-07-00\", " + \
            " \"cargaHoraria\": 575 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 167, " + \
            " \"dataNascimento\": \"1995-03-26\", " + \
            " \"telefone\": \"lwpWBYU4KvKd8wu\", " + \
            " \"cep\": \"rqO\", " + \
            " \"municipio\": 627, " + \
            " \"uf\": 362, " + \
            " \"inep\": 268, " + \
            " \"dataIngresso\": \"2080-10-19\", " + \
            " \"cargaHoraria\": 593 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 305, " + \
            " \"nome\": \"8eL1WJoisAGPR\", " + \
            " \"racaCor\": 5, " + \
            " \"telefone\": \"X5\", " + \
            " \"nomeSocial\": \"Yuri Barbosa\", " + \
            " \"sexo\": \"2\", " + \
            " \"bairro\": \"qD0nq8X8k\", " + \
            " \"numero\": \"\", " + \
            " \"municipio\": 21, " + \
            " \"uf\": 470, " + \
            " \"inep\": \"Ue\", " + \
            " \"matriculaRede\": \"5wR7R0o\", " + \
            " \"tipoVinculo\": 980, " + \
            " \"codigoFuncao\": 489 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 598, " + \
            " \"cpf\": \"73843367671\", " + \
            " \"telefone\": \"otWbn3ImgEm_\", " + \
            " \"nomeSocial\": \"Ofélia da Aldeia Filho\", " + \
            " \"sexo\": \"2\", " + \
            " \"bairro\": \"Vusux0CopKfFYZcJ\", " + \
            " \"numero\": \"809142\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"\", " + \
            " \"anoInicioFormacaoAcademica\": 583 " + \
            " } " + \
            " ], " + \
            " \"dataIngresso\": \"2083-02-03\", " + \
            " \"dataFim\": \"1921-05-03\" " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 712, " + \
            " \"email\": \"1W\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 422, " + \
            " 713, " + \
            " 941, " + \
            " 855, " + \
            " 721 " + \
            " ], " + \
            " \"sexo\": \"3\", " + \
            " \"bairro\": \"jMxLtElqz\", " + \
            " \"numero\": \"488598\", " + \
            " \"cep\": \"\", " + \
            " \"inep\": \"Vn3iruQJR\", " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"tipoVinculo\": 440, " + \
            " \"cargaHoraria\": 44 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_3 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_3.status_code == 201
        assert "application/json" in res_3.headers["content-type"]
        assert res_3.json()["success"] == True
        assert res_3.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 115, " + \
            " \"cpf\": \"85157612117\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 5, " + \
            " \"telefone\": \"eAdB5hHaaoZBB\", " + \
            " \"nomeSocial\": \"v\", " + \
            " \"sexo\": \"5\", " + \
            " \"numero\": \"530489\", " + \
            " \"cep\": \"53385502\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"anoConclusaoFormacaoAcademica\": 225 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 967, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"\", " + \
            " \"anoInicioFormacaoAcademica\": 425, " + \
            " \"anoConclusaoFormacaoAcademica\": 628 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 734, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 582, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"9m8U0\", " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 457, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 828, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 918 " + \
            " } " + \
            " ], " + \
            " \"inep\": 953, " + \
            " \"matriculaRede\": \"pwCjw\" " + \
            " }, " + \
            " { " + \
            " \"cpf\": \"78285642798\", " + \
            " \"nome\": \"Suélen Ribeiro\", " + \
            " \"genero\": 1, " + \
            " \"telefone\": \"FzuDbeOUbPxo\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 715, " + \
            " 544 " + \
            " ], " + \
            " \"sexo\": \"2\", " + \
            " \"bairro\": \"\", " + \
            " \"municipio\": 952, " + \
            " \"uf\": 565705559, " + \
            " \"inep\": \"o_aU3_\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 1, " + \
            " \"anoConclusaoFormacaoAcademica\": 85 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 523, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 175, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"o8TRgFzTsEjyNS\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 791, " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 652 " + \
            " }, " + \
            " {} " + \
            " ], " + \
            " \"matriculaRede\": \"DTndljjX\", " + \
            " \"tipoVinculo\": 344, " + \
            " \"codigoFuncao\": 1 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_4 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_4.status_code == 201
        assert "application/json" in res_4.headers["content-type"]
        assert res_4.json()["success"] == True
        assert res_4.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 289, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"8793w\", " + \
            " \"nome\": \"mFjTL\", " + \
            " \"genero\": 42, " + \
            " \"tipoDeficiencia\": [ " + \
            " 644 " + \
            " ], " + \
            " \"logradouro\": \"lw2LubNSX\", " + \
            " \"uf\": 947, " + \
            " \"inep\": \"tqMmBsyXPlas_8my\", " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"bqg3Y5\" " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 629, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\", " + \
            " \"anoInicioFormacaoAcademica\": 895 " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 87 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 1, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"brMD0\" " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"codigoFuncao\": 162, " + \
            " \"cargaHoraria\": 376 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 630, " + \
            " \"nivelEscolaridade\": 1986201286, " + \
            " \"cpf\": \"01506679145\", " + \
            " \"nome\": \"gAlPD0B\", " + \
            " \"dataNascimento\": \"1999-09-11\", " + \
            " \"genero\": 6, " + \
            " \"racaCor\": 4, " + \
            " \"nomeSocial\": \"Sílvia Conceição\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 570, " + \
            " 341, " + \
            " 391 " + \
            " ], " + \
            " \"logradouro\": \"60\", " + \
            " \"bairro\": \"Wun\", " + \
            " \"numero\": \"\", " + \
            " \"municipio\": 512, " + \
            " \"uf\": 344, " + \
            " \"inep\": 121, " + \
            " \"formacoesAcademicas\": [ " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 457, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"tipoFormacaoAcademica\": 287, " + \
            " \"noInstituicaoEnsinoFormacaoAcademica\": \"Universidade Federal do Rio de Janeiro\" " + \
            " }, " + \
            " { " + \
            " \"anoInicioFormacaoAcademica\": 461, " + \
            " \"anoConclusaoFormacaoAcademica\": 2014 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 234, " + \
            " \"anoInicioFormacaoAcademica\": 405 " + \
            " }, " + \
            " { " + \
            " \"areaDoConhecimentoFormacaoAcademica\": 818, " + \
            " \"anoInicioFormacaoAcademica\": 485 " + \
            " } " + \
            " ], " + \
            " \"matriculaRede\": \"_H3fS\", " + \
            " \"codigoFuncao\": 537, " + \
            " \"dataIngresso\": \"2073-09-14\", " + \
            " \"dataFim\": \"1956-01-11\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_5 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_5.status_code == 201
        assert "application/json" in res_5.headers["content-type"]
        assert res_5.json()["success"] == True
        assert res_5.json()["message"] == "Operação realizada com sucesso"
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/0/dataEnvio'] String "2025-05-04 03:00:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/1/dataEnvio'] String "2025-05-04 03:00:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/2/dataEnvio'] String "2025-05-04 03:00:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/3/dataEnvio'] String "2025-05-04 03:00:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/4/dataEnvio'] String "2025-05-04 03:00:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/5/dataEnvio'] String "2025-05-04 03:00:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/6/dataEnvio'] String "2025-05-04 02:59:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/7/dataEnvio'] String "2025-05-04 02:59:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/8/dataEnvio'] String "2025-05-04 02:59:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/9/dataEnvio'] String "2025-05-04 02:59:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/10/dataEnvio'] String "2025-05-04 02:57:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/11/dataEnvio'] String "2025-05-04 02:56:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/12/dataEnvio'] String "2025-05-04 02:56:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/13/dataEnvio'] String "2025-05-04 02:55:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/14/dataEnvio'] String "2025-05-04 02:54:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/15/dataEnvio'] String "2025-05-04 02:53:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/16/dataEnvio'] String "2025-05-04 02:52:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/17/dataEnvio'] String "2025-05-04 02:52:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/18/dataEnvio'] String "2025-05-04 02:51:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/19/dataEnvio'] String "2025-05-04 02:51:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/20/dataEnvio'] String "2025-05-04 02:50:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/21/dataEnvio'] String "2025-05-04 02:50:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/22/dataEnvio'] String "2025-05-04 02:50:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/23/dataEnvio'] String "2025-05-04 02:50:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/24/dataEnvio'] String "2025-05-04 02:50:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/25/dataEnvio'] String "2025-05-04 02:50:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/26/dataEnvio'] String "2025-05-04 02:48:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/27/dataEnvio'] String "2025-05-04 02:47:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/28/dataEnvio'] String "2025-05-04 02:47:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/29/dataEnvio'] String "2025-05-04 02:47:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/30/dataEnvio'] String "2025-05-04 02:47:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/31/dataEnvio'] String "2025-05-04 02:47:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/32/dataEnvio'] String "2025-05-04 02:47:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/33/dataEnvio'] String "2025-05-04 02:47:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/34/dataEnvio'] String "2025-05-04 02:47:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/35/dataEnvio'] String "2025-05-04 02:46:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/36/dataEnvio'] String "2025-05-04 02:46:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/37/dataEnvio'] String "2025-05-04 02:46:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/38/dataEnvio'] String "2025-05-04 02:46:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/39/dataEnvio'] String "2025-05-04 02:46:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/40/dataEnvio'] String "2025-05-04 02:46:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/41/dataEnvio'] String "2025-05-04 02:46:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/42/dataEnvio'] String "2025-05-04 02:45:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/43/dataEnvio'] String "2025-05-04 02:45:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/44/dataEnvio'] String "2025-05-04 02:45:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/45/dataEnvio'] String "2025-05-04 02:45:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/46/dataEnvio'] String "2025-05-04 02:45:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/47/dataEnvio'] String "2025-05-04 02:45:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/48/dataEnvio'] String "2025-05-04 02:45:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/49/dataEnvio'] String "2025-05-04 02:45:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/50/dataEnvio'] String "2025-05-04 02:45:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/51/dataEnvio'] String "2025-05-04 02:45:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/52/dataEnvio'] String "2025-05-04 02:45:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/53/dataEnvio'] String "2025-05-04 02:44:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/54/dataEnvio'] String "2025-05-04 02:44:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/55/dataEnvio'] String "2025-05-04 02:43:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/56/dataEnvio'] String "2025-05-04 02:43:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/57/dataEnvio'] String "2025-05-04 02:43:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/58/dataEnvio'] String "2025-05-04 02:43:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/59/dataEnvio'] String "2025-05-04 02:43:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/60/dataEnvio'] String "2025-05-04 02:42:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/61/dataEnvio'] String "2025-05-04 02:41:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/62/dataEnvio'] String "2025-05-04 02:41:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/63/dataEnvio'] String "2025-05-04 02:41:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/64/dataEnvio'] String "2025-05-04 02:41:37" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/65/dataEnvio'] String "2025-05-04 02:41:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/66/dataEnvio'] String "2025-05-04 02:41:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/67/dataEnvio'] String "2025-05-04 02:41:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/68/dataEnvio'] String "2025-05-04 02:41:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/69/dataEnvio'] String "2025-05-04 02:41:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/70/dataEnvio'] String "2025-05-04 02:40:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/71/dataEnvio'] String "2025-05-04 02:40:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/72/dataEnvio'] String "2025-05-04 02:40:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/73/dataEnvio'] String "2025-05-04 02:39:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/74/dataEnvio'] String "2025-05-04 02:39:09" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/75/dataEnvio'] String "2025-05-04 02:38:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/76/dataEnvio'] String "2025-05-04 02:38:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/77/dataEnvio'] String "2025-05-04 02:38:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/78/dataEnvio'] String "2025-05-04 02:38:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/79/dataEnvio'] String "2025-05-04 02:38:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/80/dataEnvio'] String "2025-05-04 02:37:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/81/dataEnvio'] String "2025-05-04 02:37:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/82/dataEnvio'] String "2025-05-04 02:36:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/83/dataEnvio'] String "2025-05-04 02:36:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/84/dataEnvio'] String "2025-05-04 02:36:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/85/dataEnvio'] String "2025-05-04 02:35:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/86/dataEnvio'] String "2025-05-04 02:32:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/87/dataEnvio'] String "2025-05-04 02:32:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/88/dataEnvio'] String "2025-05-04 02:32:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/89/dataEnvio'] String "2025-05-04 02:32:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/90/dataEnvio'] String "2025-05-04 02:32:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/91/dataEnvio'] String "2025-05-04 02:32:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/92/dataEnvio'] String "2025-05-04 02:32:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/93/dataEnvio'] String "2025-05-04 02:32:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/94/dataEnvio'] String "2025-05-04 02:32:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/95/dataEnvio'] String "2025-05-04 02:32:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/96/dataEnvio'] String "2025-05-04 02:31:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/97/dataEnvio'] String "2025-05-04 02:31:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/98/dataEnvio'] String "2025-05-04 02:31:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/99/dataEnvio'] String "2025-05-04 02:31:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/100/dataEnvio'] String "2025-05-04 02:31:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/101/dataEnvio'] String "2025-05-04 02:31:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/102/dataEnvio'] String "2025-05-04 02:31:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/103/dataEnvio'] String "2025-05-04 02:31:04" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/104/dataEnvio'] String "2025-05-04 02:30:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/105/dataEnvio'] String "2025-05-04 02:29:42" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/106/dataEnvio'] String "2025-05-04 02:29:33" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/107/dataEnvio'] String "2025-05-04 02:29:30" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/108/dataEnvio'] String "2025-05-04 02:29:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/109/dataEnvio'] String "2025-05-04 02:29:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/110/dataEnvio'] String "2025-05-04 02:29:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/111/dataEnvio'] String "2025-05-04 02:29:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/112/dataEnvio'] String "2025-05-04 02:29:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/113/dataEnvio'] String "2025-05-04 02:29:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/114/dataEnvio'] String "2025-05-04 02:28:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/115/dataEnvio'] String "2025-05-04 02:28:16" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/116/dataEnvio'] String "2025-05-04 02:26:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/117/dataEnvio'] String "2025-05-04 02:23:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/118/dataEnvio'] String "2025-05-04 02:21:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/119/dataEnvio'] String "2025-05-04 02:19:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/120/dataEnvio'] String "2025-05-04 02:19:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/121/dataEnvio'] String "2025-05-04 02:19:31" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/122/dataEnvio'] String "2025-05-04 02:19:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/123/dataEnvio'] String "2025-05-04 02:16:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/124/dataEnvio'] String "2025-05-04 02:15:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/125/dataEnvio'] String "2025-05-04 02:11:44" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/126/dataEnvio'] String "2025-05-04 02:10:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/127/dataEnvio'] String "2025-05-04 02:07:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/128/dataEnvio'] String "2025-05-04 02:06:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/129/dataEnvio'] String "2025-05-04 02:03:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/130/dataEnvio'] String "2025-05-04 02:03:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/131/dataEnvio'] String "2025-05-04 02:03:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/132/dataEnvio'] String "2025-05-04 02:01:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/133/dataEnvio'] String "2025-05-04 01:59:05" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/134/dataEnvio'] String "2025-05-04 01:58:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/135/dataEnvio'] String "2025-05-04 01:58:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/136/dataEnvio'] String "2025-05-04 01:57:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/137/dataEnvio'] String "2025-05-04 01:56:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/138/dataEnvio'] String "2025-05-04 01:53:34" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/139/dataEnvio'] String "2025-05-04 01:52:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/140/dataEnvio'] String "2025-05-04 01:49:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/141/dataEnvio'] String "2025-05-04 01:49:50" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/142/dataEnvio'] String "2025-05-04 01:48:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/143/dataEnvio'] String "2025-05-04 01:48:21" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/144/dataEnvio'] String "2025-05-04 01:46:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/145/dataEnvio'] String "2025-05-04 01:46:01" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/146/dataEnvio'] String "2025-05-04 01:42:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/147/dataEnvio'] String "2025-05-04 01:41:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/148/dataEnvio'] String "2025-05-04 01:40:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/149/dataEnvio'] String "2025-05-04 01:38:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/150/dataEnvio'] String "2025-05-04 01:37:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/151/dataEnvio'] String "2025-05-04 01:36:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/152/dataEnvio'] String "2025-05-04 01:36:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/153/dataEnvio'] String "2025-05-04 01:36:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/154/dataEnvio'] String "2025-05-04 01:31:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/155/dataEnvio'] String "2025-05-04 01:31:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/156/dataEnvio'] String "2025-05-04 01:30:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/157/dataEnvio'] String "2025-05-04 01:21:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/158/dataEnvio'] String "2025-05-04 01:20:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/159/dataEnvio'] String "2025-05-04 01:15:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/160/dataEnvio'] String "2025-05-04 01:15:25" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/161/dataEnvio'] String "2025-05-04 01:13:38" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/162/dataEnvio'] String "2025-05-04 01:12:03" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/163/dataEnvio'] String "2025-05-04 01:11:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/164/dataEnvio'] String "2025-05-04 01:06:18" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/165/dataEnvio'] String "2025-05-04 01:05:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/166/dataEnvio'] String "2025-05-04 01:05:00" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/167/dataEnvio'] String "2025-05-04 01:03:45" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/168/dataEnvio'] String "2025-05-04 01:02:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/169/dataEnvio'] String "2025-05-04 01:01:27" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/170/dataEnvio'] String "2025-05-04 01:01:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/171/dataEnvio'] String "2025-05-04 01:00:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/172/dataEnvio'] String "2025-05-04 00:59:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/173/dataEnvio'] String "2025-05-04 00:55:58" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/174/dataEnvio'] String "2025-05-04 00:54:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/175/dataEnvio'] String "2025-05-04 00:53:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/176/dataEnvio'] String "2025-05-04 00:52:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/177/dataEnvio'] String "2025-05-04 00:51:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/178/dataEnvio'] String "2025-05-04 00:51:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/179/dataEnvio'] String "2025-05-04 00:50:55" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/180/dataEnvio'] String "2025-05-04 00:44:59" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/181/dataEnvio'] String "2025-05-04 00:44:56" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/182/dataEnvio'] String "2025-05-04 00:44:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/183/dataEnvio'] String "2025-05-04 00:44:20" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/184/dataEnvio'] String "2025-05-04 00:44:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/185/dataEnvio'] String "2025-05-04 00:44:14" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/186/dataEnvio'] String "2025-05-04 00:44:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/187/dataEnvio'] String "2025-05-04 00:44:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/188/dataEnvio'] String "2025-05-04 00:43:57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/189/dataEnvio'] String "2025-05-04 00:43:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/190/dataEnvio'] String "2025-05-04 00:43:47" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/191/dataEnvio'] String "2025-05-04 00:43:43" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/192/dataEnvio'] String "2025-05-04 00:43:39" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/193/dataEnvio'] String "2025-05-04 00:43:36" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/194/dataEnvio'] String "2025-05-04 00:43:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/195/dataEnvio'] String "2025-05-04 00:43:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/196/dataEnvio'] String "2025-05-04 00:43:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/197/dataEnvio'] String "2025-05-04 00:42:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/198/dataEnvio'] String "2025-05-04 00:42:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/199/dataEnvio'] String "2025-05-04 00:41:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/200/dataEnvio'] String "2025-05-04 00:41:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/201/dataEnvio'] String "2025-05-04 00:40:54" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/202/dataEnvio'] String "2025-05-04 00:38:13" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/203/dataEnvio'] String "2025-05-04 00:38:10" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/204/dataEnvio'] String "2025-05-04 00:38:06" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/205/dataEnvio'] String "2025-05-04 00:37:41" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/206/dataEnvio'] String "2025-05-04 00:37:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/207/dataEnvio'] String "2025-05-04 00:37:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/208/dataEnvio'] String "2025-05-04 00:37:29" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/209/dataEnvio'] String "2025-05-04 00:37:22" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/210/dataEnvio'] String "2025-05-04 00:37:15" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/211/dataEnvio'] String "2025-05-04 00:37:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/212/dataEnvio'] String "2025-05-04 00:36:26" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/213/dataEnvio'] String "2025-05-04 00:35:08" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/214/dataEnvio'] String "2025-05-04 00:33:51" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/215/dataEnvio'] String "2025-05-04 00:33:24" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/216/dataEnvio'] String "2025-05-04 00:33:19" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/217/dataEnvio'] String "2025-05-04 00:33:12" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/218/dataEnvio'] String "2025-05-04 00:32:35" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/219/dataEnvio'] String "2025-05-04 00:32:32" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/220/dataEnvio'] String "2025-05-04 00:32:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/data/221/dataEnvio'] String "2025-05-04 00:32:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/next'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> [Path '/pagination/links/previous'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_6 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=222",
                    headers=headers)
        
        assert res_6.status_code == 200
        assert "application/json" in res_6.headers["content-type"]
        assert res_6.json()["success"] == True
        assert res_6.json()["message"] == "Lotes de profissionais de educação obtidos com sucesso."
        assert len(res_6.json()["data"]) == 222
        assert res_6.json()["data"][0]["dataEnvio"] == "2025-05-04 03:00:33"
        assert res_6.json()["data"][0]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][1]["dataEnvio"] == "2025-05-04 03:00:28"
        assert res_6.json()["data"][1]["status_processamento"] == "Enviado"
        assert res_6.json()["data"][2]["dataEnvio"] == "2025-05-04 03:00:25"
        assert res_6.json()["data"][2]["status_processamento"] == "Enviado"
        # Skipping assertions on the remaining 219 elements. This limit of 3 elements can be increased in the configurations
        assert res_6.json()["pagination"]["total"] == 2715.0
        assert res_6.json()["pagination"]["count"] == 222.0
        assert res_6.json()["pagination"]["per_page"] == 222.0
        assert res_6.json()["pagination"]["current_page"] == 1.0
        assert res_6.json()["pagination"]["total_pages"] == 13.0
        assert res_6.json()["pagination"]["links"]["previous"] is None
        assert res_6.json()["pagination"]["links"]["next"] == 2.0
    
    
    # Calls:
    # (201) POST:/v1/profissionais/lote
    # Found 1 potential fault of type-code 200
    # Using 2 examples:
    #   1
    #   123456789
    @timeout_decorator.timeout(60)
    def test_51(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Object instance has properties which are not allowed by the schema: ["message","success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"nome\": \"fIjvAkEP4c0D\", " + \
            " \"email\": \"PjsZ7jSaO\", " + \
            " \"telefone\": \"1qEkqRJxMbv48A\", " + \
            " \"sexo\": \"5\", " + \
            " \"logradouro\": \"zMiC\", " + \
            " \"bairro\": \"5ZRXvzbdP\", " + \
            " \"numero\": \"4\", " + \
            " \"uf\": 959, " + \
            " \"inep\": \"MKvmEClS61ES2FWp\", " + \
            " \"tipoVinculo\": 565, " + \
            " \"codigoFuncao\": 1 " + \
            " }, " + \
            " { " + \
            " \"nome\": \"rzocSv\", " + \
            " \"genero\": 5, " + \
            " \"email\": \"3anzvaPjnINIbxg\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 633, " + \
            " 466, " + \
            " 882, " + \
            " 45, " + \
            " 152 " + \
            " ], " + \
            " \"bairro\": \"mCUzscYPpO4G4\", " + \
            " \"numero\": \"RR\", " + \
            " \"uf\": 256, " + \
            " \"inep\": 376, " + \
            " \"matriculaRede\": \"123456789\", " + \
            " \"tipoVinculo\": 1, " + \
            " \"codigoFuncao\": -491889384, " + \
            " \"dataIngresso\": \"1941-11-23\", " + \
            " \"cargaHoraria\": 835 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
    
    
    # Calls:
    # (400) GET:/v1/estudantes/lote/{id}/erros
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_52(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 400 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/vrx4KBR82gI6S1QC/erros?page=1",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: vrx4KBR82gI6S1QC"
    
    
    # Calls:
    # (400) GET:/v1/profissionais/lote/{id}/erros
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_53(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 400 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/ndsmWT_PqJgj/erros?" + 
                    "page=63&" + 
                    "per_page=164",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: ndsmWT_PqJgj"
    
    
    # Calls:
    # (400) GET:/v1/profissionais/lote/{id}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_54(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/3j_?" + 
                    "page=818&" + 
                    "per_page=10",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 3j_"
    
    
    # Calls:
    # (400) GET:/v1/estudantes/lote/{id}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_55(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Object instance has properties which are not allowed by the schema: ["success"]
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/8IYCATNX3j?" + 
                    "page=244&" + 
                    "incluir_objetos_processados=true",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O ID fornecido não é um UUID válido. ID: 8IYCATNX3j"
    
    
    # Calls:
    # (401) GET:/v1/profissionais/{cpf}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_56(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/{cpf} -> Response status 401 not defined for path '/v1/profissionais/{cpf}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/al8nFSdAYLi6PTU",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/estudantes/{cpfNis}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_57(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/{cpfNis} -> Response status 401 not defined for path '/v1/estudantes/{cpfNis}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/odIHdrjHahh",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) POST:/v1/profissionais
    # Found 1 potential fault of type-code 200
    # Using 1 example:
    #   1
    @timeout_decorator.timeout(60)
    def test_58(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais -> Response status 401 not defined for path '/v1/profissionais'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"cpf\": \"\", " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"\", " + \
            " \"nomeSocial\": \"56WwgCs9o\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 680, " + \
            " 208, " + \
            " 5 " + \
            " ], " + \
            " \"municipio\": 899, " + \
            " \"uf\": 205, " + \
            " \"inep\": \"bQ\", " + \
            " \"codigoFuncao\": 1, " + \
            " \"dataFim\": \"1976-10-16\", " + \
            " \"cargaHoraria\": 267 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) PATCH:/v1/estudantes/lote
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_59(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. PATCH:/v1/estudantes/lote -> Response status 401 not defined for path '/v1/estudantes/lote'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_5_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_6_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_7_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_8_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_9_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) POST:/v1/profissionais/lote
    # Found 1 potential fault of type-code 200
    # Using 3 examples:
    #   1
    #   44
    #   5
    @timeout_decorator.timeout(60)
    def test_60(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/profissionais/lote -> Response status 401 not defined for path '/v1/profissionais/lote'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"tipoEnsinoMedio\": 729, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"nome\": \"Gbl\", " + \
            " \"dataNascimento\": \"t8Raqe2p\", " + \
            " \"racaCor\": 42, " + \
            " \"email\": \"jHkihkH4V\", " + \
            " \"telefone\": \"iRbh6VECX1i\", " + \
            " \"bairro\": \"w0zE7M\", " + \
            " \"numero\": \"ak5\", " + \
            " \"municipio\": 474, " + \
            " \"matriculaRede\": \"qSV\", " + \
            " \"tipoVinculo\": -1443105889, " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 901, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"Ix0efFXa\", " + \
            " \"nome\": \"RQuhh\", " + \
            " \"genero\": 0, " + \
            " \"racaCor\": 4, " + \
            " \"telefone\": \"um\", " + \
            " \"nomeSocial\": \"TOETskB0Xgh\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 836 " + \
            " ], " + \
            " \"logradouro\": \"wPFKgYEXdyDBN\", " + \
            " \"numero\": \"s8_fD\", " + \
            " \"inep\": 805, " + \
            " \"formacoesAcademicas\": [], " + \
            " \"tipoVinculo\": 132, " + \
            " \"codigoFuncao\": 1, " + \
            " \"cargaHoraria\": 631 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 1, " + \
            " \"nivelEscolaridade\": 128, " + \
            " \"cpf\": \"TX1N3bD\", " + \
            " \"nome\": \"qcgG5BP9\", " + \
            " \"genero\": 2, " + \
            " \"email\": \"qdzRe5hKvYq\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 216642383, " + \
            " 572, " + \
            " 831, " + \
            " 66 " + \
            " ], " + \
            " \"logradouro\": \"ct\", " + \
            " \"bairro\": \"kPr\", " + \
            " \"municipio\": 94, " + \
            " \"uf\": 311, " + \
            " \"inep\": \"Uz6\", " + \
            " \"dataIngresso\": \"1965-00-10\", " + \
            " \"dataFim\": \"1975-07-11\", " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"nivelEscolaridade\": 788, " + \
            " \"cpf\": \"DW\", " + \
            " \"nome\": \"7FLQ\", " + \
            " \"dataNascimento\": \"wV4yGlNvw_\", " + \
            " \"email\": \"yTjPsDa79O\", " + \
            " \"telefone\": \"RtO\", " + \
            " \"logradouro\": \"p\", " + \
            " \"bairro\": \"S5TVGC8w1WPqIhBJ\", " + \
            " \"cep\": \"36OjNoF\", " + \
            " \"municipio\": 916, " + \
            " \"inep\": 953, " + \
            " \"matriculaRede\": \"6zHhKLjvm0NDGePM\", " + \
            " \"tipoVinculo\": 299, " + \
            " \"cargaHoraria\": 44 " + \
            " }, " + \
            " { " + \
            " \"tipoEnsinoMedio\": 880, " + \
            " \"nivelEscolaridade\": 5, " + \
            " \"cpf\": \"Upyxs\", " + \
            " \"nome\": \"teitZCKp7TK\", " + \
            " \"dataNascimento\": \"yk\", " + \
            " \"genero\": 5, " + \
            " \"email\": \"C\", " + \
            " \"telefone\": \"pIP0b\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 896, " + \
            " 242, " + \
            " 884, " + \
            " 497, " + \
            " 180 " + \
            " ], " + \
            " \"bairro\": \"fDDNWodb\", " + \
            " \"numero\": \"DPg7cN\", " + \
            " \"cep\": \"\", " + \
            " \"inep\": 365, " + \
            " \"codigoFuncao\": 659, " + \
            " \"dataFim\": \"2051-13-17\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) POST:/v1/estudantes/lote
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_61(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes/lote -> Response status 401 not defined for path '/v1/estudantes/lote'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"_AhV9Vxj\", " + \
            " \"numeroNISResponsavel\": \"RDeOcHfNzR\", " + \
            " \"dataNascimento\": \"BOyx\", " + \
            " \"genero\": 9, " + \
            " \"email\": \"NGEU3mVxujj\", " + \
            " \"telefone\": \"J\", " + \
            " \"nomeSocial\": \"O\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 221, " + \
            " 880, " + \
            " 632 " + \
            " ], " + \
            " \"numeroNIS\": \"\", " + \
            " \"rg\": \"dsPNdpSPl\", " + \
            " \"orgaoEmissor\": \"\", " + \
            " \"certidaoNascimento\": \"HckbqvtFxuV3y\", " + \
            " \"numero\": \"p3\", " + \
            " \"cep\": \"s\", " + \
            " \"municipio\": 262, " + \
            " \"matriculaRede\": \"A\", " + \
            " \"instituicao\": 415, " + \
            " \"estudanteIntegral\": 42, " + \
            " \"anoMatricula\": 355 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"fh\", " + \
            " \"nomeMaeEstudante\": \"2ziTpqXxn2LPoctU\", " + \
            " \"dataNascimento\": \"3Fmsof0DXCBrdn4t\", " + \
            " \"genero\": 4, " + \
            " \"racaCor\": 2, " + \
            " \"telefone\": \"nvku7\", " + \
            " \"sexo\": \"2\", " + \
            " \"numeroNIS\": \"uVfaj5lE3\", " + \
            " \"rg\": \"h777kbd1IXf\", " + \
            " \"orgaoEmissor\": \"u\", " + \
            " \"cnh\": \"kYPNW\", " + \
            " \"logradouro\": \"a0nDqrVuw\", " + \
            " \"cep\": \"au4uda\", " + \
            " \"serieAno\": 172, " + \
            " \"matriculaRede\": \"f3rElcsSKVca2wZ9\", " + \
            " \"instituicao\": 404, " + \
            " \"inep\": 60, " + \
            " \"estudanteAnoPeriodo\": 2, " + \
            " \"anoMatricula\": 240 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) POST:/v1/estudantes
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_62(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/estudantes -> Response status 401 not defined for path '/v1/estudantes'.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"cpf\": \"JsY0qH\", " + \
            " \"dataNascimento\": \"t1LgzkCcnR2XZ8\", " + \
            " \"racaCor\": 3, " + \
            " \"email\": \"bhzttZXys\", " + \
            " \"telefone\": \"XTh\", " + \
            " \"nomeSocial\": \"lRij_c\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 142, " + \
            " 266, " + \
            " 41, " + \
            " 222 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"orgaoEmissor\": \"1\", " + \
            " \"dataInicioMatricula\": \"2080-08-13\", " + \
            " \"instituicao\": 508, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 384, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"estudanteIntegral\": 42 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/profissionais/inep/{inep}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_63(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/inep/{inep} -> Response status 401 not defined for path '/v1/profissionais/inep/{inep}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/inep/8wlQQp53",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/estudantes/lote
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_64(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote -> Response status 401 not defined for path '/v1/estudantes/lote'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/estudantes/lote/{id}/erros
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_65(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id}/erros -> Response status 401 not defined for path '/v1/estudantes/lote/{id}/erros'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/M5gOE7OsT6x7V/erros?per_page=28",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/profissionais
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_66(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais -> Response status 401 not defined for path '/v1/profissionais'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais?page=958",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/profissionais/lote
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_67(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote -> Response status 401 not defined for path '/v1/profissionais/lote'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote?per_page=618004380",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/profissionais/lote/{id}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_68(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id} -> Response status 401 not defined for path '/v1/profissionais/lote/{id}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/H?page=10",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/estudantes/lote/{id}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_69(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/lote/{id} -> Response status 401 not defined for path '/v1/estudantes/lote/{id}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/lote/kFJzuxx?per_page=330",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/profissionais/lote/{id}/erros
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_70(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/profissionais/lote/{id}/erros -> Response status 401 not defined for path '/v1/profissionais/lote/{id}/erros'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/lote/8PwLVR2Vz/erros?" + 
                    "page=11&" + 
                    "per_page=149",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/estudantes/validacao-cadastro
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_71(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/validacao-cadastro -> Response status 401 not defined for path '/v1/estudantes/validacao-cadastro'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/validacao-cadastro?" + 
                    "per_page=611&" + 
                    "cpf=zJF1CE",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/estudantes/solicitacoes-alteracoes
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_72(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 401 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?page=5",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/estudantes
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_73(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes -> Response status 401 not defined for path '/v1/estudantes'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes?" + 
                    "page=887&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (401) GET:/v1/estudantes/inep/{inep}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_74(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/inep/{inep} -> Response status 401 not defined for path '/v1/estudantes/inep/{inep}'.
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/inep/aR6r2e7Vn?" + 
                    "per_page=10&" + 
                    "situacao_matricula=EVOMASTER&" + 
                    "situacao_final=APROVADAS",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Não autorizado"
    
    
    # Calls:
    # (404) GET:/v1/estudantes/solicitacoes-alteracoes
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_75(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/estudantes/solicitacoes-alteracoes -> Response status 404 not defined for path '/v1/estudantes/solicitacoes-alteracoes'.
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/solicitacoes-alteracoes?" + 
                    "page=98&" + 
                    "per_page=414&" + 
                    "cpfNovo=4DCE",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Ocorreu um erro inesperado."
        assert res_0.json()["errors"]["message"] == "Nenhum dado encontrado"


if __name__ == '__main__':
    unittest.main()
