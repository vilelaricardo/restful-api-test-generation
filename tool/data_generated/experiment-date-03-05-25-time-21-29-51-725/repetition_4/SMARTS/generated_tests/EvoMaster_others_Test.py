#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2025-05-04T08:33:16.774Z[Etc/UTC]
#  
#  The generated test suite contains 5 tests
#  
#  Covered targets: 18
#  
#  Used time: 0h 43m 9s
#  
#  Needed budget for current results: 100%
#  
#  This file contains test cases that represent failed calls, but not indicative of faults.
class EvoMaster_others_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:8000"
    
    
    
    
    
    
    
    
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (422) PATCH:/v1/estudantes/lote
    # Using 1 example:
    #   2025
    @timeout_decorator.timeout(60)
    def test_0(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"82162151693\", " + \
            " \"nomeMaeEstudante\": \"Timothy Garcia\", " + \
            " \"cpf\": \"oxL6mb\", " + \
            " \"dataNascimento\": \"jsb\", " + \
            " \"genero\": 2, " + \
            " \"racaCor\": 42, " + \
            " \"telefone\": \"11945225241\", " + \
            " \"nomeSocial\": \"pCifpRBMCpY\", " + \
            " \"tipoDeficiencia\": [ " + \
            " 1, " + \
            " 10, " + \
            " 5 " + \
            " ], " + \
            " \"sexo\": \"4\", " + \
            " \"numeroNIS\": \"87732598473\", " + \
            " \"rg\": \"3408567577817721\", " + \
            " \"certidaoNascimento\": \"ISjkhBL\", " + \
            " \"cnh\": \"\", " + \
            " \"cep\": \"46009157\", " + \
            " \"municipio\": 1302603, " + \
            " \"estudantePpl\": 2, " + \
            " \"dataInicioPeriodoLetivo\": \"2084-05-04\", " + \
            " \"formaOrganizacaoTurma\": 3, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 901, " + \
            " \"estudanteAnoPeriodo\": 1, " + \
            " \"anoMatricula\": 2025 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"82162151693\", " + \
            " \"nomeMaeEstudante\": \"David Dillon\", " + \
            " \"cpf\": \"12147927155\", " + \
            " \"nome\": \"Jennifer Jenkins\", " + \
            " \"dataNascimento\": \"2006-10-08\", " + \
            " \"genero\": 9, " + \
            " \"email\": \"LGRvg4zG@example.com\", " + \
            " \"sexo\": \"4\", " + \
            " \"rg\": \"7242236506407883\", " + \
            " \"orgaoEmissor\": \"SSP/AL\", " + \
            " \"logradouro\": \"uzMcVcBqnrQj M1HWtCHwj\", " + \
            " \"bairro\": \"AHJ\", " + \
            " \"cep\": \"38615488\", " + \
            " \"municipio\": 4200705, " + \
            " \"dataInicioMatricula\": \"1998-01-32\", " + \
            " \"serieAno\": 45, " + \
            " \"matriculaRede\": \"\", " + \
            " \"dataInicioPeriodoLetivo\": \"1990-02-28\", " + \
            " \"formaOrganizacaoTurma\": 593, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteIntegral\": 0 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 422
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == False
        assert res_1.json()["message"] == "Não foi possível processar as informações."
        assert res_1.json()["errors"]["message"] == "JSON inválido."
    
    
    # Calls:
    # (404) GET:/v1/profissionais/{cpf}
    @timeout_decorator.timeout(60)
    def test_1(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/4J7",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Nenhum profissional de educação encontrado."
    
    
    # Calls:
    # (404) GET:/v1/estudantes/{cpfNis}
    @timeout_decorator.timeout(60)
    def test_2(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/e6kR5K2jmG7T5A0w",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Nenhum estudante encontrado."
    
    
    # Calls:
    # (422) POST:/v1/profissionais
    # Using 1 example:
    #   44
    @timeout_decorator.timeout(60)
    def test_3(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nivelEscolaridade\": 265, " + \
            " \"cpf\": \"\", " + \
            " \"dataNascimento\": \"6J\", " + \
            " \"genero\": 6, " + \
            " \"email\": \"VAl0iXnajYLwYo9d\", " + \
            " \"telefone\": \"6zl\", " + \
            " \"sexo\": \"5\", " + \
            " \"bairro\": \"\", " + \
            " \"cep\": \"\", " + \
            " \"municipio\": 473, " + \
            " \"inep\": 252, " + \
            " \"formacoesAcademicas\": [], " + \
            " \"matriculaRede\": \"V9jMjygJsDPbp\", " + \
            " \"codigoFuncao\": 390, " + \
            " \"cargaHoraria\": 44 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "App\\Repositories\\DTOs\\Entrada\\Estudante\\PessoaEntradaDTO::__construct(): Argument #1 ($nome) must be of type string, null given, called in /home/wanderson/Documentos/experimento/api-cmde-develop/app/Repositories/DTOs/Entrada/ProfissionalEducacao/ProfissionalEducacaoDadosEntradaDTO.php on line 90"
    
    
    # Calls:
    # (422) POST:/v1/profissionais/lote
    @timeout_decorator.timeout(60)
    def test_4(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "JSON inválido."


if __name__ == '__main__':
    unittest.main()
