#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2025-05-04T18:04:22.556Z[Etc/UTC]
#  
#  The generated test suite contains 5 tests
#  
#  Covered targets: 21
#  
#  Used time: 0h 42m 47s
#  
#  Needed budget for current results: 99%
#  
#  This file contains test cases that represent failed calls, but not indicative of faults.
class EvoMaster_others_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:8000"
    
    
    
    
    
    
    
    
    
    
    # Calls:
    # 1 - (201) POST:/v1/estudantes/lote
    # 2 - (200) PATCH:/v1/estudantes/lote
    # 3 - (422) PATCH:/v1/estudantes/lote
    @timeout_decorator.timeout(60)
    def test_0(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"cpfResponsavel\": \"44477396074\", " + \
            " \"nomeMaeEstudante\": \"c\", " + \
            " \"nome\": \"FO8B2yt8H4xPM\", " + \
            " \"dataNascimento\": \"2010-05-28\", " + \
            " \"racaCor\": 0, " + \
            " \"nomeSocial\": \"njLzfP5wUblj1aqA\", " + \
            " \"numeroNIS\": \"06786168969\", " + \
            " \"logradouro\": \"\", " + \
            " \"bairro\": \"São Cervantes\", " + \
            " \"numero\": \"9668\", " + \
            " \"cep\": \"FqT7sAn\", " + \
            " \"municipio\": 2408102, " + \
            " \"dataInicioMatricula\": \"1932-11-27\", " + \
            " \"instituicao\": 8671, " + \
            " \"dataInicioPeriodoLetivo\": \"1944-11-03\", " + \
            " \"estudanteIntegral\": 1, " + \
            " \"anoMatricula\": 2024 " + \
            " }, " + \
            " { " + \
            " \"cpfResponsavel\": \"40275068390\", " + \
            " \"nomeMaeEstudante\": \"Joyce Larissa Queirós Sobrinho\", " + \
            " \"nome\": \"Aaron Fontes Padilha\", " + \
            " \"genero\": 5, " + \
            " \"racaCor\": 5, " + \
            " \"email\": \"O5xY\", " + \
            " \"telefone\": \"11969630845\", " + \
            " \"sexo\": \"4\", " + \
            " \"rg\": \"58Fsz5og\", " + \
            " \"certidaoNascimento\": \"13542488991921253808974947039786\", " + \
            " \"cnh\": \"101302420\", " + \
            " \"logradouro\": \"\", " + \
            " \"cep\": \"53804199\", " + \
            " \"municipio\": 1302603, " + \
            " \"uf\": 340, " + \
            " \"estudantePpl\": 0, " + \
            " \"dataInicioMatricula\": \"2030-13-30\", " + \
            " \"serieAno\": 27, " + \
            " \"matriculaRede\": \"7\", " + \
            " \"inep\": 41067428, " + \
            " \"dataInicioPeriodoLetivo\": \"1994-03-20\", " + \
            " \"formaOrganizacaoTurma\": 509, " + \
            " \"turmaOrganizacaoQuantidadeTotal\": 4, " + \
            " \"estudanteAnoPeriodo\": 42, " + \
            " \"anoMatricula\": 2024 " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 201
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == True
        assert res_0.json()["message"] == "Operação realizada com sucesso"
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [ " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_57_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_58_XYZ_\" " + \
            " }, " + \
            " { " + \
            " \"EM_tainted_map\": \"_EM_59_XYZ_\" " + \
            " } " + \
            " ] "
        headers['Accept'] = "application/json"
        res_1 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_1.status_code == 200
        assert "application/json" in res_1.headers["content-type"]
        assert res_1.json()["success"] == True
        assert res_1.json()["message"] == "Lote de atualização de estudante criado com sucesso."
        assert res_1.json()["detalhesValidacao"] == "Dados sensíveis são pendentes de validação. Consulte a rota /estudantes/solicitacoes-alteracoes para obter mais informações."
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_2 = requests \
                .patch(self.baseUrlOfSut + "/v1/estudantes/lote",
                    headers=headers, data=body)
        
        assert res_2.status_code == 422
        assert "application/json" in res_2.headers["content-type"]
        assert res_2.json()["success"] == False
        assert res_2.json()["message"] == "Não foi possível processar as informações."
        assert res_2.json()["errors"]["message"] == "JSON inválido."
    
    
    # Calls:
    # (404) GET:/v1/profissionais/{cpf}
    @timeout_decorator.timeout(60)
    def test_1(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/profissionais/8Itgu_ozdy5",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Nenhum profissional de educação encontrado."
    
    
    # Calls:
    # (404) GET:/v1/estudantes/{cpfNis}
    @timeout_decorator.timeout(60)
    def test_2(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v1/estudantes/4KEq07D",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "Nenhum estudante encontrado."
    
    
    # Calls:
    # (422) POST:/v1/profissionais
    @timeout_decorator.timeout(60)
    def test_3(self):
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"nome\": \"VhDaHQ6roC\", " + \
            " \"dataNascimento\": \"mul6MYj8w\", " + \
            " \"genero\": 0, " + \
            " \"tipoDeficiencia\": [ " + \
            " 473, " + \
            " 236 " + \
            " ], " + \
            " \"sexo\": \"5\", " + \
            " \"bairro\": \"3a3iyS\", " + \
            " \"municipio\": 573, " + \
            " \"inep\": 416, " + \
            " \"codigoFuncao\": 846, " + \
            " \"dataIngresso\": \"1971-04-25\", " + \
            " \"cargaHoraria\": 648 " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "O campo tipoEnsinoMedio deve ser um número inteiro. (and 2 more errors)"
    
    
    # Calls:
    # (422) POST:/v1/profissionais/lote
    @timeout_decorator.timeout(60)
    def test_4(self):
        
        
        headers = {}
        headers["x-api-key"] = "8jgd4t567yhgbv!&uj*9l;m83$gt7yh1"
        headers["content-type"] = "application/json"
        body = {}
        body = " [] "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/v1/profissionais/lote",
                    headers=headers, data=body)
        
        assert res_0.status_code == 422
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["success"] == False
        assert res_0.json()["message"] == "JSON inválido."


if __name__ == '__main__':
    unittest.main()
